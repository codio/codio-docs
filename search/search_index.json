{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Codio Dashboard Projects and Templates Support queries Projects Navigating Codio Stack templates Dashboard overview Starter pack templates Organization management Books Account settings and info Desktop Application Boxes and the IDE Courses Introduction Understanding Courses Basic IDE features Integrating with LTI 1.1 systems Advanced IDE features Integrating with LTI 1.3 systems Accessing a Box Creating Course Content Panels and Tabs Content Authoring with Guides Code editing Guides settings and page actions IDE tools - Deployment Codio Assessments IDE tools - Guides Assessments Library IDE tools - Phonegap Grading and accessing student projects IDE tools - Remote SSH terminal access Plagiarism checker Settings Resources Student Help Codio Resources The student view Flode Crunch, an alternative to Little Man Computer Lexikon Tkinter Changelog","title":"Documentation"},{"location":"students/","text":"The student dashboard is the main \u2018home\u2019 area that you use to navigate Codio. There are currently 2 dashboard views and you can swap between them toggling the New Look button on the top right. Default Dashboard: Alternative Dashboard: From the Courses screen you can view your classes, courses, projects and help by using the links on the left hand panel. STUDY links give your students access to courses BUILD links give your students access to project tools and our professional IDE HELP links give your students access to our customer service team and our help documentation. Joining a course \uf0c1 If your course is working with an LMS platform such as Canvas, Blackboard, Moodle etc. then you will access Codio directly from it. If you are not using and LMS then your instructor should have given you one of the following ways of joining. If your teacher has sent you an Invitation URL, copy/paste that into your browser. If your teacher has sent you a 2 word token, go to Join a course button on our website and enter the token. To access your course after this point, log in to your Codio account and go to the Courses area Courses \uf0c1 Default Dashboard \uf0c1 Below is an example of a student\u2019s Courses area with the default dashboard: 1: - Where you can toggle between list view or tile view of the courses you are enrolled in. 2: - Where you will see a list of assignments including due dates (if set by your instructor/teacher) to do including any pinned assignments. The pane can be collapsed clicking on the arrow. Click the assignment pane to open it. 3: - Where you will see a list of recent feedback for your assignments when grades are released by your instructor/teacher. The pane can be collapsed clicking on the arrow. Click to open the assignment feedback where you can then review your assessments, grading comments and any code comments from your instructor/teacher. 4: - Where you can open the course to see the details of the modules/assignments in that course where you can also open the assignment, view grade/comments etc. Expanded Course \uf0c1 Below is an example of a student\u2019s Courses area with the alternative dashboard: The Courses area is where you can see the modules and assignments that have been assigned to you. Up to 5 pinned assignments will be displayed more prominently at the top of the page and where your teacher has set an end date for the assignment, this will be shown in the card. Using the Courses area, you can easily re-open the assignment you were last working on, or start/open any of the other assignments that have been assigned to you. You start or open assignments using the navigation buttons displayed. Creating projects \uf0c1 You can create your own projects using the web-based IDE in Codio. To access the project area, use the BUILD links in the left-hand navigation panel. To learn about how to create projects, jump to the main Creating Project section. Dyslexia support \uf0c1 Codio has a built in dyslexia support feature. If you have students who would prefer to view their screen in dyslexia support mode they should do the following: Open the assignment they are working on. From the menu at the top right of the screen, select the setting icon (the gear icon), then Theme , then select the Dyslexic option. The screen should now display like this: Forgotten passwords \uf0c1 If you have forgotten your password, you should use the lost password link on the log-in page or enter your email in the reset password area (see image below) to reset your password automatically via email. If you do not have access to the email address you used in creating your Codio account, contact your teachers who can reset the password for you. If you wish to change your password (you should also do this if you forgot your password and/or it was reset by your teacher) follow these steps: Click on your name and profile picture (bottom left of screen) From the options along the top of the page, choose Account About halfway down the Account page is the Change Password area. The student should enter their existing password and the new password, and then click Update password . Three attempts are allowed before your account will be temporarily suspended. You can try again in 15 minutes Play mode \uf0c1 To see your content running, you need to Play it. If the content does not automatically start or if you have closed it, go to Tools->Guide->Play menu option or click the Start Guide icon in the file tree: At this point the panel layout is set up automatically according to the layout specified in the first section and it will be displayed. Player Options \uf0c1 Within the player various options can be controlled by the user Navigation Buttons allows the user to navigate forward/backward in the content. Settings allows the user to change the Theme (light/dyslexic), Mark as Complete, change the font size, reset both the theme and fonts, restore the current files (see below) and access Code Comments. See Dyslexia Support section Show/Hide Section List Hamburger Ico allows the user to show/hide the section list. Collapse button will not show if the page layout is One Pane. Guides \uf0c1 Restore Current Files \uf0c1 Sometimes you might make changes to your work that you don\u2019t like or that you don\u2019t want to keep. The easiest way to get rid of these is to restore the original files in a assignment. To do this: Open the assignment you are working on. In the top right, choose the settings icon, and then Restore current files If this does not achieve what you need, you can contact your class instructor who can reset the assignment back to its default state and you can start again as new. Completing assignments \uf0c1 When you have completed a assignment you can mark it as completed if the content author has not disabled this option for you. This can be done from either: In the settings (click the gear icon) From the last page in the guide. Going to Education>Mark as Completed menu item in the assignment If there are any assessments in the assignment that have not been submitted, details of these will be shown to allow you to review them before completing the assignment. If you mark a assignment as complete in error, contact your class instructor/teacher who can reset the status of the assignment so you can access it again. Lexikon \uf0c1 The Codio Lexikon is an integrated help system that lets you lookup information on a variety of languages and topics quickly and easily. Having access to concise reference information as new topics are learned is extremely useful and saves having to search the web and separate the wheat from the chaff! You can access the Lexikon at any time from within a coding project or assignment if enabled by the author or by going to Tools>Lexicon in the top menu. If the top menu is restricted for you, the default keyboard shortcut is Ctrl+Alt+L . If that does not open the Lexicon, contact your class instructor/teacher for assistance. The Lexikon is organized into Topics. We currently have added Crunch CSS HTML Javascript Linux CyberSecurity Grade Feedback \uf0c1 When your work has been graded and released by your class instructor, you will see 'graded' showing in your dashboard To view details of the grades given, either open the project and go to Education>Feedback in the top menu or click on the 'Grade' field showing in the dashboard Click on 'details' for the assessment and you can drill down to see more information on that assessment Assessments that support partial points and full points were not awarded can be identified with this icon: Note If the project has been marked as completed, you can click on the 'completed' button to access the grade feedback but if you wish to view the project, click on the name of the project on the left hand side. As the assignment is completed you will not be able to edit anything but can view the content If your organisation uses an LMS system a URL of the grading detail will also be passed to your LMS that you can access from the grading area in the LMS. Code Commenting \uf0c1 Your teachers can also add comments to your code to help. As you view the files commented, you will see the comment. You can also view all comments from Education -> Code Comments menu item and click there to open the required file You can add your own comments if you require for the teacher to review. As you update your code the comment will be marked as resolved but still available for review later from the Education -> Code Comments menu item or from the Guides settings area. Exam Mode \uf0c1 Your teacher/instructor can enable assignments with a number of exam mode options. Shuffle Question Order - when enabled, you will receive the pages of the assignment in a random order Forward Only Navigation - when enabled, you can only go forward through the pages. You will not be able to go back to previous pages. If you attempt to go to the next page and have any un-answered assessments, you will be advised to review your answers. Single Login - Once you start the assignment, until you mark it as complete, all other account login attempts will be blocked. As you start the assignment, you will be advised that it is restricted to single login and to ensure You have closed other tabs or browsers with Codio open You have a stable internet connection You have enough power in their device You have plenty of time to complete the assignment If you attempt to access the assignment from a different IP address or browser, you will be restricted and advised to contact your course instructor/professor for assistance. If you try to logout of Codio before the assessment is fully completed, you will be advised if you continue you will not be able to access it again. Instructor/Professors are be able to release the lock for you so if that happens, contact them. Code Playback \uf0c1 You also have access to the Code Playback feature. If you wish to review how you built the code in a file select Tools->Code Playback menu. The file that is currently active will be presented to you but you can review other files you can search for them by clicking on the folder icon shown to the right of the file name shown in the code playback tab. If you do not have access to the Tools menu, you can right click on a file open in any tab to access Code Playback To watch the code be built, click the play button. You can change the speed using the Speed drop down which is in changes per second. To walk through the changes manually, you can use the \u201cPrevious change\u201d and \u201cNext change\u201d buttons. You can drag along the playback slider to find points of interest. Deleted files \uf0c1 If you delete a file in error, you can also use Code Playback to find that file, review how it was built and where you find your last saved work you can copy/paste from the code playback into a new file you can create Audio/Video Chat Support \uf0c1 When your teacher/instructor is also accessing your assignment, a Call button will show allowing Audio/Video calls and or real time chat. Permissions \uf0c1 Permission for your camera/microphone is required and your browser will prompt you to allow.Permission If permission has been denied, you can re enable in your browser Google Chrome: If you are using Google Chrome you can access your settings through the padlock icon in the top left of your screen, next to the URL of the page you are currently on. Click Site settings and make sure your camera and microphone both say Allow Firefox: If you are using Firefox as your internet browser you can access your settings by typing \"about:permissions\" into the location bar as if it were a website and hitting enter. This will take you to your settings page, click the following link to find out more about changing your settings: https://support.mozilla.org/en-US/kb/permissions-manager-give-ability-store-passwords-set-cookies-more?redirectlocale=en-US&redirectslug=how-do-i-manage-website-permissions Safari: If you are using Safari, you can access your browser settings by clicking Safari and then Preferences. You will see a pop up box and can update your settings. Learn more about how to update the settings through the following link: https://support.apple.com/en-nz/guide/safari/ibrwe2159f50/mac","title":"Students"},{"location":"students/#joining-a-course","text":"If your course is working with an LMS platform such as Canvas, Blackboard, Moodle etc. then you will access Codio directly from it. If you are not using and LMS then your instructor should have given you one of the following ways of joining. If your teacher has sent you an Invitation URL, copy/paste that into your browser. If your teacher has sent you a 2 word token, go to Join a course button on our website and enter the token. To access your course after this point, log in to your Codio account and go to the Courses area","title":"Joining a course"},{"location":"students/#courses","text":"","title":"Courses"},{"location":"students/#default-dashboard","text":"Below is an example of a student\u2019s Courses area with the default dashboard: 1: - Where you can toggle between list view or tile view of the courses you are enrolled in. 2: - Where you will see a list of assignments including due dates (if set by your instructor/teacher) to do including any pinned assignments. The pane can be collapsed clicking on the arrow. Click the assignment pane to open it. 3: - Where you will see a list of recent feedback for your assignments when grades are released by your instructor/teacher. The pane can be collapsed clicking on the arrow. Click to open the assignment feedback where you can then review your assessments, grading comments and any code comments from your instructor/teacher. 4: - Where you can open the course to see the details of the modules/assignments in that course where you can also open the assignment, view grade/comments etc.","title":"Default Dashboard"},{"location":"students/#expanded-course","text":"Below is an example of a student\u2019s Courses area with the alternative dashboard: The Courses area is where you can see the modules and assignments that have been assigned to you. Up to 5 pinned assignments will be displayed more prominently at the top of the page and where your teacher has set an end date for the assignment, this will be shown in the card. Using the Courses area, you can easily re-open the assignment you were last working on, or start/open any of the other assignments that have been assigned to you. You start or open assignments using the navigation buttons displayed.","title":"Expanded Course"},{"location":"students/#creating-projects","text":"You can create your own projects using the web-based IDE in Codio. To access the project area, use the BUILD links in the left-hand navigation panel. To learn about how to create projects, jump to the main Creating Project section.","title":"Creating projects"},{"location":"students/#dyslexia-support","text":"Codio has a built in dyslexia support feature. If you have students who would prefer to view their screen in dyslexia support mode they should do the following: Open the assignment they are working on. From the menu at the top right of the screen, select the setting icon (the gear icon), then Theme , then select the Dyslexic option. The screen should now display like this:","title":"Dyslexia support"},{"location":"students/#forgotten-passwords","text":"If you have forgotten your password, you should use the lost password link on the log-in page or enter your email in the reset password area (see image below) to reset your password automatically via email. If you do not have access to the email address you used in creating your Codio account, contact your teachers who can reset the password for you. If you wish to change your password (you should also do this if you forgot your password and/or it was reset by your teacher) follow these steps: Click on your name and profile picture (bottom left of screen) From the options along the top of the page, choose Account About halfway down the Account page is the Change Password area. The student should enter their existing password and the new password, and then click Update password . Three attempts are allowed before your account will be temporarily suspended. You can try again in 15 minutes","title":"Forgotten passwords"},{"location":"students/#play-mode","text":"To see your content running, you need to Play it. If the content does not automatically start or if you have closed it, go to Tools->Guide->Play menu option or click the Start Guide icon in the file tree: At this point the panel layout is set up automatically according to the layout specified in the first section and it will be displayed.","title":"Play mode"},{"location":"students/#player-options","text":"Within the player various options can be controlled by the user Navigation Buttons allows the user to navigate forward/backward in the content. Settings allows the user to change the Theme (light/dyslexic), Mark as Complete, change the font size, reset both the theme and fonts, restore the current files (see below) and access Code Comments. See Dyslexia Support section Show/Hide Section List Hamburger Ico allows the user to show/hide the section list. Collapse button will not show if the page layout is One Pane.","title":"Player Options"},{"location":"students/#guides","text":"","title":"Guides"},{"location":"students/#restore-current-files","text":"Sometimes you might make changes to your work that you don\u2019t like or that you don\u2019t want to keep. The easiest way to get rid of these is to restore the original files in a assignment. To do this: Open the assignment you are working on. In the top right, choose the settings icon, and then Restore current files If this does not achieve what you need, you can contact your class instructor who can reset the assignment back to its default state and you can start again as new.","title":"Restore Current Files"},{"location":"students/#completing-assignments","text":"When you have completed a assignment you can mark it as completed if the content author has not disabled this option for you. This can be done from either: In the settings (click the gear icon) From the last page in the guide. Going to Education>Mark as Completed menu item in the assignment If there are any assessments in the assignment that have not been submitted, details of these will be shown to allow you to review them before completing the assignment. If you mark a assignment as complete in error, contact your class instructor/teacher who can reset the status of the assignment so you can access it again.","title":"Completing assignments"},{"location":"students/#lexikon","text":"The Codio Lexikon is an integrated help system that lets you lookup information on a variety of languages and topics quickly and easily. Having access to concise reference information as new topics are learned is extremely useful and saves having to search the web and separate the wheat from the chaff! You can access the Lexikon at any time from within a coding project or assignment if enabled by the author or by going to Tools>Lexicon in the top menu. If the top menu is restricted for you, the default keyboard shortcut is Ctrl+Alt+L . If that does not open the Lexicon, contact your class instructor/teacher for assistance. The Lexikon is organized into Topics. We currently have added Crunch CSS HTML Javascript Linux CyberSecurity","title":"Lexikon"},{"location":"students/#grade-feedback","text":"When your work has been graded and released by your class instructor, you will see 'graded' showing in your dashboard To view details of the grades given, either open the project and go to Education>Feedback in the top menu or click on the 'Grade' field showing in the dashboard Click on 'details' for the assessment and you can drill down to see more information on that assessment Assessments that support partial points and full points were not awarded can be identified with this icon: Note If the project has been marked as completed, you can click on the 'completed' button to access the grade feedback but if you wish to view the project, click on the name of the project on the left hand side. As the assignment is completed you will not be able to edit anything but can view the content If your organisation uses an LMS system a URL of the grading detail will also be passed to your LMS that you can access from the grading area in the LMS.","title":"Grade Feedback"},{"location":"students/#code-commenting","text":"Your teachers can also add comments to your code to help. As you view the files commented, you will see the comment. You can also view all comments from Education -> Code Comments menu item and click there to open the required file You can add your own comments if you require for the teacher to review. As you update your code the comment will be marked as resolved but still available for review later from the Education -> Code Comments menu item or from the Guides settings area.","title":"Code Commenting"},{"location":"students/#exam-mode","text":"Your teacher/instructor can enable assignments with a number of exam mode options. Shuffle Question Order - when enabled, you will receive the pages of the assignment in a random order Forward Only Navigation - when enabled, you can only go forward through the pages. You will not be able to go back to previous pages. If you attempt to go to the next page and have any un-answered assessments, you will be advised to review your answers. Single Login - Once you start the assignment, until you mark it as complete, all other account login attempts will be blocked. As you start the assignment, you will be advised that it is restricted to single login and to ensure You have closed other tabs or browsers with Codio open You have a stable internet connection You have enough power in their device You have plenty of time to complete the assignment If you attempt to access the assignment from a different IP address or browser, you will be restricted and advised to contact your course instructor/professor for assistance. If you try to logout of Codio before the assessment is fully completed, you will be advised if you continue you will not be able to access it again. Instructor/Professors are be able to release the lock for you so if that happens, contact them.","title":"Exam Mode"},{"location":"students/#code-playback","text":"You also have access to the Code Playback feature. If you wish to review how you built the code in a file select Tools->Code Playback menu. The file that is currently active will be presented to you but you can review other files you can search for them by clicking on the folder icon shown to the right of the file name shown in the code playback tab. If you do not have access to the Tools menu, you can right click on a file open in any tab to access Code Playback To watch the code be built, click the play button. You can change the speed using the Speed drop down which is in changes per second. To walk through the changes manually, you can use the \u201cPrevious change\u201d and \u201cNext change\u201d buttons. You can drag along the playback slider to find points of interest.","title":"Code Playback"},{"location":"students/#deleted-files","text":"If you delete a file in error, you can also use Code Playback to find that file, review how it was built and where you find your last saved work you can copy/paste from the code playback into a new file you can create","title":"Deleted files"},{"location":"students/#audiovideo-chat-support","text":"When your teacher/instructor is also accessing your assignment, a Call button will show allowing Audio/Video calls and or real time chat.","title":"Audio/Video Chat Support"},{"location":"students/#permissions","text":"Permission for your camera/microphone is required and your browser will prompt you to allow.Permission If permission has been denied, you can re enable in your browser Google Chrome: If you are using Google Chrome you can access your settings through the padlock icon in the top left of your screen, next to the URL of the page you are currently on. Click Site settings and make sure your camera and microphone both say Allow Firefox: If you are using Firefox as your internet browser you can access your settings by typing \"about:permissions\" into the location bar as if it were a website and hitting enter. This will take you to your settings page, click the following link to find out more about changing your settings: https://support.mozilla.org/en-US/kb/permissions-manager-give-ability-store-passwords-set-cookies-more?redirectlocale=en-US&redirectslug=how-do-i-manage-website-permissions Safari: If you are using Safari, you can access your browser settings by clicking Safari and then Preferences. You will see a pop up box and can update your settings. Learn more about how to update the settings through the following link: https://support.apple.com/en-nz/guide/safari/ibrwe2159f50/mac","title":"Permissions"},{"location":"courses/assessments-library/","text":"Overview \uf0c1 An assessment library in Codio is a collection of existing assessment items. You can create assessments libraries within your organization . You can organize your libraries by course number, programming language, department, etc. You can use existing assessments from Codio's Global library. To navigate through an assessments library, you filter based on tags. The Codio assessments library has a number of tags - your organization can come up with a convention that works for you! Adding Questions to an Assessments Library \uf0c1 Once an assessment is added to an assessment library, it can be accessed later and added to a project or course with ease. Adding assessments to an assessment library has a few simple steps. Before you begin, you or someone else in your organization with adminstrator access needs to create an organization assessments library if you do not already have one. The first step is creating the assessment. It is similar to how you normally create an assessment with a few things you should note: Assessments on pages set to the 1 Panel without tree layout will be saved with a simple layout . Use the metadata tab to tag your assessment so it appears when the assessments library is searched Use the files tab to ensure all dependent files such as grading scripts, images used in the guides pane, etc. are associated with the assessment so it works properly when added from the library Once the assessment is written, we can add it to an assessment library. Click the \"SAVE IN LIBRARY\" button on the bottom right of the window: A window will appear with a dropdown menu of all the available libraries that the question can be added to. Choose the desired library from the dropdown menu. Once the desired library has been chosen, press the \"ADD\" button. The assessment has now been added to the chosen library. If you get an error message, you may not have write access to your organization's assessment library . Once a question has been added, follow these steps to update the assessment in your organization's library. Additionally, you can disconnnect questions from Codio's global assessments library , modify them, and then add your version using the steps above! Codio's Global Assessments Library \uf0c1 The Global Assessments Library is an assessment library that all Codio users have read-only access to. The library contains auto-graded assessment questions covering a wide variety of topics, difficulties, and assessment types. We are currently populating it with assessments in: Java C / C++ Python JavaScript Data Structures (in Java) Features of Global Assessments Library \uf0c1 All assessments in the global library are auto-graded, there is no manual grading necessary. All assessments also contain example solutions and answer explanations for the student. Some will also have teacher notes to help better convey the intended learning objective of the assessment. Using the Global Assessments Library \uf0c1 Using the library is similar to using any other assessment library in your organization. Simply go to the assessments drop-down in the guides editor, click on \"Assessment Library\", and choose the Codio Main under \"Library Name\". You can filter through the different assessments by: Name Programming language Assessment type Category (topic-level) Content (sub-topic level) Learning Objective (in SWBAT form - \"Students will be able to....\") Bloom's Taxonomy level Here is an example of the tags in a Codio library assessment: Assessment type is auto-detected and not manually specified. You can even get a small preview of the question text! Once you find a suitable assessment, add it to your project . Remixing questions from the Global Assessments Library \uf0c1 If you like an assessment in our assessments library but want to add your own twist to it, you can disconnect the question from the library . Then, simply modify the assessment as you'd like! Additionally, you can then add your version of the assessments to your organization's assessment library . Bugs \uf0c1 If you find a bug or error with an assessment, please contact us Unlinking and Updating Assessments from Library \uf0c1 Updating an Existing Assessment \uf0c1 Click on the \"Add Assessment Icon\" Click on the assessment you want to edit in the \"Edit assessments\" portion of the dropdown menu Change whatever it is you want to change Click \"Update In Library\" Unlinking an Assessment \uf0c1 Click on the \"Add Assessment Icon\" Click on the assessment you want to disconnect in the \"Edit assessments\" portion of the dropdown menu Click \"disconnect\" Codio will display a message confirming that the assessment has been successfully disconnected from the appropriate library. You should also notice the link icon is no longer present next to the assessment in the \"Edit assessments\" portion of the dropdown menu Searching and Adding questions from the Assessments Library \uf0c1 Regardless of whether you are using Codio's global assessments library or your organization's assessment library , the steps for searching for and adding assessments from them are the same. Searching Assessments Library \uf0c1 From the assessments drop down, select the \"Assessment Library\" option. Use the drop down on the left to indicate which assessments library you want to search. To narrow down the assessments, input a tag and value pair. For example, you can search by the \"Programming Language\" (tag) and indicate you want \"Python\" (value) questions. The search is not case-sensitive. You will notice that Codio tries to help you by presenting auto-complete suggestions. You can also click on any of the tag fields you see in the current results and it will automatically filter to those and add a new row to your search query Once you have completed inputting the tag and value pair, you will get a list of results. You can add as many additional tag and value pairs or by clicking on tag:value pair currently shown to narrow your results by clicking the plus sign to the right of the value box. To navigate through your search results, you can use the scroll bar on the right to scroll through assessments on a page. Once you reach the bottom, you can use the page navigation in the top left to move backwards/forwards a page or jump to a certain page of results. Previewing Question \uf0c1 You can get a sneak peek of the question text by clicking within a listed assessment's white box. The question text will appear below the listed value/tag pairs. If you preview a second question, the first preview will collapse. Saving Searches \uf0c1 If you find a set of particular search parameters you want to save, you can do so by simply clicking the \"Save\" button to the right of the tags and values boxes. A prompt will ask you for the \"Search Name\" - this is how it will be listed in your saved search list. Using Saved Searches \uf0c1 To use a saved search, you click on the \"Saved\" drop down to the right of the tags and values boxes. Select the search you want to use by clicking on it's name. You will then be able to see all the parameters you saved previously. You can edit these search parameters freely without changing your saved search. If you find a set of search parameters you like better, you can simply save the new set and delete your old search. Deleting Saved Searches \uf0c1 To remove a saved search, you click on the \"Saved\" drop down to the right of the tags and values boxes. Delete the saved search by clicking on the red \"x\" to the right of it's name. Adding Questions from Assessments Library \uf0c1 Once you have found an assessment you would like to add to, simply press the \"Add\" button to the right. Please note the difference between layouts to know how it will be inserted. Simple vs Complex Layouts \uf0c1 In Codio's assessments libraries, there are two types of layouts: Simple An assessment in the library has a simple layout if it was added with the 1 Panel without tree layout . When adding a simple layout question to your project or book, the assessment will be inserted into the current page at your cursor's location. Complex An assessment in the library has a complex layout if it was added with any layout besides 1 Panel without tree. When adding a complex layout question to your project or book, the assessment will be inserted on a new page directly after the current page. How do you tell the difference? \uf0c1 When you are filtering the assessments library, you will notice the \"complex layout\" icon on assessments saved with a complex layout. All assessments without the icon are simple layout assessments.","title":"Assessments Library"},{"location":"courses/assessments-library/#overview","text":"An assessment library in Codio is a collection of existing assessment items. You can create assessments libraries within your organization . You can organize your libraries by course number, programming language, department, etc. You can use existing assessments from Codio's Global library. To navigate through an assessments library, you filter based on tags. The Codio assessments library has a number of tags - your organization can come up with a convention that works for you!","title":"Overview"},{"location":"courses/assessments-library/#adding-questions-to-an-assessments-library","text":"Once an assessment is added to an assessment library, it can be accessed later and added to a project or course with ease. Adding assessments to an assessment library has a few simple steps. Before you begin, you or someone else in your organization with adminstrator access needs to create an organization assessments library if you do not already have one. The first step is creating the assessment. It is similar to how you normally create an assessment with a few things you should note: Assessments on pages set to the 1 Panel without tree layout will be saved with a simple layout . Use the metadata tab to tag your assessment so it appears when the assessments library is searched Use the files tab to ensure all dependent files such as grading scripts, images used in the guides pane, etc. are associated with the assessment so it works properly when added from the library Once the assessment is written, we can add it to an assessment library. Click the \"SAVE IN LIBRARY\" button on the bottom right of the window: A window will appear with a dropdown menu of all the available libraries that the question can be added to. Choose the desired library from the dropdown menu. Once the desired library has been chosen, press the \"ADD\" button. The assessment has now been added to the chosen library. If you get an error message, you may not have write access to your organization's assessment library . Once a question has been added, follow these steps to update the assessment in your organization's library. Additionally, you can disconnnect questions from Codio's global assessments library , modify them, and then add your version using the steps above!","title":"Adding Questions to an Assessments Library"},{"location":"courses/assessments-library/#codios-global-assessments-library","text":"The Global Assessments Library is an assessment library that all Codio users have read-only access to. The library contains auto-graded assessment questions covering a wide variety of topics, difficulties, and assessment types. We are currently populating it with assessments in: Java C / C++ Python JavaScript Data Structures (in Java)","title":"Codio's Global Assessments Library"},{"location":"courses/assessments-library/#features-of-global-assessments-library","text":"All assessments in the global library are auto-graded, there is no manual grading necessary. All assessments also contain example solutions and answer explanations for the student. Some will also have teacher notes to help better convey the intended learning objective of the assessment.","title":"Features of Global Assessments Library"},{"location":"courses/assessments-library/#using-the-global-assessments-library","text":"Using the library is similar to using any other assessment library in your organization. Simply go to the assessments drop-down in the guides editor, click on \"Assessment Library\", and choose the Codio Main under \"Library Name\". You can filter through the different assessments by: Name Programming language Assessment type Category (topic-level) Content (sub-topic level) Learning Objective (in SWBAT form - \"Students will be able to....\") Bloom's Taxonomy level Here is an example of the tags in a Codio library assessment: Assessment type is auto-detected and not manually specified. You can even get a small preview of the question text! Once you find a suitable assessment, add it to your project .","title":"Using the Global Assessments Library"},{"location":"courses/assessments-library/#remixing-questions-from-the-global-assessments-library","text":"If you like an assessment in our assessments library but want to add your own twist to it, you can disconnect the question from the library . Then, simply modify the assessment as you'd like! Additionally, you can then add your version of the assessments to your organization's assessment library .","title":"Remixing questions from the Global Assessments Library"},{"location":"courses/assessments-library/#bugs","text":"If you find a bug or error with an assessment, please contact us","title":"Bugs"},{"location":"courses/assessments-library/#unlinking-and-updating-assessments-from-library","text":"","title":"Unlinking and Updating Assessments from Library"},{"location":"courses/assessments-library/#updating-an-existing-assessment","text":"Click on the \"Add Assessment Icon\" Click on the assessment you want to edit in the \"Edit assessments\" portion of the dropdown menu Change whatever it is you want to change Click \"Update In Library\"","title":"Updating an Existing Assessment"},{"location":"courses/assessments-library/#unlinking-an-assessment","text":"Click on the \"Add Assessment Icon\" Click on the assessment you want to disconnect in the \"Edit assessments\" portion of the dropdown menu Click \"disconnect\" Codio will display a message confirming that the assessment has been successfully disconnected from the appropriate library. You should also notice the link icon is no longer present next to the assessment in the \"Edit assessments\" portion of the dropdown menu","title":"Unlinking an Assessment"},{"location":"courses/assessments-library/#searching-and-adding-questions-from-the-assessments-library","text":"Regardless of whether you are using Codio's global assessments library or your organization's assessment library , the steps for searching for and adding assessments from them are the same.","title":"Searching and Adding questions from the Assessments Library"},{"location":"courses/assessments-library/#searching-assessments-library","text":"From the assessments drop down, select the \"Assessment Library\" option. Use the drop down on the left to indicate which assessments library you want to search. To narrow down the assessments, input a tag and value pair. For example, you can search by the \"Programming Language\" (tag) and indicate you want \"Python\" (value) questions. The search is not case-sensitive. You will notice that Codio tries to help you by presenting auto-complete suggestions. You can also click on any of the tag fields you see in the current results and it will automatically filter to those and add a new row to your search query Once you have completed inputting the tag and value pair, you will get a list of results. You can add as many additional tag and value pairs or by clicking on tag:value pair currently shown to narrow your results by clicking the plus sign to the right of the value box. To navigate through your search results, you can use the scroll bar on the right to scroll through assessments on a page. Once you reach the bottom, you can use the page navigation in the top left to move backwards/forwards a page or jump to a certain page of results.","title":"Searching Assessments Library"},{"location":"courses/assessments-library/#previewing-question","text":"You can get a sneak peek of the question text by clicking within a listed assessment's white box. The question text will appear below the listed value/tag pairs. If you preview a second question, the first preview will collapse.","title":"Previewing Question"},{"location":"courses/assessments-library/#saving-searches","text":"If you find a set of particular search parameters you want to save, you can do so by simply clicking the \"Save\" button to the right of the tags and values boxes. A prompt will ask you for the \"Search Name\" - this is how it will be listed in your saved search list.","title":"Saving Searches"},{"location":"courses/assessments-library/#using-saved-searches","text":"To use a saved search, you click on the \"Saved\" drop down to the right of the tags and values boxes. Select the search you want to use by clicking on it's name. You will then be able to see all the parameters you saved previously. You can edit these search parameters freely without changing your saved search. If you find a set of search parameters you like better, you can simply save the new set and delete your old search.","title":"Using Saved Searches"},{"location":"courses/assessments-library/#deleting-saved-searches","text":"To remove a saved search, you click on the \"Saved\" drop down to the right of the tags and values boxes. Delete the saved search by clicking on the red \"x\" to the right of it's name.","title":"Deleting Saved Searches"},{"location":"courses/assessments-library/#adding-questions-from-assessments-library","text":"Once you have found an assessment you would like to add to, simply press the \"Add\" button to the right. Please note the difference between layouts to know how it will be inserted.","title":"Adding Questions from Assessments Library"},{"location":"courses/assessments-library/#simple-vs-complex-layouts","text":"In Codio's assessments libraries, there are two types of layouts: Simple An assessment in the library has a simple layout if it was added with the 1 Panel without tree layout . When adding a simple layout question to your project or book, the assessment will be inserted into the current page at your cursor's location. Complex An assessment in the library has a complex layout if it was added with any layout besides 1 Panel without tree. When adding a complex layout question to your project or book, the assessment will be inserted on a new page directly after the current page.","title":"Simple vs Complex Layouts"},{"location":"courses/assessments-library/#how-do-you-tell-the-difference","text":"When you are filtering the assessments library, you will notice the \"complex layout\" icon on assessments saved with a complex layout. All assessments without the icon are simple layout assessments.","title":"How do you tell the difference?"},{"location":"courses/assessments/","text":"Assessments \uf0c1 Assessments allow you to ask any number of automatically or manually graded questions within your content. They allow a student or a teacher to assess how well they are grasping the subject matter. Many assessment types are automatically graded, saving precious time for teachers and giving students instant feedback. A wide range of assessment types (automatic code tests, multiple choice tests, fill in the blanks, drop-down selection, free text responses and project grading) allow the broadest possible measurement of a student's progress. In course scenarios, all assessment responses feed through to a teacher dashboard. For multiple choice tests, fill in the blanks and drop-down selection assessment types, each individual assessment can only be answered once, giving a true reflection of understanding rather than being able to carry on answering until the correct answer is achieved. When an answer is submitted, the correct answer is shown to the student by default, but this can be disabled if required. You can choose to weave assessments into the tutorial materials or to create dedicated assessments content. Ungraded Assessments \uf0c1 Sometimes, teachers ask students to \"check their understanding\" through ungraded avenues such as bell-ringers, exit tickets, show of hands, etc. The goal is to assess the class's understanding -- not to effect grades. This can be done by setting the correct/incorrect points to '0' with the result that the assessment will not be graded and no points added (or deducted in the case of an incorrect answer) from the students overall grade score for the assignment. Setting the correct/incorrect points can also be used for survey purposes Example Project \uf0c1 https://codio.com/codio-units/java-example is a project that you can copy into your own Codio account and shows you how to create code tests and setup automatic marking. We would also recommend that you check out our Demo Guides and Assessments and Use Pack to create into your Codio account to review. Submit buttons and marking as complete \uf0c1 There are two concepts that are important to understand in order to control the way the student submits questions and the way a student marks a project as complete. Click here for a detailed discussion on these. Adding a new assessment \uf0c1 To add a new assessment, you should first position the cursor in your content where you want it to appear. Then, from the assessments drop-down, select the type of assessment you wish to insert. Editing an existing assessment \uf0c1 If you want to edit an existing assessment on the page you are viewing, you should press the settings button in the guide toolbar. In the lower section of the drop down list you will find any assessments on that page. Select one to edit. Editing points given for an assessment \uf0c1 If you wish to edit/change points given for the assessment, you can do so editing each assessment individually as above or you can press the Settings icon in the authoring toolbar then select the Assessments tab. All assessments present in the current project are listed, and you can change the allocated points. You can enter any positive numeric value. Deleting an assessment \uf0c1 Select the page where your assessment is located. Then remove the assessment token from the page. As assessment token looks like this. Once deleted, an assessment remains hidden. To fully remove it, press the Settings icon in the authoring toolbar then select the Assessments tab. All assessments present in the current project are listed. You can delete the ones that are highlighted in red individually by pressing the red x button to delete it or use the Filter By , select Not Used and delete all unused assessments together. You can also search for assessments by name,points or order in guides and order them up or down using the arrow buttons Autograding when a student completes a assignment \uf0c1 Codio allows you to run a special auto-grading script as soon as an assignment is completed by the student. This special type of assessment is managed from the assignment settings page in a course. Click here for details. Secure Script execution \uf0c1 If you store assessment scripts in the .guides/secure folder, they will run securely such that the student has no way of either viewing the script or viewing other files in that folder that might contain secure data. Codio ensures that only the original project author is able to access this folder but when it is assigned to Students as an assignment, it is not accessible in any way and the script runs in an ephemeral container isolated from the students assignment. Any other scripts in the assignment that are not in this folder can be accessible to the students Student submission options \uf0c1 There are two important settings that control the way that a student submits individual questions and the way a student notifies the course instructors that a assignment is completed. The submit button \uf0c1 Until November 20th 2017, each assessment has a submit button beneath the assessment. Once pressed, the answer is autograded, if an MCQ, Fill In The Blank or Free Text question. If the One attempt only setting is selected for the assessment, then the student will be warned that they will not be able to resubmit. If this setting is not selected, then they will be able to resubmit a response. It is now possible to suppress the submit button entirely. The advantage of this is that students do not need to worry about the effect of pressing the button. They can simply provide a response and then move on to other assessments or pages in the guide. To suppress the use of the Submit button, you should go to the global settings tab in the guide and disable Use submit buttons . Once the project is marked as complete (see below) then all assessment responses are fully submitted automatically. You should make sure that all students' work is marked as complete either manually or using the automated mark as complete option on the final deadline. Mark as Complete \uf0c1 To suppress the student Mark as complete action, you should go to the guide global settings (see above screenshot) and disable Use mark as complete . A student can proactively mark as assignment as complete. This can trigger an assignment level autograde script and it is also flagged up in the teacher dashboard against that student. The drawback to using the student driven mark as complete option is that once students mark a assignment as complete, they are no longer able to make changes to the assignment, including answering assessments. The advantage is that instructors are able to grade those students' work ahead of a deadline. If the project has been marked as completed, students can click on the 'completed' button to access the grade feedback but if they wish to view the project, direct them to click on the name of the project on the left hand side. As the assignment is completed they will not be able to edit anything but can view the content. It is possible to disable the student side mark as complete option entirely so students do not need to think about doing it. It also means that instructors don't get requests from students to re-enable the assignment if they submitted by mistake or decided they want to change something. If you do not want students to mark as complete, then you will likely want to do one of the following Once an arbitrary deadline has been reached, after which you want to start grading student work, you should mark all students' work as complete from the assignment actions area. Set an end of assignment date and specify that once the date is reached, the students' work should be marked as complete automatically. Penalty deadlines \uf0c1 Another powerful feature that you may want to use is Penalty deadlines . This allows you to specify deadlines, before the final grading deadline, where a percentage deduction of the final grade is made. Click here for more information on managing penalty deadlines. Standard code tests \uf0c1 If you want to write code tests that give you in depth control by allowing you to write your own code to execute tests, then please refer to the advanced code tests . The majority of code tests, however, can be produced without writing any code at all using standard code tests. Standard code tests are dialog driven. You specify input data and the expected output for that input data. Codio will then execute the student code, supply the specified input data, and compare the expected output to the student code's actual output. Sample Starter Pack \uf0c1 There is a Starter Pack project that you can add to your account. Click here to install and Use Pack to create into your Codio account to review. This project contains examples for all assessment types as well as a guides authoring cheat sheet. Video - Standard Code Test \uf0c1 ** Please note, since this video was created the ability to easily generate items to test has been added. See Generate Items below. Basic setup \uf0c1 The configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files. General \uf0c1 The screenshot below shows the basic configuration fields for the General section: Name is a short name that describes the test. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the Show Name switch next to the name field. Instructions is the actual text that should be shown to the user, written in Markdown. Execution \uf0c1 The screenshot below shows the configuration fields for the Execution section: Command is the command that executes the student code itself. If you store the assessment scripts in the .guides/secure folder, they will run securely such that the student has no way of either viewing the script or viewing other files in that folder that might contain secure data. Pre-exec command is the command to execute before you run each test. This will normally be a compile command. Enabling the Allow Partial Points switch will allow partial points to be given. See the section Partial Points lower down on this page. With this enabled, the grade is based on the % of test cases the code passes. Files can be dragged into the command and pre-exec command field from the file tree and will automatically populate with the necessary execution codes: Java Compile: javac -cp path/to/file filename.java Run: java -cp path/to/file filename Python Run: python path/to/file/filename.py C Compile: gcc filename.c -o filename -lm Run: ./filename C++ Compile: g++ -o filename filename.cpp Run: ./filename Ruby Run: ruby filename.rb Bash run: bash full_path.sh SQL Run: python .guides/scripts/helper_mssql.py --db_host localhost --db_user SA --db_pass YourPassword --db_name DBNAME Note: First you must use Tools > Install Software to install the appropriate helper script for your database (MSSQL,MySql,PostgreSQL). For example, if you are using MSSQL, you would download the Helper MSSql. Grading \uf0c1 The screenshot below shows the configuration fields for the Grading section: Points is the score given to the student if the code test passes. You can enter any positive numeric value. '0' points can be set if you require this assessment to be ungraded. Enabling the Allow Partial Points switch will allow partial points to be given. See the section Partial Points lower down on this page. With this enabled, the grade is based on the % of test cases the code passes. Case insensitive tells Codio to make a case insensitive output comparison. By default, the comparison will be case sensitive. Ignore white space tells Codio to strip out any white space characters (carriage return, line feed, tab etc.) from both the expected output and the student output. It can be very helpful to enable this as it means you do not have to be over precise when specifying the fields or instructions. More information is provided below. Substring match tells Codio to perform a substring match when comparing the expected output to the student output. One attempt only allows the assessment to run only once. The student will be warned that they will not be able to resubmit. You would usually want to provide a run button or other means for the user to test the code before running the actual assessment. Show expected answer will show the students the expected output when they have submitted an answer for the question. To suppress this, flip the switch. Answer and rationale is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened in the course or when opening the students project. This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the Show Answer and Rationale to Student switch below the guidance field. Generate Items \uf0c1 This allows you to generate your code test items more easily. Click on Generate Item , set the command to your script file (including any pre-exec command if required) and then enter your inputs to generate the item to be checked by your code. Metadata \uf0c1 The Metadata section contains fields that further describe the current assessment using a variety of factors: Bloom's Level : The options for this field correspond to the general levels of Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment. Learning Objectives : What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \"SWBAT follow the flow of recursive execution\" . Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, Content and Programming Language , are required. To add your own tags, click Add Tag and populate their names and values in the empty input boxes at the bottom. Files \uf0c1 Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included. To mark a file to be included with the assessment, simply locate it in the file tree under Project files and tick the checkbox next to its name. Ticked files will appear under Additional content . Cheating opportunities \uf0c1 If you show the expected output and allow multiple attempts, students may figure out that all they need to do is run the test, look at the expected output and then write the required output data. To avoid this, we recommend that you create one standard code assessment that shows expected inputs and outputs so the student can test. You award no points for this assessment. You then would create a second assessment that does not show expected output and allows only a single attempt. This way, the student will not know what input data is being passed in and does not have another opportunity to modify their code and re-run the assessment. Specifying inputs and outputs \uf0c1 The final step in configuring an assessment is to set up the inputs and outputs in the Grading section. There are some important details to understand. The first set of empty input/output fields is provided. You should choose between supplying your inputs as arguments or as stdin data. These are explained in more detail below. You should be aware of case sensitivity and whitespace characters as explained above. Generally speaking, using the 'ignore whitespace' setting is a good idea unless you do need to be exact in this respect. If you only have one input/output pair then the student could write code that simply outputs the expected output without writing any real logic. To protect against this you can create multiple input/output test cases that are run through sequentially. To add a new test case, press the Add item to check button which generates a new pair. Inputs using arguments \uf0c1 The easiest way of supplying input data is in the Input - Arguments field as shown in the previous image. The argument data can then be read by the student code. Inputs using stdin \uf0c1 If you want to handle manual data input cases such as \"Enter your Name: \" then you would use the Input - Stdin field. This field allows you to supply the data that would normally be entered manually in the console. The following is important to avoid mistakes. The input data should have a new line if this would be expected in the actual program execution. In the output field, you need to be aware that the prompt text that is displayed to the user appears in stdout and so it should be reflected in your output field but without the data entered by the user. Normally, you would not put a new line in the output field between each input prompt as the new line character is generated by the user when pressing the enter key is not a part of the output. We recommend that you enable the Ignore white space and Substring match options to be more tolerant. The following image shows how to format input and output fields if you are not ignoring white space or doing a Substring match . Note how the input field only supplied the values to be input, not the prompt itself (which is actually a part of stdout ). It is important to accurately account for all spaces and carriage returns. The following image shows the more tolerant approach that has the Ignore whitespace option set. In this case, we have put everything on its own line for readability. The whitespace characters will be stripped out of both the expected output and the student output at runtime. Error Feedback \uf0c1 To provide extended feedback about issues in the student's code, you can enable this option if you wish to show feedback to the student in the event the test fails. Please note to prevent memory exhaustion on infinite loops and huge outputs, there is a limit of 1Mb for the script output Advanced code tests \uf0c1 Before you read about the advanced code test, please be sure to check the standard code tests as these require no coding at all, are very quick to set up and cover the majority of test cases you are likely to want to create. The advanced code test assessment type allows you to write code that checks code a student has written. You can write the code in any language you like provided it can be run from the command line. You should be aware that if students are able to access the command line, they are able to explore the box and find the folder where your test scripts are located. For scripting languages, this would allow them to modify the script. For compiled executables they could theoretically create their own executable and then replace yours with their own one. They would need to know how the callbacks work to succeed at this. If you want to make your scripts as secure as possible, please click here for information on secure scripts run when an assignment is marked as complete. Sample Starter Pack \uf0c1 There is a Starter Pack project that you can add to your account. Click here to install and Use Pack to create into your Codio account to review. This project contains examples for all types of auto-graded assessments as well as a Codio authoring cheat sheet. Test definition \uf0c1 Setting up a Code Test within the Guide editor is very simple. The configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files. General \uf0c1 The screenshot below shows the basic configuration fields for the General section: Name is a short name that describes the test. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the Show Name switch next to the name field. Instructions is the actual text that should be shown to the user, written in Markdown. Execution \uf0c1 You can evaluate student code using a variety of languages and frameworks that are already supported. Files can be dragged into the command field where relevant from the file tree. You can also use a custom grading script. Supported languages and frameworks: Ruby : rubocop or rspec Java : JUnit or checkstyle Python : pycodestyle or UnitTest JavaScript : jshint or jslint Using JUnit \uf0c1 When using JUnit you can add your own custom feedback to the standard feedback from Junit to return to the students. The feedback message can be passed to the assert method as the first parameter. assertEquals(feedback, expected, actual) Using pycodestyle \uf0c1 Before using the pycodestyle option, pycodestyle has to be installed. You may use the following commands to do so: sudo apt update sudo apt install python3-pip sudo python3 -m pip install pycodestyle To add individual Python source files whose style should be checked, either enter their relative path to ~/namespace or drag them from the Filetree into the Add Case input box, and click Add Case . You may add as many cases as needed. When the assessment executes, pycodestyle will inspect each added file and output all styling issues that it found. Using UnitTest \uf0c1 When using Python unit test and you want to implement a Python test and keep the test file ( .guides/secure ) separate from the student work (another directory) you can define the student folder where the students .py file is located where it is not located in the workspace folder Using jshint or jslint \uf0c1 Before using them, jshint or jslint must be installed as a Node.js global package. You may use the following command to do so: sudo npm install -g jshint jslint To add individual JavaScript source files whose style should be checked, either enter their relative path to ~/namespace or drag them from the Filetree into the Add Case input box, and click Add Case . You may add as many cases as needed. You may also select either JSLint or JSHint in the Language Assessment Subtype dropdown. When the assessment executes, your choice of either jshint or jslint will inspect each added file and output all styling issues that it found. Custom \uf0c1 Command is the command to run to invoke your test. See the section Test code location below for more details. If you store the assessment scripts in the .guides/secure folder, they will run securely such that the student has no way of either viewing the script or viewing other files in that folder that might contain secure data. Enabling the Allow Partial Points switch will allow partial points to be given. See the section Partial Points lower down on this page. Timeout is the period of time (seconds) the test will run before terminating. Grading \uf0c1 Points is the score given to the student if the code test passes. You can choose any positive numeric value. One attempt only allows the assessment to be run only once. This generally not advised unless you make it clear to the student that a failed test cannot be repeated. You should also provide a Run button in the Guide (or provide other instructions) so the user can test the code before running the actual assessment. Answer and rationale is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened in the course or when opening the students project. This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the Show Answer and Rationale to Student switch below the guidance field. Metadata \uf0c1 The Metadata section contains fields that further describe the current assessment using a variety of factors: Bloom's Level : The options for this field correspond to the general levels of Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment. Learning Objectives : What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \"SWBAT follow the flow of recursive execution\" . Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, Content and Programming Language , are required. To add your own tags, click Add Tag and populate their names and values in the empty input boxes at the bottom. Files \uf0c1 Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included. To mark a file to be included with the assessment, simply locate it in the file tree under Project files and tick the checkbox next to its name. Ticked files will appear under Additional content . Test code location \uf0c1 You can place your test code anywhere you like, but if you store the assessment scripts in the .guides/secure folder, they will run securely such that the student has no way of either viewing the script or viewing other files in that folder that might contain secure data. Another suitable location could be to to create a .guides/tests folder. When specifying a command to run, you could specify it in either of these ways (the ~/workspace folder is assumed if you do not specify a full path). node .guides/tests/mytest.js node /home/codio/workspace/.guides/tests/mytest.js This example uses Node.js, but you can use any language you'd like. Test framework \uf0c1 Codio provides a simple framework for communicating with the Codio authored content. When defining a test, you specify the points that should be awarded for a successful answer. Success or Failure \uf0c1 To let Codio know whether the script executed correctly, your code should simply exit with 0. A Bash script would return with exit(0) , Node.js with process.exit(0) etc. To indicate that the script was unable to execute correctly, exit with a non-zero value. Partial Points \uf0c1 Codio also provides a way for you to award a partial points rather than the all or nothing approach described above. Example Bash grading script for partial points \uf0c1 If your test was written using a bash script, it would be done like this. POINTS=5 curl -s \"$CODIO_PARTIAL_POINTS_URL&points=${POINTS}\" > /dev/null Example Python grading script for partial points \uf0c1 A Python script might look like this. #!/usr/bin/env python import random import sys # import grade submit function sys.path.append('/usr/share/codio/assessments') from lib.grade import send_partial def main(): # Execute the test on the student's code grade = random.randint(10, 50) # Send the grade back to Codio with the penalty factor applied res = send_partial(int(round(grade))) exit( 0 if res else 1) main() The score you award should be any value between 0 and the maximum score you specified when defining the assessment in the Codio authoring editor. Autograding enhancements \uf0c1 To provide instructors with more robust auto-grade scripts, you can also now Send back feedback in different formats HTML/Markdown/plainText To support this additional feedback, this URL (passed as an environment variable) can be used: CODIO_PARTIAL_POINTS_V2_URL These variables allow POST and GET requests with the following parameters: Points ( CODIO_PARTIAL_POINTS_V2_URL ): 0-100 points for assessment (should be scaled automatically for partial points). Feedback - text Format - html|md|txt - txt is default Example Python grading script for partial points \uf0c1 #!/usr/bin/env python import os import random import requests import json # import grade submit function import sys sys.path.append('/usr/share/codio/assessments') from lib.grade import send_partial_v2, FORMAT_V2_MD, FORMAT_V2_HTML, FORMAT_V2_TXT def main(): # Execute the test on the student's code grade = random.randint(10, 50) # Send the grade back to Codio with the penatly factor applied res = send_partial_v2(int(round(grade)), '<strong>I am here</strong>', FORMAT_V2_HTML) exit( 0 if res else 1) main() Example Bash grading script for partial points \uf0c1 #!/bin/bash set -e POINTS=$(( ( RANDOM % 100 ) + 1 )) curl --retry 3 -s \"$CODIO_PARTIAL_POINTS_V2_URL\" -d points=$POINTS -d format=txt -d feedback=test Displaying information to the student \uf0c1 You can return text to the user that is shown once the test has concluded. Your test output is captured from stderr and stdout , so for Node.js, for example, console.log('Well done!!') would work. For success, you might simply return 'Well done!' . For failure, aim to provide as much explanation to the student as possible regarding why they failed. You can return plain text, but if you want to format your response text, you can return HTML. To do so, make sure you enclose your HTML within <html> </html> tags. Dashboard score \uf0c1 If Allow Partial Points is disabled and your test returns 0, then Codio will give a dashboard score specified in the Points field; if it returns a non-zero value, then a score of 0 is assumed. If Allow Partial Points is enabled, then Codio will give a dashboard score based on the request it received at CODIO_PARTIAL_POINTS_URL . If no request was received, then a score of 0 is assumed. Inputs and outputs to student code \uf0c1 If your assessment requires that inputs are passed into the student code or data should be returned from the student code, then it is your responsibility to implement this. You should make it clear how the student should process your test's inputs and how to return data back to your test. Multiple choice \uf0c1 Codio support both single and multiple response versions of MCQs. Assessment definition \uf0c1 The configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files. General \uf0c1 Name is a short name that describes the assessment. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the Show Name switch next to the name field. Question is the question instruction that is shown to the student. Execution \uf0c1 Shuffle Answers enabling this will randomise the order of the questions for the students The Multiple Response slider indicates whether the user can select more than one answer, in which case check boxes are used instead of radio buttons to specify correct answers. Answers is where you add as many individual answers as you require. To indicate the correct answer(s), toggle the sliders for multiple response or the radio button for single response. Ordering using the arrows you can change the order the answers are presented to students Grading \uf0c1 Show Expected Answer will show the students the correct answer when they have submitted an answer for this question. To suppress this, flip the switch. Correct Points is the score given to the student if the student makes the correct selection. You can choose any positive numeric value. '0' points can be set if you require this assessment to be ungraded. Enabling the Allow Partial Points switch will allow the student to get % of total points based on % of answers they get correct where Multiple Response is enabled. Incorrect Points is the score to be deducted if the student makes an incorrect selection. Typically, this value will be 0 but you can assign any positive numeric value if you wish to penalize guessing. If this assessment is to be ungraded, set '0' points Answer and rationale is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened in the course or when opening the students project. This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the Show Answer and Rationale to Student switch below the guidance field. Metadata \uf0c1 The Metadata section contains fields that further describe the current assessment using a variety of factors: Bloom's Level : The options for this field correspond to the general levels of Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment. Learning Objectives : What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \"SWBAT follow the flow of recursive execution\" . Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, Content and Programming Language , are required. To add your own tags, click Add Tag and populate their names and values in the empty input boxes at the bottom. Files \uf0c1 Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included. To mark a file to be included with the assessment, simply locate it in the file tree under Project files and tick the checkbox next to its name. Ticked files will appear under Additional content . One attempt only \uf0c1 Codio allows users to make their selections and move on to other content pages or assessments without actually submitting their answer. However, once the answer has been submitted, it cannot be resubmitted. This gives teachers a far clearer understanding of which students are understanding the materials properly. There is little point to tests if the student simply changes the answers until the correct one appears. Fill in the blank \uf0c1 A 'fill in the blank' question comes in two flavours. By enabling/disabling Show Possible Values (see below) you can use either Free Text or Drop Down Free Text \uf0c1 The example below shows a typical question where the student has to complete the missing words. This is then auto-marked by the Guide as explained below. Drop Down \uf0c1 The example below shows a variation, where the student is given a list of possible answers and has to select the right answer from a drop down list of possible answers. This is then auto-graded as explained below. You can also add distractors (ie wrong answers) as well as using images for students to select from Assessment definition \uf0c1 The configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files. General \uf0c1 Name is a short name that describes the assessment. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the Show Name switch next to the name field. Instruction contains any general instructions you want to provide to the student. Execution \uf0c1 Text is the Markdown that you write including the correct answer specification. Below is an example of how the question should be specified. A prime number (or a prime) is a <<<natural>>> number greater than <<<1>>> that has no positive divisors other than <<<1>>> and <<<itself>>>. For a free text question ( Show Possible Values slider to the left), Codio shows blank text fields. The student should then enter the correct text. Codio ensures that the response is case insensitive. For obvious reasons, the longer and more complex the correct answer, the easier it is for the student to make minor spelling errors that will then be scored as an incorrect answer. For a drop-down question ( Show Possible Values slider to the right) Codio will gather all correct values (anything within the <<< >>> chevrons) into a drop-down list, randomise the order and offer the same list in each of the answer positions. You can also add distractors (wrong answers) to the drop down by listing them in the text area below. One distractor per line Regular Expression support \uf0c1 The fill in the blanks assessment also support repexp for enhanced options Some examples: Answer allows any characters - <<</./>>> Answer starts with word \"begin\" - <<</^begin/>>> Answer ends with word \"end\" - <<</end$/>>> Answer can contain many spaces in \"this is\" - <<</this\\s+is/>>> Answer contains 1 or 2 or 3 - <<</1 2 3/>>> Answer allows color or colour - <<</colou?r/>>> Answer allows yes or \"yes\" - <<<\"yes\", \"\"yes\"\">>> Answer allows hat or cat - <<</[hc]at/>>> Answer checks valid gmail address formatting - <<</(\\W ^)[\\w.\\-]{0,25}@(gmail)\\.com(\\W $)/>>> Answer checks date format (DD/MM/YYYY) - <<</^(?:(?:31(\\/ - \\.)(?:0?[13578] 1[02]))\\1 (?:(?:29 30)(\\/ - \\.)(?:0?[1,3-9] 1[0-2])\\2))(?:(?:1[6-9] [2-9]\\d)?\\d{2})$ ^(?:29(\\/ - \\.)0?2\\3(?:(?:(?:1[6-9] [2-9]\\d)?(?:0[48] [2468][048] [13579][26]) (?:(?:16 [2468][048] [3579][26])00))))$ ^(?:0?[1-9] 1\\d 2[0-8])(\\/ - \\.)(?:(?:0?[1-9]) (?:1[0-2]))\\4(?:(?:1[6-9] [2-9]\\d)?\\d{2})$/>>> Answer allows i==0 or i == 0 - <<</i ?== ?0/>>> Answer requires digit - <<</^[\\d]+$/>>> Answer requires non-digit - <<</^[\\D]+$/>>> Answer requires word character - <<</^[\\w]+$/>>> Answer requires non-word character - <<</^[\\W]+$/>>> Answer required between 1 to 100 - <<</^([1-9][0-9]? 100)$/>>> Answer allows several answers (Place1 or Place2) - <<<\"Place1\", \"Place2\">>> Answer allows several answers with/without \" \" (Place1 or \"Place1\" or Place2 or \"Place2\") - <<</^(Place1 Place2 \"Place1\" \"Place2\")$/>>> Grading \uf0c1 Points is the score given to the student if the student answers all parts of the assessment correctly. You can choose any positive numeric value. '0' points can be set if you require this assessment to be ungraded. Enabling the Allow Partial Points switch will allow the student to get % of total points based on % of blanks they get correct. The Show Possible Values switch determines whether the question is text based (the slider is gray and in the left position) or drop-down based (the slider is blue and in the right position). Show Expected Answer will show the students the correct answer when they have submitted an answer for this question. To suppress this, flip the switch. Answer and rationale is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened in the course or when opening the students project. This guidance information can also be shown to students after they have submitted their answer and also if they reload the unit after marking it as completed. To enable this, flip the Show Answer and Rationale to Student switch below the guidance field. Metadata \uf0c1 The Metadata section contains fields that further describe the current assessment using a variety of factors: Bloom's Level : The options for this field correspond to the general levels of Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment. Learning Objectives : What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \"SWBAT follow the flow of recursive execution\" . Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, Content and Programming Language , are required. To add your own tags, click Add Tag and populate their names and values in the empty input boxes at the bottom. Files \uf0c1 Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included. To mark a file to be included with the assessment, simply locate it in the file tree under Project files and tick the checkbox next to its name. Ticked files will appear under Additional content . Free text \uf0c1 Free text assessments allow students to answer questions in their own words. Teachers are then able to review and manually grade their answers. Assessment definition \uf0c1 Setting up a free text assessment is very simple. The configuration fields for a free text assessment are split into four sections: General, Grading, Metadata, and Files. General \uf0c1 Name is a short name that describes the assessment. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the Show Name switch next to the name field. Instructions is the actual text that should be shown to the user, written in Markdown. Grading \uf0c1 The Points field is the number of points allocated for the question. You can choose any positive numeric value. '0' points can be set if you require this assessment to be ungraded. Enabling the Allow Partial Points switch will allow the teacher when grading the answer to select the points to give for the students answer. Preview Type specified the expected input by the student. Codio offers plaintext and markdown options. LaTeX is also supported. Please refer to the Preview type section below for details. One Attempt Only can be used to restrict the student to answering the question once. If not enabled, students will be able to edit their answer until the assignment is marked as Completed. Answer and rationale is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened in the course or when opening the students project. This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the Show Answer and Rationale to Student switch below the guidance field. Metadata \uf0c1 The Metadata section contains fields that further describe the current assessment using a variety of factors: Bloom's Level : The options for this field correspond to the general levels of Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment. Learning Objectives : What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \"SWBAT follow the flow of recursive execution\" . Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, Content and Programming Language , are required. To add your own tags, click Add Tag and populate their names and values in the empty input boxes at the bottom. Files \uf0c1 Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included. To mark a file to be included with the assessment, simply locate it in the file tree under Project files and tick the checkbox next to its name. Ticked files will appear under Additional content . Preview type \uf0c1 The following preview options are available. They dictate the expected input format and whether a fully rendered preview pane appears below the student input. Markdown is useful if the student wants to enter text formatting commands. Here is a reference for Markdown: Daring Fireball - the author of Markdown LaTeX is useful where you want students to enter mathematical formulae in their answers. Click here for information on LaTeX. Plaintext - the student is expected to enter ordinary text, without support for markdown formatting. There is no preview window. Plaintext + LaTeX - this expects plaintext to be entered, therefore no support for markdown with additional support for LaTeX commands. A preview pane is shown beneath so the student is able to see the rendered LaTeX output. Markdown + LaTeX - this supports markdown input with LaTeX support. A preview pane is shown beneath so the student is able to see the rendered markdown and LaTeX output. Completing a free text assessment \uf0c1 If One Attempt Only is enabled, students will only be able to submit their answer once. If this is not enabled them students will be able to revisit the question and edit their answer until they mark the assignment as completed Grading free text assessments \uf0c1 To review and grade answers given by student, select assignment, then the student and a list of all the assessments in the assignment are shown. Free text assessments are identifiable from the icon Click one line and you will then see the question asked of the student and the answer they submitted. If the question was not set to Allow Partial Points , the teacher can select Correct or Incorrect If the question was set to use Allow Partial Points the teacher can select the points to give to the answer up to the maximum Points . Comments can also be added and will be shown to the student when grades are released. The comment field supports LATex and markdown with a preview area below the text area to allow the grader review the input. The comment field will autoexpand as required Navigating students assessments \uf0c1 Using the < and > buttons at the top of the assessments grading dialog you can quickly navigate either to the same assessment for other students or to other assessments for the select student Viewing graded free text assessments \uf0c1 For any free text assessments that have been graded by a teacher in an assignment, you will see the points given and the field in the Correct column checked. Autograde Free text \uf0c1 The Autograde Free text assessment is similar to the free text assessment but includes a field for a command line to execute a script allowing autograding. The answer will be stored in the environment variable CODIO_FREE_TEXT_ANSWER . Assessment definition \uf0c1 Setting up an assessment is very simple. The configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files. General \uf0c1 Name is a short name that describes the assessment. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the Show Name switch next to the name field. Instructions is the actual text that should be shown to the user, written in Markdown. Execution \uf0c1 Command is the command to execute a script to autograde. If you store the assessment scripts in the .guides/secure folder, they will run securely such that the student has no way of either viewing the script or viewing other files in that folder that might contain secure data. Timeout is the time to abort the script from executing in the event of a problem. Grading \uf0c1 The Points field is the number of points allocated for the question. You can choose any positive numeric value. '0' points can be set if you require this assessment to be ungraded. Enabling the Allow Partial Points switch will allow the teacher when grading the answer to select the points to give for the students answer. Preview Type specified the expected input by the student. Codio offers plaintext and markdown options. Latex is also supported. Please refer to the Preview type section below for details. One Attempt Only can be used to restrict the student to answering the question once. If not enabled, students will be able to edit their answer until the assignment is marked as Completed. Answer and rationale is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened in the course or when opening the students project. This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the Show Answer and Rationale to Student switch below the guidance field. Metadata \uf0c1 The Metadata section contains fields that further describe the current assessment using a variety of factors: Bloom's Level : The options for this field correspond to the general levels of Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment. Learning Objectives : What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \"SWBAT follow the flow of recursive execution\" . Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, Content and Programming Language , are required. To add your own tags, click Add Tag and populate their names and values in the empty input boxes at the bottom. Files \uf0c1 Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included. To mark a file to be included with the assessment, simply locate it in the file tree under Project files and tick the checkbox next to its name. Ticked files will appear under Additional content . Student Feedback \uf0c1 If your autograde script is to return feedback to your students as they submit the assessment, enable Release Grades Automatically . Preview type \uf0c1 The following preview options are available. They dictate the expected input format and whether a fully rendered preview pane appears below the student input. Markdown is useful if the student wants to enter text formatting commands. Here is a reference for Markdown: Daring Fireball - the author of Markdown LaTeX is useful where you want students to enter mathematical formulae in their answers. Click here for information on LaTeX. Plaintext - the student is expected to enter ordinary text, without support for markdown formatting. There is no preview window. Plaintext + LaTeX - this expects plaintext to be entered, therefore no support for markdown with additional support for LaTeX commands. A preview pane is shown beneath so the student is able to see the rendered LaTeX output. Markdown + LaTeX - this supports markdown input with LaTeX support. A preview pane is shown beneath so the student is able to see the rendered markdown and LaTeX output. Completing an autograde free text assessment \uf0c1 If One Attempt Only is enabled, students will only be able to submit their answer once. If this is not enabled them students will be able to revisit the question and edit their answer until they mark the assignment as completed Examples \uf0c1 A simple Bash script example for partial points \uf0c1 #!/usr/bin/env bash POINTS=0 if [ \"${CODIO_FREE_TEXT_ANSWER}\" == \"answer1\" ] then POINTS=1 fi if [ \"${CODIO_FREE_TEXT_ANSWER}\" == \"answer5\" ] then POINTS=5 fi if [ \"${CODIO_FREE_TEXT_ANSWER}\" == \"answer10\" ] then POINTS=10 fi curl \"$CODIO_PARTIAL_POINTS_URL&points=${POINTS}\" > /dev/null A Python example for partial points \uf0c1 #!/usr/bin/env python import os, requests, sys import random # get free text auto value text = os.environ['CODIO_FREE_TEXT_ANSWER'] # import grade submit function sys.path.append('/usr/share/codio/assessments') from lib.grade import send_partial def main(): # Execute the test on the student's code grade = 0 feedback = '' if text == '1': grade = 1 feedback = '1 point' elif text == '5': grade = 5 feedback = '5 points' elif text == '10': grade = 10 feedback = '10 points' else: grade = 0 feedback = 'no points' print(feedback) # Send the grade back to Codio with the penatly factor applied res = send_partial(int(round(grade))) exit( 0 if res else 1) main() Autograding enhancements \uf0c1 To provide instructors with more robust auto-grade scripts, you can also now Send back feedback in different formats HTML/Markdown/plainText To support this additional feedback, this URL (passed as an environment variable) can be used: CODIO_PARTIAL_POINTS_V2_URL These variables allow POST and GET requests with the following parameters: Points ( CODIO_PARTIAL_POINTS_V2_URL ): 0-100 points for assessment (should be scaled automatically for partial points). Feedback - text Format - html|md|txt - txt is default Example Bash grading script for partial points \uf0c1 #!/usr/bin/env bash POINTS=0 if [ \"${CODIO_FREE_TEXT_ANSWER}\" == \"answer1\" ] then POINTS=1 fi if [ \"${CODIO_FREE_TEXT_ANSWER}\" == \"answer5\" ] then POINTS=5 fi if [ \"${CODIO_FREE_TEXT_ANSWER}\" == \"answer10\" ] then POINTS=10 fi curl --retry 3 -s \"$CODIO_PARTIAL_POINTS_V2_URL\" -d points=$POINTS -d format=md -d feedback='### <strong>HTML text</strong>' Example Python grading script for partial points \uf0c1 #!/usr/bin/env python import os, requests, sys import random # get free text auto value text = os.environ['CODIO_FREE_TEXT_ANSWER'] # import grade submit function sys.path.append('/usr/share/codio/assessments') from lib.grade import send_partial_v2, FORMAT_V2_MD, FORMAT_V2_HTML, FORMAT_V2_TXT def main(): # Execute the test on the student's code grade = 0 feedback = '' if text == '1': grade = 1 feedback = '## 1 point' elif text == '5': grade = 5 feedback = '## 5 points' elif text == '10': grade = 10 feedback = '## 10 points' else: grade = 0 feedback = '## no points' # Send the grade back to Codio with the penatly factor applied res = send_partial_v2(int(round(grade)), feedback, FORMAT_V2_MD) exit( 0 if res else 1) main() Example Instructions \uf0c1 It is recommended that clear instructions are given to students on any specific items that are expected to be included in their answer. The following is an example: Create a table `users` with the fields: - id - primary key - name - text - email - text - years - integer - name and email should be required - years - optional, but if present - should be more or equal to 0 Expected Solution \uf0c1 CREATE TABLE users( id int PRIMARY KEY, name text NOT NULL, email text NOT NULL, years int CHECK(years > 0) ); Math assessments \uf0c1 Codio allows you to set and grade math questions for any type and level of mathematics using the Free Text assessment. We only offer manual grading of mathematical expressions or proofs. Manually graded assessments using free text \uf0c1 To create a manually graded math question, you can use the Free text assessment type. This allows the students to enter expressions or even full proofs and worked answers using Latex. For more information about Latex, please click here . You can enter Latex in the Question and Answer rationale fields. You should also set the Preview type drop down to either Plaintext + Latex or Markdown + Latex . Both of these ensure that the student sees a preview pane beneath their answer entry fully rendered in markdown and/or Latex. Please click here to review the free text assessment. Multiple choice \uf0c1 You can also use the multiple choice assessment type to create answers containing properly rendered Latex expressions. Grade Book assessments \uf0c1 A Grade book assessment is for manually graded assessments. A student does not need to answer it, and it is available for grading immediately Comments and points given will be visible to the student when the assessment is graded and the grades are released and rubric items can also be set where partial points allowed. See below Test definition \uf0c1 The configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files. General \uf0c1 Name is a short name that describes the test. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely what the assessment is. In many cases, you do not want to see this text appear to the student. To suppress this text, flip the Show Name switch next to the name field. Execution \uf0c1 Collapsed on start allows the assessment field to be collapsed when the page opens. Grading \uf0c1 Points is the score given to the student. You can choose any positive numeric value. Enabling the Allow Partial Points switch will allow partial points to be given. When Allow Partial Points is enabled, grading rubric items can be added to the assessment where points and messages can be defined. These will be visible to students when the assessment is graded and the grades are released and when teachers are grading, they can select the relevant rubric item. Metadata \uf0c1 The Metadata section contains fields that further describe the current assessment using a variety of factors: Bloom's Level : The options for this field correspond to the general levels of Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment. Learning Objectives : What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \"SWBAT follow the flow of recursive execution\" . Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, Content and Programming Language , are required. To add your own tags, click Add Tag and populate their names and values in the empty input boxes at the bottom. Files \uf0c1 Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included. To mark a file to be included with the assessment, simply locate it in the file tree under Project files and tick the checkbox next to its name. Ticked files will appear under Additional content . Parsons Puzzle assessments \uf0c1 What are Parsons Puzzles? \uf0c1 Parson\u2019s Problems are available on Codio as Parsons Puzzles. Parson\u2019s Problems are great formative assessments that ask students to arrange blocks of scrambled code, allowing them to focus on the purpose and flow of the code (often including a new pattern or feature) while not worrying about syntax. Codio uses a client-side implementation of Parson's Problems named js-parsons , whose official documentation is available here . Assessment definition \uf0c1 The configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata and Files. General \uf0c1 Name is a short name that describes the assessment. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the Show Name switch next to the name field. Instructions is the actual text that should be shown to the user. It can be written in Markdown or HTML. Execution \uf0c1 Code to become blocks is where you create the initial state of the puzzle for the students. Code to become distractor blocks is where you can distractors for the puzzle Max Distractors is where you can set the maximum number of distractors Grader is where you select the grader appropriate to the puzzle. Refer to the \"Grader Description\" section below for more details. Require Dragging is where you can enable dragging Disable indentation is where you can disable indentation if not required for your puzzle Indent size(px) is where you can set the pixel size of indentations Grading \uf0c1 The Points field is the number of points allocated for the question. You can choose any positive numeric value. '0' points can be set if you require this assessment to be ungraded. One Attempt Only can be used to restrict the student to answering the question once. If not enabled, students will be able to edit their answer until the assignment is marked as Completed. Answer and rationale is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened in the course or when opening the students project. This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the Show Answer and Rationale to Student switch below the guidance field. Metadata \uf0c1 The Metadata section contains fields that further describe the current assessment using a variety of factors: Bloom's Level : The options for this field correspond to the general levels of Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment. Learning Objectives : What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \"SWBAT follow the flow of recursive execution\" . Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, Content and Programming Language , are required. To add your own tags, click Add Tag and populate their names and values in the empty input boxes at the bottom. Files \uf0c1 Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included. To mark a file to be included with the assessment, simply locate it in the file tree under Project files and tick the checkbox next to its name. Ticked files will appear under Additional content . Grader Description \uf0c1 VariableCheckGrader \uf0c1 VariableCheckGrader is a grader that executes the code in the order submitted by the student and checks variable values afterwards. Expected and supported options: - vartests (required): array of variable test objects Each variable test object can/must have the following properties: - initcode : code that will be prepended before the learner solution code - code : code that will be appended after the learner solution code - message (required): a textual description of the test, shown to learner Properties specifying what is tested: - variables : an object with properties for each variable name to be tested; the value of the property is the expected value or - variable : a variable name to be tested - expected : expected value of the variable after code execution TurtleGrader \uf0c1 TurtleGrader is a grader for exercises that draw turtle graphics in Python. Required options: turtleModelCode : The code constructing the model drawing. The turtle is initialized to modelTurtle variable, so your code should use that variable. Options that can be specified (that is, optional): turtlePenDown : a boolean specifying whether or not the pen should be put down initially for the student constructed code turtleModelCanvas : ID of the canvas DOM element where the model solution will be drawn. Defaults to modelCanvas . turtleStudentCanvas : ID of the canvas DOM element where student turtle will draw. Defaults to studentCanvas . Grading is based on comparing the commands executed by the model and student turtle. If the executable_code option is also specified, the code on each line of that option will be executed instead of the code in the student constructed lines. Note that the student code should use the variable myTurtle for commands to control the turtle in order for the grading to work. UnitTestGrader \uf0c1 UnitTestGrader is a grader that executes student code and Skulpt unit tests LanguageTranslationGrader \uf0c1 Code \"Translating\" grader LineBasedGrader \uf0c1 LineBasedGrader is a grader that treats student answers as correct if and only if they match the order and indentation found in Initial Values . For incorrect answers, it highlights the lines that were not ordered or indented properly. For more information including video overviews, check out Graphical Parson's Problem Creator Sample Starter Pack \uf0c1 There is a Starter Pack project that you can add to your account that includes examples of Parson's Puzzle assessments. For Codio.com users: Click here to install For Codio.co.uk users: Click here to install and Use Pack to create into your Codio account to review. Sense Network \uf0c1 Sense.Education is an AI-Based code analysis package to give students feedback on their code submissions and is supported in Codio in the Sense.Network assessment type. Students can submit their work and will be able to view feedback from Sense and if One Attempt Only is not enabled can review their code and submit again. To help and track students activity through sense, custom script can be enabled. This assessment type is only visible when the sense.network api key is entered in the Organisation>Integrations area. See organisation admin roles for more on this. Assessment definition \uf0c1 The configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files. General \uf0c1 Name (required) is a short name that describes the assessment. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the Show Name switch next to the name field. Instructions (optional) is the text that should be shown to the user, written in Markdown. Execution \uf0c1 Pre-exec command (optional) is where a check can be run to confirm any code is compiling as required. If you store the scripts in the .guides/secure folder, they will run securely such that the student has no way of either viewing the script or viewing other files in that folder that might contain secure data. Pre-exec feedback (optional) field is used to show feedback if Pre-exec command fails, otherwise will show pre-exec output. Sense feedback Url (required) to extract assignment id Filename (optional) is the path to the file to pass. If empty, will send the currently opened file Grading \uf0c1 Gradable enable if the assignment is to be used within the grade total for the assignment. If this is not enabled students can be given feedback on their submission for this assessment without it being graded. Please note Answer and Rationale will not return anything to the student if the assignment is not gradable. When enabled, each submission will override any previous submissions for grading purposes. One Attempt Only can be used to restrict the student to answering the question once. If not enabled, students will be able to edit their answer until the assignment is marked as Completed. The Points field is the number of points allocated for the question. You can choose any positive numeric value. '0' points can be set if you require this assessment to be ungraded. Answer and Rationale is where guidance for the assessment can be entered where the assessment is Gradeable . This is not required if the assignment is not gradeable. This will be visible to the teacher when the project is opened by the teacher This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the Show Answer and Rationale to Student switch below the guidance field. Metadata \uf0c1 The Metadata section contains fields that further describe the current assessment using a variety of factors: Bloom's Level : The options for this field correspond to the general levels of Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment. Learning Objectives : What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \"SWBAT follow the flow of recursive execution\" . Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, Content and Programming Language , are required. To add your own tags, click Add Tag and populate their names and values in the empty input boxes at the bottom. Files \uf0c1 Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included. To mark a file to be included with the assessment, simply locate it in the file tree under Project files and tick the checkbox next to its name. Ticked files will appear under Additional content .","title":"Codio Assessments"},{"location":"courses/assessments/#assessments","text":"Assessments allow you to ask any number of automatically or manually graded questions within your content. They allow a student or a teacher to assess how well they are grasping the subject matter. Many assessment types are automatically graded, saving precious time for teachers and giving students instant feedback. A wide range of assessment types (automatic code tests, multiple choice tests, fill in the blanks, drop-down selection, free text responses and project grading) allow the broadest possible measurement of a student's progress. In course scenarios, all assessment responses feed through to a teacher dashboard. For multiple choice tests, fill in the blanks and drop-down selection assessment types, each individual assessment can only be answered once, giving a true reflection of understanding rather than being able to carry on answering until the correct answer is achieved. When an answer is submitted, the correct answer is shown to the student by default, but this can be disabled if required. You can choose to weave assessments into the tutorial materials or to create dedicated assessments content.","title":"Assessments"},{"location":"courses/assessments/#ungraded-assessments","text":"Sometimes, teachers ask students to \"check their understanding\" through ungraded avenues such as bell-ringers, exit tickets, show of hands, etc. The goal is to assess the class's understanding -- not to effect grades. This can be done by setting the correct/incorrect points to '0' with the result that the assessment will not be graded and no points added (or deducted in the case of an incorrect answer) from the students overall grade score for the assignment. Setting the correct/incorrect points can also be used for survey purposes","title":"Ungraded Assessments"},{"location":"courses/assessments/#example-project","text":"https://codio.com/codio-units/java-example is a project that you can copy into your own Codio account and shows you how to create code tests and setup automatic marking. We would also recommend that you check out our Demo Guides and Assessments and Use Pack to create into your Codio account to review.","title":"Example Project"},{"location":"courses/assessments/#submit-buttons-and-marking-as-complete","text":"There are two concepts that are important to understand in order to control the way the student submits questions and the way a student marks a project as complete. Click here for a detailed discussion on these.","title":"Submit buttons and marking as complete"},{"location":"courses/assessments/#adding-a-new-assessment","text":"To add a new assessment, you should first position the cursor in your content where you want it to appear. Then, from the assessments drop-down, select the type of assessment you wish to insert.","title":"Adding a new assessment"},{"location":"courses/assessments/#editing-an-existing-assessment","text":"If you want to edit an existing assessment on the page you are viewing, you should press the settings button in the guide toolbar. In the lower section of the drop down list you will find any assessments on that page. Select one to edit.","title":"Editing an existing assessment"},{"location":"courses/assessments/#editing-points-given-for-an-assessment","text":"If you wish to edit/change points given for the assessment, you can do so editing each assessment individually as above or you can press the Settings icon in the authoring toolbar then select the Assessments tab. All assessments present in the current project are listed, and you can change the allocated points. You can enter any positive numeric value.","title":"Editing points given for an assessment"},{"location":"courses/assessments/#deleting-an-assessment","text":"Select the page where your assessment is located. Then remove the assessment token from the page. As assessment token looks like this. Once deleted, an assessment remains hidden. To fully remove it, press the Settings icon in the authoring toolbar then select the Assessments tab. All assessments present in the current project are listed. You can delete the ones that are highlighted in red individually by pressing the red x button to delete it or use the Filter By , select Not Used and delete all unused assessments together. You can also search for assessments by name,points or order in guides and order them up or down using the arrow buttons","title":"Deleting an assessment"},{"location":"courses/assessments/#autograding-when-a-student-completes-a-assignment","text":"Codio allows you to run a special auto-grading script as soon as an assignment is completed by the student. This special type of assessment is managed from the assignment settings page in a course. Click here for details.","title":"Autograding when a student completes a assignment"},{"location":"courses/assessments/#secure-script-execution","text":"If you store assessment scripts in the .guides/secure folder, they will run securely such that the student has no way of either viewing the script or viewing other files in that folder that might contain secure data. Codio ensures that only the original project author is able to access this folder but when it is assigned to Students as an assignment, it is not accessible in any way and the script runs in an ephemeral container isolated from the students assignment. Any other scripts in the assignment that are not in this folder can be accessible to the students","title":"Secure Script execution"},{"location":"courses/assessments/#student-submission-options","text":"There are two important settings that control the way that a student submits individual questions and the way a student notifies the course instructors that a assignment is completed.","title":"Student submission options"},{"location":"courses/assessments/#the-submit-button","text":"Until November 20th 2017, each assessment has a submit button beneath the assessment. Once pressed, the answer is autograded, if an MCQ, Fill In The Blank or Free Text question. If the One attempt only setting is selected for the assessment, then the student will be warned that they will not be able to resubmit. If this setting is not selected, then they will be able to resubmit a response. It is now possible to suppress the submit button entirely. The advantage of this is that students do not need to worry about the effect of pressing the button. They can simply provide a response and then move on to other assessments or pages in the guide. To suppress the use of the Submit button, you should go to the global settings tab in the guide and disable Use submit buttons . Once the project is marked as complete (see below) then all assessment responses are fully submitted automatically. You should make sure that all students' work is marked as complete either manually or using the automated mark as complete option on the final deadline.","title":"The submit button"},{"location":"courses/assessments/#mark-as-complete","text":"To suppress the student Mark as complete action, you should go to the guide global settings (see above screenshot) and disable Use mark as complete . A student can proactively mark as assignment as complete. This can trigger an assignment level autograde script and it is also flagged up in the teacher dashboard against that student. The drawback to using the student driven mark as complete option is that once students mark a assignment as complete, they are no longer able to make changes to the assignment, including answering assessments. The advantage is that instructors are able to grade those students' work ahead of a deadline. If the project has been marked as completed, students can click on the 'completed' button to access the grade feedback but if they wish to view the project, direct them to click on the name of the project on the left hand side. As the assignment is completed they will not be able to edit anything but can view the content. It is possible to disable the student side mark as complete option entirely so students do not need to think about doing it. It also means that instructors don't get requests from students to re-enable the assignment if they submitted by mistake or decided they want to change something. If you do not want students to mark as complete, then you will likely want to do one of the following Once an arbitrary deadline has been reached, after which you want to start grading student work, you should mark all students' work as complete from the assignment actions area. Set an end of assignment date and specify that once the date is reached, the students' work should be marked as complete automatically.","title":"Mark as Complete"},{"location":"courses/assessments/#penalty-deadlines","text":"Another powerful feature that you may want to use is Penalty deadlines . This allows you to specify deadlines, before the final grading deadline, where a percentage deduction of the final grade is made. Click here for more information on managing penalty deadlines.","title":"Penalty deadlines"},{"location":"courses/assessments/#standard-code-tests","text":"If you want to write code tests that give you in depth control by allowing you to write your own code to execute tests, then please refer to the advanced code tests . The majority of code tests, however, can be produced without writing any code at all using standard code tests. Standard code tests are dialog driven. You specify input data and the expected output for that input data. Codio will then execute the student code, supply the specified input data, and compare the expected output to the student code's actual output.","title":"Standard code tests"},{"location":"courses/assessments/#sample-starter-pack","text":"There is a Starter Pack project that you can add to your account. Click here to install and Use Pack to create into your Codio account to review. This project contains examples for all assessment types as well as a guides authoring cheat sheet.","title":"Sample Starter Pack"},{"location":"courses/assessments/#video-standard-code-test","text":"** Please note, since this video was created the ability to easily generate items to test has been added. See Generate Items below.","title":"Video - Standard Code Test"},{"location":"courses/assessments/#basic-setup","text":"The configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files.","title":"Basic setup"},{"location":"courses/assessments/#general","text":"The screenshot below shows the basic configuration fields for the General section: Name is a short name that describes the test. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the Show Name switch next to the name field. Instructions is the actual text that should be shown to the user, written in Markdown.","title":"General"},{"location":"courses/assessments/#execution","text":"The screenshot below shows the configuration fields for the Execution section: Command is the command that executes the student code itself. If you store the assessment scripts in the .guides/secure folder, they will run securely such that the student has no way of either viewing the script or viewing other files in that folder that might contain secure data. Pre-exec command is the command to execute before you run each test. This will normally be a compile command. Enabling the Allow Partial Points switch will allow partial points to be given. See the section Partial Points lower down on this page. With this enabled, the grade is based on the % of test cases the code passes. Files can be dragged into the command and pre-exec command field from the file tree and will automatically populate with the necessary execution codes: Java Compile: javac -cp path/to/file filename.java Run: java -cp path/to/file filename Python Run: python path/to/file/filename.py C Compile: gcc filename.c -o filename -lm Run: ./filename C++ Compile: g++ -o filename filename.cpp Run: ./filename Ruby Run: ruby filename.rb Bash run: bash full_path.sh SQL Run: python .guides/scripts/helper_mssql.py --db_host localhost --db_user SA --db_pass YourPassword --db_name DBNAME Note: First you must use Tools > Install Software to install the appropriate helper script for your database (MSSQL,MySql,PostgreSQL). For example, if you are using MSSQL, you would download the Helper MSSql.","title":"Execution"},{"location":"courses/assessments/#grading","text":"The screenshot below shows the configuration fields for the Grading section: Points is the score given to the student if the code test passes. You can enter any positive numeric value. '0' points can be set if you require this assessment to be ungraded. Enabling the Allow Partial Points switch will allow partial points to be given. See the section Partial Points lower down on this page. With this enabled, the grade is based on the % of test cases the code passes. Case insensitive tells Codio to make a case insensitive output comparison. By default, the comparison will be case sensitive. Ignore white space tells Codio to strip out any white space characters (carriage return, line feed, tab etc.) from both the expected output and the student output. It can be very helpful to enable this as it means you do not have to be over precise when specifying the fields or instructions. More information is provided below. Substring match tells Codio to perform a substring match when comparing the expected output to the student output. One attempt only allows the assessment to run only once. The student will be warned that they will not be able to resubmit. You would usually want to provide a run button or other means for the user to test the code before running the actual assessment. Show expected answer will show the students the expected output when they have submitted an answer for the question. To suppress this, flip the switch. Answer and rationale is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened in the course or when opening the students project. This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the Show Answer and Rationale to Student switch below the guidance field.","title":"Grading"},{"location":"courses/assessments/#generate-items","text":"This allows you to generate your code test items more easily. Click on Generate Item , set the command to your script file (including any pre-exec command if required) and then enter your inputs to generate the item to be checked by your code.","title":"Generate Items"},{"location":"courses/assessments/#metadata","text":"The Metadata section contains fields that further describe the current assessment using a variety of factors: Bloom's Level : The options for this field correspond to the general levels of Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment. Learning Objectives : What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \"SWBAT follow the flow of recursive execution\" . Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, Content and Programming Language , are required. To add your own tags, click Add Tag and populate their names and values in the empty input boxes at the bottom.","title":"Metadata"},{"location":"courses/assessments/#files","text":"Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included. To mark a file to be included with the assessment, simply locate it in the file tree under Project files and tick the checkbox next to its name. Ticked files will appear under Additional content .","title":"Files"},{"location":"courses/assessments/#cheating-opportunities","text":"If you show the expected output and allow multiple attempts, students may figure out that all they need to do is run the test, look at the expected output and then write the required output data. To avoid this, we recommend that you create one standard code assessment that shows expected inputs and outputs so the student can test. You award no points for this assessment. You then would create a second assessment that does not show expected output and allows only a single attempt. This way, the student will not know what input data is being passed in and does not have another opportunity to modify their code and re-run the assessment.","title":"Cheating opportunities"},{"location":"courses/assessments/#specifying-inputs-and-outputs","text":"The final step in configuring an assessment is to set up the inputs and outputs in the Grading section. There are some important details to understand. The first set of empty input/output fields is provided. You should choose between supplying your inputs as arguments or as stdin data. These are explained in more detail below. You should be aware of case sensitivity and whitespace characters as explained above. Generally speaking, using the 'ignore whitespace' setting is a good idea unless you do need to be exact in this respect. If you only have one input/output pair then the student could write code that simply outputs the expected output without writing any real logic. To protect against this you can create multiple input/output test cases that are run through sequentially. To add a new test case, press the Add item to check button which generates a new pair.","title":"Specifying inputs and outputs"},{"location":"courses/assessments/#inputs-using-arguments","text":"The easiest way of supplying input data is in the Input - Arguments field as shown in the previous image. The argument data can then be read by the student code.","title":"Inputs using arguments"},{"location":"courses/assessments/#inputs-using-stdin","text":"If you want to handle manual data input cases such as \"Enter your Name: \" then you would use the Input - Stdin field. This field allows you to supply the data that would normally be entered manually in the console. The following is important to avoid mistakes. The input data should have a new line if this would be expected in the actual program execution. In the output field, you need to be aware that the prompt text that is displayed to the user appears in stdout and so it should be reflected in your output field but without the data entered by the user. Normally, you would not put a new line in the output field between each input prompt as the new line character is generated by the user when pressing the enter key is not a part of the output. We recommend that you enable the Ignore white space and Substring match options to be more tolerant. The following image shows how to format input and output fields if you are not ignoring white space or doing a Substring match . Note how the input field only supplied the values to be input, not the prompt itself (which is actually a part of stdout ). It is important to accurately account for all spaces and carriage returns. The following image shows the more tolerant approach that has the Ignore whitespace option set. In this case, we have put everything on its own line for readability. The whitespace characters will be stripped out of both the expected output and the student output at runtime.","title":"Inputs using stdin"},{"location":"courses/assessments/#error-feedback","text":"To provide extended feedback about issues in the student's code, you can enable this option if you wish to show feedback to the student in the event the test fails. Please note to prevent memory exhaustion on infinite loops and huge outputs, there is a limit of 1Mb for the script output","title":"Error Feedback"},{"location":"courses/assessments/#advanced-code-tests","text":"Before you read about the advanced code test, please be sure to check the standard code tests as these require no coding at all, are very quick to set up and cover the majority of test cases you are likely to want to create. The advanced code test assessment type allows you to write code that checks code a student has written. You can write the code in any language you like provided it can be run from the command line. You should be aware that if students are able to access the command line, they are able to explore the box and find the folder where your test scripts are located. For scripting languages, this would allow them to modify the script. For compiled executables they could theoretically create their own executable and then replace yours with their own one. They would need to know how the callbacks work to succeed at this. If you want to make your scripts as secure as possible, please click here for information on secure scripts run when an assignment is marked as complete.","title":"Advanced code tests"},{"location":"courses/assessments/#sample-starter-pack_1","text":"There is a Starter Pack project that you can add to your account. Click here to install and Use Pack to create into your Codio account to review. This project contains examples for all types of auto-graded assessments as well as a Codio authoring cheat sheet.","title":"Sample Starter Pack"},{"location":"courses/assessments/#test-definition","text":"Setting up a Code Test within the Guide editor is very simple. The configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files.","title":"Test definition"},{"location":"courses/assessments/#general_1","text":"The screenshot below shows the basic configuration fields for the General section: Name is a short name that describes the test. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the Show Name switch next to the name field. Instructions is the actual text that should be shown to the user, written in Markdown.","title":"General"},{"location":"courses/assessments/#execution_1","text":"You can evaluate student code using a variety of languages and frameworks that are already supported. Files can be dragged into the command field where relevant from the file tree. You can also use a custom grading script. Supported languages and frameworks: Ruby : rubocop or rspec Java : JUnit or checkstyle Python : pycodestyle or UnitTest JavaScript : jshint or jslint","title":"Execution"},{"location":"courses/assessments/#using-junit","text":"When using JUnit you can add your own custom feedback to the standard feedback from Junit to return to the students. The feedback message can be passed to the assert method as the first parameter. assertEquals(feedback, expected, actual)","title":"Using JUnit"},{"location":"courses/assessments/#using-pycodestyle","text":"Before using the pycodestyle option, pycodestyle has to be installed. You may use the following commands to do so: sudo apt update sudo apt install python3-pip sudo python3 -m pip install pycodestyle To add individual Python source files whose style should be checked, either enter their relative path to ~/namespace or drag them from the Filetree into the Add Case input box, and click Add Case . You may add as many cases as needed. When the assessment executes, pycodestyle will inspect each added file and output all styling issues that it found.","title":"Using pycodestyle"},{"location":"courses/assessments/#using-unittest","text":"When using Python unit test and you want to implement a Python test and keep the test file ( .guides/secure ) separate from the student work (another directory) you can define the student folder where the students .py file is located where it is not located in the workspace folder","title":"Using UnitTest"},{"location":"courses/assessments/#using-jshint-or-jslint","text":"Before using them, jshint or jslint must be installed as a Node.js global package. You may use the following command to do so: sudo npm install -g jshint jslint To add individual JavaScript source files whose style should be checked, either enter their relative path to ~/namespace or drag them from the Filetree into the Add Case input box, and click Add Case . You may add as many cases as needed. You may also select either JSLint or JSHint in the Language Assessment Subtype dropdown. When the assessment executes, your choice of either jshint or jslint will inspect each added file and output all styling issues that it found.","title":"Using jshint or jslint"},{"location":"courses/assessments/#custom","text":"Command is the command to run to invoke your test. See the section Test code location below for more details. If you store the assessment scripts in the .guides/secure folder, they will run securely such that the student has no way of either viewing the script or viewing other files in that folder that might contain secure data. Enabling the Allow Partial Points switch will allow partial points to be given. See the section Partial Points lower down on this page. Timeout is the period of time (seconds) the test will run before terminating.","title":"Custom"},{"location":"courses/assessments/#grading_1","text":"Points is the score given to the student if the code test passes. You can choose any positive numeric value. One attempt only allows the assessment to be run only once. This generally not advised unless you make it clear to the student that a failed test cannot be repeated. You should also provide a Run button in the Guide (or provide other instructions) so the user can test the code before running the actual assessment. Answer and rationale is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened in the course or when opening the students project. This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the Show Answer and Rationale to Student switch below the guidance field.","title":"Grading"},{"location":"courses/assessments/#metadata_1","text":"The Metadata section contains fields that further describe the current assessment using a variety of factors: Bloom's Level : The options for this field correspond to the general levels of Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment. Learning Objectives : What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \"SWBAT follow the flow of recursive execution\" . Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, Content and Programming Language , are required. To add your own tags, click Add Tag and populate their names and values in the empty input boxes at the bottom.","title":"Metadata"},{"location":"courses/assessments/#files_1","text":"Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included. To mark a file to be included with the assessment, simply locate it in the file tree under Project files and tick the checkbox next to its name. Ticked files will appear under Additional content .","title":"Files"},{"location":"courses/assessments/#test-code-location","text":"You can place your test code anywhere you like, but if you store the assessment scripts in the .guides/secure folder, they will run securely such that the student has no way of either viewing the script or viewing other files in that folder that might contain secure data. Another suitable location could be to to create a .guides/tests folder. When specifying a command to run, you could specify it in either of these ways (the ~/workspace folder is assumed if you do not specify a full path). node .guides/tests/mytest.js node /home/codio/workspace/.guides/tests/mytest.js This example uses Node.js, but you can use any language you'd like.","title":"Test code location"},{"location":"courses/assessments/#test-framework","text":"Codio provides a simple framework for communicating with the Codio authored content. When defining a test, you specify the points that should be awarded for a successful answer.","title":"Test framework"},{"location":"courses/assessments/#success-or-failure","text":"To let Codio know whether the script executed correctly, your code should simply exit with 0. A Bash script would return with exit(0) , Node.js with process.exit(0) etc. To indicate that the script was unable to execute correctly, exit with a non-zero value.","title":"Success or Failure"},{"location":"courses/assessments/#partial-points","text":"Codio also provides a way for you to award a partial points rather than the all or nothing approach described above.","title":"Partial Points"},{"location":"courses/assessments/#example-bash-grading-script-for-partial-points","text":"If your test was written using a bash script, it would be done like this. POINTS=5 curl -s \"$CODIO_PARTIAL_POINTS_URL&points=${POINTS}\" > /dev/null","title":"Example Bash grading script for partial points"},{"location":"courses/assessments/#example-python-grading-script-for-partial-points","text":"A Python script might look like this. #!/usr/bin/env python import random import sys # import grade submit function sys.path.append('/usr/share/codio/assessments') from lib.grade import send_partial def main(): # Execute the test on the student's code grade = random.randint(10, 50) # Send the grade back to Codio with the penalty factor applied res = send_partial(int(round(grade))) exit( 0 if res else 1) main() The score you award should be any value between 0 and the maximum score you specified when defining the assessment in the Codio authoring editor.","title":"Example Python grading script for partial points"},{"location":"courses/assessments/#autograding-enhancements","text":"To provide instructors with more robust auto-grade scripts, you can also now Send back feedback in different formats HTML/Markdown/plainText To support this additional feedback, this URL (passed as an environment variable) can be used: CODIO_PARTIAL_POINTS_V2_URL These variables allow POST and GET requests with the following parameters: Points ( CODIO_PARTIAL_POINTS_V2_URL ): 0-100 points for assessment (should be scaled automatically for partial points). Feedback - text Format - html|md|txt - txt is default","title":"Autograding enhancements"},{"location":"courses/assessments/#example-python-grading-script-for-partial-points_1","text":"#!/usr/bin/env python import os import random import requests import json # import grade submit function import sys sys.path.append('/usr/share/codio/assessments') from lib.grade import send_partial_v2, FORMAT_V2_MD, FORMAT_V2_HTML, FORMAT_V2_TXT def main(): # Execute the test on the student's code grade = random.randint(10, 50) # Send the grade back to Codio with the penatly factor applied res = send_partial_v2(int(round(grade)), '<strong>I am here</strong>', FORMAT_V2_HTML) exit( 0 if res else 1) main()","title":"Example Python grading script for partial points"},{"location":"courses/assessments/#example-bash-grading-script-for-partial-points_1","text":"#!/bin/bash set -e POINTS=$(( ( RANDOM % 100 ) + 1 )) curl --retry 3 -s \"$CODIO_PARTIAL_POINTS_V2_URL\" -d points=$POINTS -d format=txt -d feedback=test","title":"Example Bash grading script for partial points"},{"location":"courses/assessments/#displaying-information-to-the-student","text":"You can return text to the user that is shown once the test has concluded. Your test output is captured from stderr and stdout , so for Node.js, for example, console.log('Well done!!') would work. For success, you might simply return 'Well done!' . For failure, aim to provide as much explanation to the student as possible regarding why they failed. You can return plain text, but if you want to format your response text, you can return HTML. To do so, make sure you enclose your HTML within <html> </html> tags.","title":"Displaying information to the student"},{"location":"courses/assessments/#dashboard-score","text":"If Allow Partial Points is disabled and your test returns 0, then Codio will give a dashboard score specified in the Points field; if it returns a non-zero value, then a score of 0 is assumed. If Allow Partial Points is enabled, then Codio will give a dashboard score based on the request it received at CODIO_PARTIAL_POINTS_URL . If no request was received, then a score of 0 is assumed.","title":"Dashboard score"},{"location":"courses/assessments/#inputs-and-outputs-to-student-code","text":"If your assessment requires that inputs are passed into the student code or data should be returned from the student code, then it is your responsibility to implement this. You should make it clear how the student should process your test's inputs and how to return data back to your test.","title":"Inputs and outputs to student code"},{"location":"courses/assessments/#multiple-choice","text":"Codio support both single and multiple response versions of MCQs.","title":"Multiple choice"},{"location":"courses/assessments/#assessment-definition","text":"The configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files.","title":"Assessment definition"},{"location":"courses/assessments/#general_2","text":"Name is a short name that describes the assessment. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the Show Name switch next to the name field. Question is the question instruction that is shown to the student.","title":"General"},{"location":"courses/assessments/#execution_2","text":"Shuffle Answers enabling this will randomise the order of the questions for the students The Multiple Response slider indicates whether the user can select more than one answer, in which case check boxes are used instead of radio buttons to specify correct answers. Answers is where you add as many individual answers as you require. To indicate the correct answer(s), toggle the sliders for multiple response or the radio button for single response. Ordering using the arrows you can change the order the answers are presented to students","title":"Execution"},{"location":"courses/assessments/#grading_2","text":"Show Expected Answer will show the students the correct answer when they have submitted an answer for this question. To suppress this, flip the switch. Correct Points is the score given to the student if the student makes the correct selection. You can choose any positive numeric value. '0' points can be set if you require this assessment to be ungraded. Enabling the Allow Partial Points switch will allow the student to get % of total points based on % of answers they get correct where Multiple Response is enabled. Incorrect Points is the score to be deducted if the student makes an incorrect selection. Typically, this value will be 0 but you can assign any positive numeric value if you wish to penalize guessing. If this assessment is to be ungraded, set '0' points Answer and rationale is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened in the course or when opening the students project. This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the Show Answer and Rationale to Student switch below the guidance field.","title":"Grading"},{"location":"courses/assessments/#metadata_2","text":"The Metadata section contains fields that further describe the current assessment using a variety of factors: Bloom's Level : The options for this field correspond to the general levels of Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment. Learning Objectives : What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \"SWBAT follow the flow of recursive execution\" . Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, Content and Programming Language , are required. To add your own tags, click Add Tag and populate their names and values in the empty input boxes at the bottom.","title":"Metadata"},{"location":"courses/assessments/#files_2","text":"Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included. To mark a file to be included with the assessment, simply locate it in the file tree under Project files and tick the checkbox next to its name. Ticked files will appear under Additional content .","title":"Files"},{"location":"courses/assessments/#one-attempt-only","text":"Codio allows users to make their selections and move on to other content pages or assessments without actually submitting their answer. However, once the answer has been submitted, it cannot be resubmitted. This gives teachers a far clearer understanding of which students are understanding the materials properly. There is little point to tests if the student simply changes the answers until the correct one appears.","title":"One attempt only"},{"location":"courses/assessments/#fill-in-the-blank","text":"A 'fill in the blank' question comes in two flavours. By enabling/disabling Show Possible Values (see below) you can use either Free Text or Drop Down","title":"Fill in the blank"},{"location":"courses/assessments/#free-text","text":"The example below shows a typical question where the student has to complete the missing words. This is then auto-marked by the Guide as explained below.","title":"Free Text"},{"location":"courses/assessments/#drop-down","text":"The example below shows a variation, where the student is given a list of possible answers and has to select the right answer from a drop down list of possible answers. This is then auto-graded as explained below. You can also add distractors (ie wrong answers) as well as using images for students to select from","title":"Drop Down"},{"location":"courses/assessments/#assessment-definition_1","text":"The configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files.","title":"Assessment definition"},{"location":"courses/assessments/#general_3","text":"Name is a short name that describes the assessment. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the Show Name switch next to the name field. Instruction contains any general instructions you want to provide to the student.","title":"General"},{"location":"courses/assessments/#execution_3","text":"Text is the Markdown that you write including the correct answer specification. Below is an example of how the question should be specified. A prime number (or a prime) is a <<<natural>>> number greater than <<<1>>> that has no positive divisors other than <<<1>>> and <<<itself>>>. For a free text question ( Show Possible Values slider to the left), Codio shows blank text fields. The student should then enter the correct text. Codio ensures that the response is case insensitive. For obvious reasons, the longer and more complex the correct answer, the easier it is for the student to make minor spelling errors that will then be scored as an incorrect answer. For a drop-down question ( Show Possible Values slider to the right) Codio will gather all correct values (anything within the <<< >>> chevrons) into a drop-down list, randomise the order and offer the same list in each of the answer positions. You can also add distractors (wrong answers) to the drop down by listing them in the text area below. One distractor per line","title":"Execution"},{"location":"courses/assessments/#regular-expression-support","text":"The fill in the blanks assessment also support repexp for enhanced options Some examples: Answer allows any characters - <<</./>>> Answer starts with word \"begin\" - <<</^begin/>>> Answer ends with word \"end\" - <<</end$/>>> Answer can contain many spaces in \"this is\" - <<</this\\s+is/>>> Answer contains 1 or 2 or 3 - <<</1 2 3/>>> Answer allows color or colour - <<</colou?r/>>> Answer allows yes or \"yes\" - <<<\"yes\", \"\"yes\"\">>> Answer allows hat or cat - <<</[hc]at/>>> Answer checks valid gmail address formatting - <<</(\\W ^)[\\w.\\-]{0,25}@(gmail)\\.com(\\W $)/>>> Answer checks date format (DD/MM/YYYY) - <<</^(?:(?:31(\\/ - \\.)(?:0?[13578] 1[02]))\\1 (?:(?:29 30)(\\/ - \\.)(?:0?[1,3-9] 1[0-2])\\2))(?:(?:1[6-9] [2-9]\\d)?\\d{2})$ ^(?:29(\\/ - \\.)0?2\\3(?:(?:(?:1[6-9] [2-9]\\d)?(?:0[48] [2468][048] [13579][26]) (?:(?:16 [2468][048] [3579][26])00))))$ ^(?:0?[1-9] 1\\d 2[0-8])(\\/ - \\.)(?:(?:0?[1-9]) (?:1[0-2]))\\4(?:(?:1[6-9] [2-9]\\d)?\\d{2})$/>>> Answer allows i==0 or i == 0 - <<</i ?== ?0/>>> Answer requires digit - <<</^[\\d]+$/>>> Answer requires non-digit - <<</^[\\D]+$/>>> Answer requires word character - <<</^[\\w]+$/>>> Answer requires non-word character - <<</^[\\W]+$/>>> Answer required between 1 to 100 - <<</^([1-9][0-9]? 100)$/>>> Answer allows several answers (Place1 or Place2) - <<<\"Place1\", \"Place2\">>> Answer allows several answers with/without \" \" (Place1 or \"Place1\" or Place2 or \"Place2\") - <<</^(Place1 Place2 \"Place1\" \"Place2\")$/>>>","title":"Regular Expression support"},{"location":"courses/assessments/#grading_3","text":"Points is the score given to the student if the student answers all parts of the assessment correctly. You can choose any positive numeric value. '0' points can be set if you require this assessment to be ungraded. Enabling the Allow Partial Points switch will allow the student to get % of total points based on % of blanks they get correct. The Show Possible Values switch determines whether the question is text based (the slider is gray and in the left position) or drop-down based (the slider is blue and in the right position). Show Expected Answer will show the students the correct answer when they have submitted an answer for this question. To suppress this, flip the switch. Answer and rationale is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened in the course or when opening the students project. This guidance information can also be shown to students after they have submitted their answer and also if they reload the unit after marking it as completed. To enable this, flip the Show Answer and Rationale to Student switch below the guidance field.","title":"Grading"},{"location":"courses/assessments/#metadata_3","text":"The Metadata section contains fields that further describe the current assessment using a variety of factors: Bloom's Level : The options for this field correspond to the general levels of Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment. Learning Objectives : What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \"SWBAT follow the flow of recursive execution\" . Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, Content and Programming Language , are required. To add your own tags, click Add Tag and populate their names and values in the empty input boxes at the bottom.","title":"Metadata"},{"location":"courses/assessments/#files_3","text":"Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included. To mark a file to be included with the assessment, simply locate it in the file tree under Project files and tick the checkbox next to its name. Ticked files will appear under Additional content .","title":"Files"},{"location":"courses/assessments/#free-text_1","text":"Free text assessments allow students to answer questions in their own words. Teachers are then able to review and manually grade their answers.","title":"Free text"},{"location":"courses/assessments/#assessment-definition_2","text":"Setting up a free text assessment is very simple. The configuration fields for a free text assessment are split into four sections: General, Grading, Metadata, and Files.","title":"Assessment definition"},{"location":"courses/assessments/#general_4","text":"Name is a short name that describes the assessment. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the Show Name switch next to the name field. Instructions is the actual text that should be shown to the user, written in Markdown.","title":"General"},{"location":"courses/assessments/#grading_4","text":"The Points field is the number of points allocated for the question. You can choose any positive numeric value. '0' points can be set if you require this assessment to be ungraded. Enabling the Allow Partial Points switch will allow the teacher when grading the answer to select the points to give for the students answer. Preview Type specified the expected input by the student. Codio offers plaintext and markdown options. LaTeX is also supported. Please refer to the Preview type section below for details. One Attempt Only can be used to restrict the student to answering the question once. If not enabled, students will be able to edit their answer until the assignment is marked as Completed. Answer and rationale is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened in the course or when opening the students project. This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the Show Answer and Rationale to Student switch below the guidance field.","title":"Grading"},{"location":"courses/assessments/#metadata_4","text":"The Metadata section contains fields that further describe the current assessment using a variety of factors: Bloom's Level : The options for this field correspond to the general levels of Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment. Learning Objectives : What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \"SWBAT follow the flow of recursive execution\" . Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, Content and Programming Language , are required. To add your own tags, click Add Tag and populate their names and values in the empty input boxes at the bottom.","title":"Metadata"},{"location":"courses/assessments/#files_4","text":"Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included. To mark a file to be included with the assessment, simply locate it in the file tree under Project files and tick the checkbox next to its name. Ticked files will appear under Additional content .","title":"Files"},{"location":"courses/assessments/#preview-type","text":"The following preview options are available. They dictate the expected input format and whether a fully rendered preview pane appears below the student input. Markdown is useful if the student wants to enter text formatting commands. Here is a reference for Markdown: Daring Fireball - the author of Markdown LaTeX is useful where you want students to enter mathematical formulae in their answers. Click here for information on LaTeX. Plaintext - the student is expected to enter ordinary text, without support for markdown formatting. There is no preview window. Plaintext + LaTeX - this expects plaintext to be entered, therefore no support for markdown with additional support for LaTeX commands. A preview pane is shown beneath so the student is able to see the rendered LaTeX output. Markdown + LaTeX - this supports markdown input with LaTeX support. A preview pane is shown beneath so the student is able to see the rendered markdown and LaTeX output.","title":"Preview type"},{"location":"courses/assessments/#completing-a-free-text-assessment","text":"If One Attempt Only is enabled, students will only be able to submit their answer once. If this is not enabled them students will be able to revisit the question and edit their answer until they mark the assignment as completed","title":"Completing a free text assessment"},{"location":"courses/assessments/#grading-free-text-assessments","text":"To review and grade answers given by student, select assignment, then the student and a list of all the assessments in the assignment are shown. Free text assessments are identifiable from the icon Click one line and you will then see the question asked of the student and the answer they submitted. If the question was not set to Allow Partial Points , the teacher can select Correct or Incorrect If the question was set to use Allow Partial Points the teacher can select the points to give to the answer up to the maximum Points . Comments can also be added and will be shown to the student when grades are released. The comment field supports LATex and markdown with a preview area below the text area to allow the grader review the input. The comment field will autoexpand as required","title":"Grading free text assessments"},{"location":"courses/assessments/#navigating-students-assessments","text":"Using the < and > buttons at the top of the assessments grading dialog you can quickly navigate either to the same assessment for other students or to other assessments for the select student","title":"Navigating students assessments"},{"location":"courses/assessments/#viewing-graded-free-text-assessments","text":"For any free text assessments that have been graded by a teacher in an assignment, you will see the points given and the field in the Correct column checked.","title":"Viewing graded free text assessments"},{"location":"courses/assessments/#autograde-free-text","text":"The Autograde Free text assessment is similar to the free text assessment but includes a field for a command line to execute a script allowing autograding. The answer will be stored in the environment variable CODIO_FREE_TEXT_ANSWER .","title":"Autograde Free text"},{"location":"courses/assessments/#assessment-definition_3","text":"Setting up an assessment is very simple. The configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files.","title":"Assessment definition"},{"location":"courses/assessments/#general_5","text":"Name is a short name that describes the assessment. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the Show Name switch next to the name field. Instructions is the actual text that should be shown to the user, written in Markdown.","title":"General"},{"location":"courses/assessments/#execution_4","text":"Command is the command to execute a script to autograde. If you store the assessment scripts in the .guides/secure folder, they will run securely such that the student has no way of either viewing the script or viewing other files in that folder that might contain secure data. Timeout is the time to abort the script from executing in the event of a problem.","title":"Execution"},{"location":"courses/assessments/#grading_5","text":"The Points field is the number of points allocated for the question. You can choose any positive numeric value. '0' points can be set if you require this assessment to be ungraded. Enabling the Allow Partial Points switch will allow the teacher when grading the answer to select the points to give for the students answer. Preview Type specified the expected input by the student. Codio offers plaintext and markdown options. Latex is also supported. Please refer to the Preview type section below for details. One Attempt Only can be used to restrict the student to answering the question once. If not enabled, students will be able to edit their answer until the assignment is marked as Completed. Answer and rationale is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened in the course or when opening the students project. This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the Show Answer and Rationale to Student switch below the guidance field.","title":"Grading"},{"location":"courses/assessments/#metadata_5","text":"The Metadata section contains fields that further describe the current assessment using a variety of factors: Bloom's Level : The options for this field correspond to the general levels of Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment. Learning Objectives : What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \"SWBAT follow the flow of recursive execution\" . Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, Content and Programming Language , are required. To add your own tags, click Add Tag and populate their names and values in the empty input boxes at the bottom.","title":"Metadata"},{"location":"courses/assessments/#files_5","text":"Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included. To mark a file to be included with the assessment, simply locate it in the file tree under Project files and tick the checkbox next to its name. Ticked files will appear under Additional content .","title":"Files"},{"location":"courses/assessments/#student-feedback","text":"If your autograde script is to return feedback to your students as they submit the assessment, enable Release Grades Automatically .","title":"Student Feedback"},{"location":"courses/assessments/#preview-type_1","text":"The following preview options are available. They dictate the expected input format and whether a fully rendered preview pane appears below the student input. Markdown is useful if the student wants to enter text formatting commands. Here is a reference for Markdown: Daring Fireball - the author of Markdown LaTeX is useful where you want students to enter mathematical formulae in their answers. Click here for information on LaTeX. Plaintext - the student is expected to enter ordinary text, without support for markdown formatting. There is no preview window. Plaintext + LaTeX - this expects plaintext to be entered, therefore no support for markdown with additional support for LaTeX commands. A preview pane is shown beneath so the student is able to see the rendered LaTeX output. Markdown + LaTeX - this supports markdown input with LaTeX support. A preview pane is shown beneath so the student is able to see the rendered markdown and LaTeX output.","title":"Preview type"},{"location":"courses/assessments/#completing-an-autograde-free-text-assessment","text":"If One Attempt Only is enabled, students will only be able to submit their answer once. If this is not enabled them students will be able to revisit the question and edit their answer until they mark the assignment as completed","title":"Completing an autograde free text assessment"},{"location":"courses/assessments/#examples","text":"","title":"Examples"},{"location":"courses/assessments/#a-simple-bash-script-example-for-partial-points","text":"#!/usr/bin/env bash POINTS=0 if [ \"${CODIO_FREE_TEXT_ANSWER}\" == \"answer1\" ] then POINTS=1 fi if [ \"${CODIO_FREE_TEXT_ANSWER}\" == \"answer5\" ] then POINTS=5 fi if [ \"${CODIO_FREE_TEXT_ANSWER}\" == \"answer10\" ] then POINTS=10 fi curl \"$CODIO_PARTIAL_POINTS_URL&points=${POINTS}\" > /dev/null","title":"A simple Bash script example for partial points"},{"location":"courses/assessments/#a-python-example-for-partial-points","text":"#!/usr/bin/env python import os, requests, sys import random # get free text auto value text = os.environ['CODIO_FREE_TEXT_ANSWER'] # import grade submit function sys.path.append('/usr/share/codio/assessments') from lib.grade import send_partial def main(): # Execute the test on the student's code grade = 0 feedback = '' if text == '1': grade = 1 feedback = '1 point' elif text == '5': grade = 5 feedback = '5 points' elif text == '10': grade = 10 feedback = '10 points' else: grade = 0 feedback = 'no points' print(feedback) # Send the grade back to Codio with the penatly factor applied res = send_partial(int(round(grade))) exit( 0 if res else 1) main()","title":"A Python example for partial points"},{"location":"courses/assessments/#autograding-enhancements_1","text":"To provide instructors with more robust auto-grade scripts, you can also now Send back feedback in different formats HTML/Markdown/plainText To support this additional feedback, this URL (passed as an environment variable) can be used: CODIO_PARTIAL_POINTS_V2_URL These variables allow POST and GET requests with the following parameters: Points ( CODIO_PARTIAL_POINTS_V2_URL ): 0-100 points for assessment (should be scaled automatically for partial points). Feedback - text Format - html|md|txt - txt is default","title":"Autograding enhancements"},{"location":"courses/assessments/#example-bash-grading-script-for-partial-points_2","text":"#!/usr/bin/env bash POINTS=0 if [ \"${CODIO_FREE_TEXT_ANSWER}\" == \"answer1\" ] then POINTS=1 fi if [ \"${CODIO_FREE_TEXT_ANSWER}\" == \"answer5\" ] then POINTS=5 fi if [ \"${CODIO_FREE_TEXT_ANSWER}\" == \"answer10\" ] then POINTS=10 fi curl --retry 3 -s \"$CODIO_PARTIAL_POINTS_V2_URL\" -d points=$POINTS -d format=md -d feedback='### <strong>HTML text</strong>'","title":"Example Bash grading script for partial points"},{"location":"courses/assessments/#example-python-grading-script-for-partial-points_2","text":"#!/usr/bin/env python import os, requests, sys import random # get free text auto value text = os.environ['CODIO_FREE_TEXT_ANSWER'] # import grade submit function sys.path.append('/usr/share/codio/assessments') from lib.grade import send_partial_v2, FORMAT_V2_MD, FORMAT_V2_HTML, FORMAT_V2_TXT def main(): # Execute the test on the student's code grade = 0 feedback = '' if text == '1': grade = 1 feedback = '## 1 point' elif text == '5': grade = 5 feedback = '## 5 points' elif text == '10': grade = 10 feedback = '## 10 points' else: grade = 0 feedback = '## no points' # Send the grade back to Codio with the penatly factor applied res = send_partial_v2(int(round(grade)), feedback, FORMAT_V2_MD) exit( 0 if res else 1) main()","title":"Example Python grading script for partial points"},{"location":"courses/assessments/#example-instructions","text":"It is recommended that clear instructions are given to students on any specific items that are expected to be included in their answer. The following is an example: Create a table `users` with the fields: - id - primary key - name - text - email - text - years - integer - name and email should be required - years - optional, but if present - should be more or equal to 0","title":"Example Instructions"},{"location":"courses/assessments/#expected-solution","text":"CREATE TABLE users( id int PRIMARY KEY, name text NOT NULL, email text NOT NULL, years int CHECK(years > 0) );","title":"Expected Solution"},{"location":"courses/assessments/#math-assessments","text":"Codio allows you to set and grade math questions for any type and level of mathematics using the Free Text assessment. We only offer manual grading of mathematical expressions or proofs.","title":"Math assessments"},{"location":"courses/assessments/#manually-graded-assessments-using-free-text","text":"To create a manually graded math question, you can use the Free text assessment type. This allows the students to enter expressions or even full proofs and worked answers using Latex. For more information about Latex, please click here . You can enter Latex in the Question and Answer rationale fields. You should also set the Preview type drop down to either Plaintext + Latex or Markdown + Latex . Both of these ensure that the student sees a preview pane beneath their answer entry fully rendered in markdown and/or Latex. Please click here to review the free text assessment.","title":"Manually graded assessments using free text"},{"location":"courses/assessments/#multiple-choice_1","text":"You can also use the multiple choice assessment type to create answers containing properly rendered Latex expressions.","title":"Multiple choice"},{"location":"courses/assessments/#grade-book-assessments","text":"A Grade book assessment is for manually graded assessments. A student does not need to answer it, and it is available for grading immediately Comments and points given will be visible to the student when the assessment is graded and the grades are released and rubric items can also be set where partial points allowed. See below","title":"Grade Book assessments"},{"location":"courses/assessments/#test-definition_1","text":"The configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files.","title":"Test definition"},{"location":"courses/assessments/#general_6","text":"Name is a short name that describes the test. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely what the assessment is. In many cases, you do not want to see this text appear to the student. To suppress this text, flip the Show Name switch next to the name field.","title":"General"},{"location":"courses/assessments/#execution_5","text":"Collapsed on start allows the assessment field to be collapsed when the page opens.","title":"Execution"},{"location":"courses/assessments/#grading_6","text":"Points is the score given to the student. You can choose any positive numeric value. Enabling the Allow Partial Points switch will allow partial points to be given. When Allow Partial Points is enabled, grading rubric items can be added to the assessment where points and messages can be defined. These will be visible to students when the assessment is graded and the grades are released and when teachers are grading, they can select the relevant rubric item.","title":"Grading"},{"location":"courses/assessments/#metadata_6","text":"The Metadata section contains fields that further describe the current assessment using a variety of factors: Bloom's Level : The options for this field correspond to the general levels of Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment. Learning Objectives : What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \"SWBAT follow the flow of recursive execution\" . Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, Content and Programming Language , are required. To add your own tags, click Add Tag and populate their names and values in the empty input boxes at the bottom.","title":"Metadata"},{"location":"courses/assessments/#files_6","text":"Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included. To mark a file to be included with the assessment, simply locate it in the file tree under Project files and tick the checkbox next to its name. Ticked files will appear under Additional content .","title":"Files"},{"location":"courses/assessments/#parsons-puzzle-assessments","text":"","title":"Parsons Puzzle assessments"},{"location":"courses/assessments/#what-are-parsons-puzzles","text":"Parson\u2019s Problems are available on Codio as Parsons Puzzles. Parson\u2019s Problems are great formative assessments that ask students to arrange blocks of scrambled code, allowing them to focus on the purpose and flow of the code (often including a new pattern or feature) while not worrying about syntax. Codio uses a client-side implementation of Parson's Problems named js-parsons , whose official documentation is available here .","title":"What are Parsons Puzzles?"},{"location":"courses/assessments/#assessment-definition_4","text":"The configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata and Files.","title":"Assessment definition"},{"location":"courses/assessments/#general_7","text":"Name is a short name that describes the assessment. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the Show Name switch next to the name field. Instructions is the actual text that should be shown to the user. It can be written in Markdown or HTML.","title":"General"},{"location":"courses/assessments/#execution_6","text":"Code to become blocks is where you create the initial state of the puzzle for the students. Code to become distractor blocks is where you can distractors for the puzzle Max Distractors is where you can set the maximum number of distractors Grader is where you select the grader appropriate to the puzzle. Refer to the \"Grader Description\" section below for more details. Require Dragging is where you can enable dragging Disable indentation is where you can disable indentation if not required for your puzzle Indent size(px) is where you can set the pixel size of indentations","title":"Execution"},{"location":"courses/assessments/#grading_7","text":"The Points field is the number of points allocated for the question. You can choose any positive numeric value. '0' points can be set if you require this assessment to be ungraded. One Attempt Only can be used to restrict the student to answering the question once. If not enabled, students will be able to edit their answer until the assignment is marked as Completed. Answer and rationale is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened in the course or when opening the students project. This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the Show Answer and Rationale to Student switch below the guidance field.","title":"Grading"},{"location":"courses/assessments/#metadata_7","text":"The Metadata section contains fields that further describe the current assessment using a variety of factors: Bloom's Level : The options for this field correspond to the general levels of Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment. Learning Objectives : What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \"SWBAT follow the flow of recursive execution\" . Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, Content and Programming Language , are required. To add your own tags, click Add Tag and populate their names and values in the empty input boxes at the bottom.","title":"Metadata"},{"location":"courses/assessments/#files_7","text":"Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included. To mark a file to be included with the assessment, simply locate it in the file tree under Project files and tick the checkbox next to its name. Ticked files will appear under Additional content .","title":"Files"},{"location":"courses/assessments/#grader-description","text":"","title":"Grader Description"},{"location":"courses/assessments/#variablecheckgrader","text":"VariableCheckGrader is a grader that executes the code in the order submitted by the student and checks variable values afterwards. Expected and supported options: - vartests (required): array of variable test objects Each variable test object can/must have the following properties: - initcode : code that will be prepended before the learner solution code - code : code that will be appended after the learner solution code - message (required): a textual description of the test, shown to learner Properties specifying what is tested: - variables : an object with properties for each variable name to be tested; the value of the property is the expected value or - variable : a variable name to be tested - expected : expected value of the variable after code execution","title":"VariableCheckGrader"},{"location":"courses/assessments/#turtlegrader","text":"TurtleGrader is a grader for exercises that draw turtle graphics in Python. Required options: turtleModelCode : The code constructing the model drawing. The turtle is initialized to modelTurtle variable, so your code should use that variable. Options that can be specified (that is, optional): turtlePenDown : a boolean specifying whether or not the pen should be put down initially for the student constructed code turtleModelCanvas : ID of the canvas DOM element where the model solution will be drawn. Defaults to modelCanvas . turtleStudentCanvas : ID of the canvas DOM element where student turtle will draw. Defaults to studentCanvas . Grading is based on comparing the commands executed by the model and student turtle. If the executable_code option is also specified, the code on each line of that option will be executed instead of the code in the student constructed lines. Note that the student code should use the variable myTurtle for commands to control the turtle in order for the grading to work.","title":"TurtleGrader"},{"location":"courses/assessments/#unittestgrader","text":"UnitTestGrader is a grader that executes student code and Skulpt unit tests","title":"UnitTestGrader"},{"location":"courses/assessments/#languagetranslationgrader","text":"Code \"Translating\" grader","title":"LanguageTranslationGrader"},{"location":"courses/assessments/#linebasedgrader","text":"LineBasedGrader is a grader that treats student answers as correct if and only if they match the order and indentation found in Initial Values . For incorrect answers, it highlights the lines that were not ordered or indented properly. For more information including video overviews, check out Graphical Parson's Problem Creator","title":"LineBasedGrader"},{"location":"courses/assessments/#sample-starter-pack_2","text":"There is a Starter Pack project that you can add to your account that includes examples of Parson's Puzzle assessments. For Codio.com users: Click here to install For Codio.co.uk users: Click here to install and Use Pack to create into your Codio account to review.","title":"Sample Starter Pack"},{"location":"courses/assessments/#sense-network","text":"Sense.Education is an AI-Based code analysis package to give students feedback on their code submissions and is supported in Codio in the Sense.Network assessment type. Students can submit their work and will be able to view feedback from Sense and if One Attempt Only is not enabled can review their code and submit again. To help and track students activity through sense, custom script can be enabled. This assessment type is only visible when the sense.network api key is entered in the Organisation>Integrations area. See organisation admin roles for more on this.","title":"Sense Network"},{"location":"courses/assessments/#assessment-definition_5","text":"The configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files.","title":"Assessment definition"},{"location":"courses/assessments/#general_8","text":"Name (required) is a short name that describes the assessment. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the Show Name switch next to the name field. Instructions (optional) is the text that should be shown to the user, written in Markdown.","title":"General"},{"location":"courses/assessments/#execution_7","text":"Pre-exec command (optional) is where a check can be run to confirm any code is compiling as required. If you store the scripts in the .guides/secure folder, they will run securely such that the student has no way of either viewing the script or viewing other files in that folder that might contain secure data. Pre-exec feedback (optional) field is used to show feedback if Pre-exec command fails, otherwise will show pre-exec output. Sense feedback Url (required) to extract assignment id Filename (optional) is the path to the file to pass. If empty, will send the currently opened file","title":"Execution"},{"location":"courses/assessments/#grading_8","text":"Gradable enable if the assignment is to be used within the grade total for the assignment. If this is not enabled students can be given feedback on their submission for this assessment without it being graded. Please note Answer and Rationale will not return anything to the student if the assignment is not gradable. When enabled, each submission will override any previous submissions for grading purposes. One Attempt Only can be used to restrict the student to answering the question once. If not enabled, students will be able to edit their answer until the assignment is marked as Completed. The Points field is the number of points allocated for the question. You can choose any positive numeric value. '0' points can be set if you require this assessment to be ungraded. Answer and Rationale is where guidance for the assessment can be entered where the assessment is Gradeable . This is not required if the assignment is not gradeable. This will be visible to the teacher when the project is opened by the teacher This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the Show Answer and Rationale to Student switch below the guidance field.","title":"Grading"},{"location":"courses/assessments/#metadata_8","text":"The Metadata section contains fields that further describe the current assessment using a variety of factors: Bloom's Level : The options for this field correspond to the general levels of Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment. Learning Objectives : What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \"SWBAT follow the flow of recursive execution\" . Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, Content and Programming Language , are required. To add your own tags, click Add Tag and populate their names and values in the empty input boxes at the bottom.","title":"Metadata"},{"location":"courses/assessments/#files_8","text":"Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included. To mark a file to be included with the assessment, simply locate it in the file tree under Project files and tick the checkbox next to its name. Ticked files will appear under Additional content .","title":"Files"},{"location":"courses/authoring/","text":"Introduction \uf0c1 Codio Guides is a powerful authoring tool creating rich tutorial and instructional content as well as assessments. Here are a few of the key features. Each page of content can control the layout of the IDE Open and close files, terminal windows and html page previews Launch commands from the content page and pipe terminal output into the content page Create manually and automatically graded questions and assessments Manage a table of contents Teachers/Instructors can obtain PDF export of the guides content to distribute to students as required Where is it? \uf0c1 You can launch the content authoring from The menu, Tools->Guide->Edit The button at the top of the file tree as shown below Project, course assignment or book? \uf0c1 Before you start to author content you should be aware of the three different places you can create content using guides. Let's look at each of the three ways to create content and why you might choose each one. Projects \uf0c1 A project is simply a standalone Codio box. It may or may not have guides content. Projects are to be found in the Projects page on the main Codio dashboard. You would want to choose a project as the place to create your content if you have individual, ad hoc assignments or examples that do not constitute more extensive coursework or are not part of a larger series of associated projects. A project can be assigned to a course at any time. All the students in that course will then be able to access that project and its content. There are drawbacks to using projects to assign to students. If you have related projects and the number of projects grows, it can be hard to quickly find a project you want to assign to a course. There is also no way to arrange your projects into chronological order. Courses and books offer excellent solutions to this organizational problem. Assignments \uf0c1 An assignment is essentially the same as a project. The only difference is that your project assignments are located in the courses area in the main Codio dashboard and accessible to other teachers who can edit the item and to students in the course. Assignments are very easy to locate as they are tidily organized within the course module they belong to. You can also arrange your assignments within a course module. You would typically use an assignment if either of the following apply. You have a logically related series of projects that you want to assign to a student that form a course module. You have a collection of assessments relate to a course that are used for homework, lab assessments, projects etc. A course allows you to subdivide your course into modules and then chronologically arrange your assignments within your modules. When you create a course, you have to create at least one module. A module does nothing special other than contain assignments and are simply a nice way to group your assignments. There is one minor drawback to project based assignments that you should be aware of. If students are working with a project assignment and want to look at tutorial content that is contained in another assignment, they have to switch assignments. This can take several seconds and can be irritating during a revision phase when they want to frequently switch assignments. For this reason, we created the book, which we will look at next. Book assignments \uf0c1 A book is intended to replicate a hard-copy book. It contains a lot of content, often an entire course of content. Let's look at the case of a course called Introduction to Java . If this was a regular book, it might contain 500 pages. If you used project assignments to create this content, you might end up with a very large number of assignments, say 50. As we mentioned above, when students are revising and want to randomly move between different assignments to review content, the can get frustrated by the time it takes to switch assignments. A book addresses this issue by offering sophisticated table to contents management with nested chapters and sections. As a result, you can put all of your content into a single book, with a single box running in the background. However, faculty will still often want to teach a course based on a book. To do this, you use a course but rather than creating a project assignment, you create a book based assignment. This allows you to point to any parts of a book for that assignment. Book or project assignment? \uf0c1 It can still be a little confusing whether you should use a book based assignment or a project assignment, so here are some typical use cases. Project assignments - use when you have a collection of assessments with no or minimal tutorial content. Best used for homework or lab type assessments. If a student is not going to regularly switch assignments in a single session. Book assignments - use for tutorial content, examples and non-critical assessments. Note that you can mix both book and project assignments in a course. Author and student views \uf0c1 The experience when authoring differs from that of a student. Students are not able to view the authoring tools. When they start a assignment or project, if there is content present, it will automatically be shown. The author can also specify whether the student is able to close the content or not. If you are an author, you will often want to view the content as a student will see it. Editing \uf0c1 Only an author is able to edit the content. Students and users with read-only rights will not be able to. Click here for details on page editing. Preview \uf0c1 You can press the preview button in the top right area of the edit pane. This will switch to preview mode. You can then switch back to editor mode by pressing the Editor button. You can also start the preview mode from the Tools->Guide->Play . Finally, there is also a button at the top of the file tree that launches the content. Customizing IDE menu \uf0c1 To simplify the educational process for students, the top menu can be customized to remove options from students that they cannot override. Please note that only students will see this. Teachers previewing the assignment will not see the customization. If you wish to check this, the test student accounts can be used Through a .codio-menu file, a teacher can specify what menu items should be hidden. Example: { \"Logo\": false, // hides the Codio logo \"Codio\": false, // hides the Codio menu dropdown \"Project\": { \"Permissions\": false // hides the Permissions option in the Project menu dropdown }, \"Help\": false, // hides the Help menu dropdown \"Run\": false, // hides the Run menu dropdown \"Preview\": false, // hides the Preview menu dropdown \"Debugger\": false, // hides the Debugger menu dropdown \"Status\": false // hides the Status icon, user Avatar, user name and exit button } Be aware that if setting Status=false, students will need to use the 'Back to Dashboard' button shown on the last page of the guides to return to their dashboard area Setting up .codio-menu file: Menu items that the student will see: Students will not see the .codio-menu file to be able to edit/change it. Player Options \uf0c1 When the content is rendered to a student, various options can be controlled The Collapse table of contents button allows the user to collapse the content pane to provide larger working area if required. This option will not show if the page layout is One Pane Navigation Buttons allows the user to navigate forward/backward in the guide. Settings allows the user to view the assignment as a teacher (e.g. show solution information hidden to students) change the Theme (light/dyslexic), Mark as Complete, change the font size, reset both the theme and fonts, to restore the current files (see below) and to access Code Comments. See Dyslexia Support section Show/Hide Section List Hamburger Icon allows the user to show/hide the section list. Grading button is visible for teachers to allow access to grading area. Students do not see this Restore current files \uf0c1 The Restore Current Files feature is a great way to reset/restore any files on that page to its initial state after hacking sample code around. Files can be restored from the menu as shown below. Table of contents management \uf0c1 Once you are in the Codio IDE, you are able to create and manage content. There are two ways to access the Codio Guide. Press then right arrow at the top of the file tree. From the menu, select Tools->Guide->Edit . Editing page content and actions \uf0c1 Please refer to the following pages for details in how to edit page content and control page actions. Page Editing for details on how to edit a pages content using markdown or HTML, hiding folders and other actions. Settings and page actions : Opening and closing files, panel configuration and other settings Editing content \uf0c1 The image below highlights the main components of the editing page. Accessing the table of contents \uf0c1 To open and close the table of contents, press the Hamburger Icon at the top right. From here you can add and organize content. Chapters, sections and pages \uf0c1 A guide is comprised of pages organized into chapters and sections. A chapter is a top level item only. Sections can be placed at any location and nested to any depth. You can add a new chapter, section or page by right clicking on the appropriate location within the table of contents. by first selecting the item in the table of contents below which the new element should be added and then pressing one of the buttons at the top of the table of contents. Adding content to a chapter or section \uf0c1 By default, chapters and sections are passive and do not have page content assigned to them. However, you can add content by right-clicking the item and then selecting Add content from the menu. If you want to reverse the procedure, you right click and select Remove content . Multiple selection \uf0c1 You can multi-select pages as follows Select an item then shift+click on a latter item to select all pages between the two items. This only works for items at the same level. Use ctrl+click (PC/Linux) or cmd+click (Mac) to multi select individual pages. Drag and Drop \uf0c1 It is very important to understand how drag and drop works within a table of contents as it is very powerful but can be confusing if you don\u2019t understand that drop process. Drag and drop works with individual or multiple selected pages. What is unusual about our drag and drop support is that the destination folder location is determined by where you drop. If you drop in the top portion of the target item, the selection will be dropped above it at the same level. If you drop in middle portion of the target item, the selection will be dropped within it if the target is a section. If you drop in the lower portion of the target item, the selection will be dropped below the target at the same level. Page editing overview \uf0c1 To create new content or to edit existing content, go to the Tools->Guide->Edit menu option. Use the layout modes to switch between editor, preview, and split view modes. When in preview mode, you can quickly switch back to editor mode by selecting the Editor button: Video: Editing Existing Guides Content Anatomy of the content editor \uf0c1 Below is a screenshot of the editor with the main components highlighted. Editor settings \uf0c1 Editor settings gives you access to the key functions: Page \uf0c1 Layout allows you to specify the panel layout you want to choose for this section, Show Folders allows you to define specific folders in your project that you wish to be visible when the current section is displayed, Close Tabs allows you to close all tabs open from previous section, Close Terminal Session when Close tabs enabled, allows you the option to retain terminal session from previous section. By default, terminal session will close Set Section as Chapter allows you to set the section as a chapter in your content, Teacher Only allows you to show content that only teachers are able to see. Content Type allows you to write your content in either Markdown or HTML Open Tabs \uf0c1 This allows you to specify: which files you want to automatically open when the current section is displayed, Preview (including external websites), Open a Terminal window (including running a terminal command), which lines (if any) you wish to highlight within each file. Assessments \uf0c1 This allows you to set up assessments. Media \uf0c1 This allows you to play audio files within your project. Global \uf0c1 Scripts allows you to point to one or more .js files in your project (usually you would have this somewhere within the .guides folder) that is run when the page is shown. This is especially useful when interacting with a button in a page of content. Theme allows you to select the default theme for people viewing the content. We currently have a light theme and will be adding a dark theme shortly. Dyslexic users can also choose a special theme from the Settings drop down in the content player. Lexicon Topic if you use this option, an icon will appear in the toolbar that will load the Lexikon window with the selected topic automatically selected. Students can still access the Lexicon from the Tools>Lexicon menu (unless of course you are restricting the top menu available to them) Suppress page numbering allows you to suppress the section page numbers when in Play Mode. Hide Menu allows you to hide the main Codio menu items in the IDE (Codio/Project/File/Edit etc) when the assignment is run in a course . Allow guide to be closed allows students to be able to close the content. It can be restarted by selecting the Start icon in the file tree: Use submit buttons see Student submission options for more information Use mark as completed see Student submission options for more information Collapsed on start starts the assignment with the guides pane collapsed. Students can show the content clicking on the hamburger icon on the right Hide Section List hides the sections list in your content for the students. Hide Back to Dashboard button hides this button that would otherwise show on the last page of the guides. Protect Layout prevents students from closing files in tabs. Authoring guidelines \uf0c1 Here are some guidelines for creating good quality content. Markdown \uf0c1 The best way to author content is using markdown. It is extremely easy to write content that renders very nicely and without having to fiddle with HTML. You can embed HTML snippets into a markdown as well where you need full control. We have a Cheat Sheet project that you can use to see the full capabilities. To copy this starter pack into your own account, please click here . You should select the Use Pack option to create the project. Courses and Books \uf0c1 We strongly recommend that when you are creating content at scale then you have a thorough understanding of the differences between projects, course assignments and books before starting. Media assets \uf0c1 When creating a book or a guide, you will often be working with images, video and other media. We recommend the following. Images should be placed in the .guides/img folder. You can create sub-folders for organizational purposes. Videos should be hosted on a 3rd party platform such as YouTube or Vimeo. You can embed these using regular HTML embed tags as available from those platforms. Web based media such as Google Doc documents can be embedded using regular HTML embed tags as available from those platforms. Callout blocks \uf0c1 Our markdown supports the use of special callout blocks. These provide icons and highlighted backgrounds for various concepts such as : Important, Info, Challenge, Topic, Definition, Meetups, Headline, Hackathon, Create, Calendar, Growth Hack, Debugging, Cross Discipline and more. Please refer to the Callout section of the Books Cheat Sheet. If you have not done so already, copy this starter pack into your own account. You should select the Use Pack option to create the project. Don't make pages too long \uf0c1 Again, this depends on your intended audience but try to keep each page reasonably brief. If the topic is a long one, you may want to break it up into several pages. This prevents lots of scrolling and allows students to digest information in manageable chunks. Hidden folders \uf0c1 Your content will often want to show code samples. Codio's recommended approach is to put each set of code samples into a dedicated folder. Then, using the page settings, you can specify this folder with the consequence that all non-specified folders are hidden from view in the file tree (if you choose to show it). The benefit of hiding folders is that the student is not distracted by folders and files that are not relevant to the topic you are explaining. Click here for more details on folder hiding. Assessments \uf0c1 Codio offers a range of manually and auto-graded assessments . When used as a part of content, assessments are a very important way of giving students challenges and exercises that help internalize what they have been learning. When used in a course situation, assessments are extremely helpful to the teacher as all assessment results are fed automatically through to the teacher course dashboard, allowing them to monitor students' progress across a Course. Many of Codio's assessment types (code tests, multiple choice questions, text, fill in the blank and list-based) are auto-graded, saving teachers considerable amounts of time and can also offer students instant feedback on the correct answers. You can also use the free-text assessment type for answers that require a typed answer that can be manually graded by faculty. The free text type also support Latex, so math questions can be answered and graded. Assessments you create can be saved in your own library for use in other assignments. See here for more information on this. We also have an extensive library of assessments that you are free to use as you wish. See here for more details Layouts \uf0c1 The editor lets you create different panel layouts for your guide content and the layout can change from section to section. Click here for more information on panel layouts. Markdown content editing \uf0c1 Cheat Sheet \uf0c1 Please refer to the Callout section of the Cheat Sheet. If you have not done so already, copy this starter pack into your own account. You should select the Use Pack option to create the project. Content can be written in Markdown - the recommended option and described on this page HTML allowing more detailed control but requiring more time; described on the next page. When you are in edit mode, you can select a section by using the navigation buttons in the header area selecting a section from the section list Renaming the Section \uf0c1 You can rename your section by clicking on the section title in the header area. Writing content \uf0c1 You can then start writing your content in the main content area. Markdown \uf0c1 For those of you not familiar with Markdown, it is an extremely easy way of writing content without having to worry about HTML. When in Play Mode or as you preview, your content is rendered as students will see it. You can also override the default CSS styling if you wish. Go to Tools->Guide->Add Custom CSS 'Reset Custom CSS' will restore the default CSS styling Click here for details on how to insert images, videos and hyperlinks . Here is a summary of the Markdown formatting codes Headers/Titles \uf0c1 To display a header or title, you can use the # character at the start of the line. The more # characters you add, the smaller the font. # Big title ## Smaller title # Even smaller title ## etc. Bold and Italic \uf0c1 To create bold or italic text, you use ** and * either side of the respective words. I want to say that **this is really important**, you know I *really* like chocolate Bullet Lists \uf0c1 To create a list of bullet points, you start the line with a - - Bullet 1 - Bullet 2 - Bullet 3 - etc Numbered Lists \uf0c1 To create a numbered list, you start the line with a 1. The numbers are automatically calculated for you. 1. Item 1 1. Item 2 1. Item 3 1. etc Code Blocks \uf0c1 If you want to show some code, styled with the courier font, in a box and with syntax highlighting applied you surround your code block with three backticks ``` . For example, the following javascript snippet var i; for(i = 0; i < 10; i++) { document.write(i); } is written with the first line as ```js then your code, and the last line as ``` Note that you can specify a language type after the top 3 back ticks. Entering python after the backticks would apply syntax highlighting for python. Many languages are supported. See a full list of supported languages here . You should search for your language and then use the alias shown. The Code block also includes a 'copy to clipboard' button to allow students to easily copy the code to their clipboard where you may want them to run this code in the assignment Code Segments \uf0c1 If you want to insert a piece of code inline with the rest of your text, then you use a single ` (backtick) character either side of the text. For example, We can define a variable var x; if we like ... is written in markdown as We can define a variable `var x;` if we like Indented Lists \uf0c1 If you want to indent a list, then indent just 2 spaces and it will indent. - Bullet 1 - Bullet 2 - Bullet 3 - etc Callout Blocks \uf0c1 If you want to show a callout block a number of options are available and others can be easily added if required important info warning topic definition challenge guidance meetup hackathon create calendar growthhack xdiscipline debugging e.g. |||info # My Title Some text ||| The Guidance callout block is only visible in play mode to designated teachers within a course. It is not visible for students. Hyperlinks, Images, Videos & iframes \uf0c1 We describe these in this section . HTML \uf0c1 You can include HTML tags Latex / MathJax \uf0c1 Latex is supported using MathJax . For example When $a \\ne 0$ there are two solutions to $(ax^2 + bx + c = 0)$ and they are $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$ and for multiple lines we do the following $$ y=x^2 y=\\frac{x^2}{x+1} $$ Click here for more details on Latex and Mathjax. Inline math equations are encapsulated in a single $ like this: $\\omega = d\\phi / dt$. Collapsible Content \uf0c1 In writing content, it is sometimes useful to provide information for the student, but to keep this hidden until they are ready. This can be achieved with collapsible content and the <details> <summary> elements. The content is treated as HTML and as such a mix of HTML and Markdown can be required. Notes \uf0c1 If including code blocks, ensure you have an empty line after the closing </summary> tag. All code block starter lines, e.g. ```js must be preceded by a blank line. The closing block ``` tag must be followed by a newline. If you have multiple collapsible sections, ensure you have an empty line after the closing </details> tag. If you wish to have the content showing by default, use <details open> . Example To achieve this result, the code is comprised below (in 3 code blocks to ensure all presents correctly here) ## Example Collapsible Content <details><summary> There are some <b>Special Numeric Values</b> which are part of the number data type. For each of the variables <code>a</code> <code>b</code>and <code>c</code> print out their data types and values. </summary><hr> The result of any mathematical operation will produce a value of type `number`. 1. Variable `a` contains a value of `infinity` which represents mathematical infinity. 2. Variable `b` is assigned a value where the left-hand operator looks like a `string` however JavaScript tries to convert it into a number which is successful. 3. In the case of variable `c`, the string can't be converted and the operation returns the value of `NaN` which means _not a number_. If this is then used in susequent operations the value cascades and the result will also be `NaN`. <h6>Code Block</h6> ```js ` const name = { first: 'John', 'last name': 'Doe', dob: { year: 1970, month: 'January' } } </details> Cheat Sheet \uf0c1 Check out our Cheat Sheet and Use Pack to create the Cheet Sheet project in your Codio account. Previewing content \uf0c1 Preview mode \uf0c1 You will regularly want to switch from editing your page content to preview it as users will see it. The best way to do this is to press the preview button in the top right of the content window. When the guide renders, it would open at the current page you were editing. To return to the edit mode, press the Editor button and you will be returned to edit mode on the page that you were viewing in Play mode. Split screen \uf0c1 Another approach that works for the current page is to switch layout mode to split view mode by selecting the 2nd from left button in the header bar. Play \uf0c1 You can start the Guide player from the Tools->Guide->Play menu or selecting the '>' icon in the file tree HTML content editing \uf0c1 We do not recommend this setting unless you have very specific reasons. It is much harder to use and maintain than markdown but for those who want ultimate control over appearance it is a good option. Setting HTML \uf0c1 You can specify that an individual page be authored using HTML from the content Settings . You will find the Content type dropdown where you can switch between HTML and markdown. CSS header and footer \uf0c1 In order to style your content properly, you should use the Edit HTML header and Edit HTML footer settings. These can be found in the main Settings area on the Global tab. The header and footer information wrap the HTML content for your page. Below is a typical example of a header. <html> <head> <meta charset=\"UTF-8\"> <title>bjlo2e_ch04-1</title> <link href=\".guides/content/css/my-style.css\" rel=\"stylesheet\" type=\"text/css\" /> <script src=\"https://codio.com/codio-client.js\" type=\"text/javascript\"></script> <script src=\".guides/content/script/my-script.js\" type=\"text/javascript\"></script> </head> <body> And here is the footer. </body> </html> Support functions \uf0c1 In a page authored using Markdown, you are able to create buttons and other actions. We provide some javascript functions that support the same functionality. Important : if you use any of the functions listed below then you must load https://codio.com/codio-client.js in the HTML Header as shown in the example above. codio.run(command, callback) - Run a command on the box. callback will fire once executed and should be used to communicate back to the user. codio.runAndShow(command, outputElementId) - Run a command on the box. All stdout will be displayed in outputElementId . codio.open('file', path, panel_num) - Opens a file located in path in the panel_num panel, where 0 is the first panel from top left codio.open('terminal', command, panel_num) - Opens a terminal window and executes command . panel_num specifies the location of the panel, where 0 is the first panel from top left. codio.open('preview', url, panel_num) - Opens a preview window at url . panel_num specifies the location of the panel, where 0 is the first panel from top left. codio.goToNextSection() - Moves to the next page in the guide. codio.goToPreviousSection() - Moves to the previous page in the guide. codio.switchUnit(unitId) - Changes to a different assignment. The assignment ID is found by opening the assignment and getting the ID from the URL. codio.goToSectionTitled('Section Title') - Switches to the page whose title is \"Section Title'. codio.assessments.check(assessmentId) - Executes the assessment codio.assessments.reset(assessmentId) - Resets any response and score that the user may have already provided for assessmentId . codio.assessments.get(assessmentId, callback) - Gets the result data for a completed assessment codio.assessments.send(assessmentId, answer, points, callback) - Sends result data for a custom assessment. answer contains the custom result data for assessment and will be stored in Codio. You can use codio.assessments.get() to reconstruct the output for an already answered question. codio.resetCurrentFiles() - Allows students to restore current files in guides within your content. Teacher only content \uf0c1 Teacher only content can be viewed by teachers when: opening a assignment within a course module in a course viewing student code within a course Warning If your project is public and a user accesses this project via the public listing of your account then they will have access to the solutions. You can make content available only to course teachers in the following ways. Entire page \uf0c1 If you want a page and its appearance in the table of contents to be only visible to a teacher, then you should enable the Teacher Only slider in the page settings . Selected content within page \uf0c1 If you want to hide a certain piece of information within a page from students then you should include all such content within a page within |||guidance ..... ||| . An example is shown below. |||guidance # Solution This solution will only be shown - to teachers - provided the content is published within a assignment - if you share a project normally or it is public and a student loads it, they have access to this content. ||| Teacher only content can also be shown to teachers within an assessment question. This allows an question's answer rationale to be shown. Please refer to the assessments section for more details. Custom Buttons \uf0c1 Custom buttons are a powerful feature that let you insert a button into your guide content that when pressed can carry out any custom action. There are a number of ways to use a custom button To jump to a page in the content \uf0c1 This will jump to a specific page in the guide {Button Text | go-to-section-titled}(section title) e.g. {Go to Section: LTI | go-to-section-titled}(LTI) To launch a process \uf0c1 This will launch a process and execute a terminal command. {Button Text}(command paramater1 parameter2 parameterN) Launching a process in a terminal window \uf0c1 There are cases where you will want to launch a command in a dedicated terminal window. A typical example is when student code requires input from the user. Codio cannot handle standard input through the guides window, so use the following button command. {Button Text | terminal}(command) Launching a debugger configuration \uf0c1 You can launch a debugger configuration as shown below. It is important to specify the configuration name exactly. {Button text | debugger}(debugger configuration name) To restore current files in guides \uf0c1 Students can restore current files to the default setting from the setting menu but you can also offer them a button within your guides content as well. {Button text | reset}(optional commands to run) Writing a custom event handler \uf0c1 This offers you the most flexibility and allows you to write your own custom button press handler. A common use case is executing tests on user code. To do this, you should use the following format for your custom button. {Button Text|custom}(myId) If you wish to use a custom event handler to allow students to restore current files and handle other functions, you can do so but you will need to include this code in your custom script window.addEventListener('codio-button-custom', function (ev) { if(codio) { codio.resetCurrentFiles() } }); Loading Scripts \uf0c1 You should point your content page to a script file to load javascript scripts. You can do this from Settings>Global>Scripts . Event Listener \uf0c1 The event listener is able to execute your custom task. It will display a custom message area beneath it into which you can write your own results data. The message data can be a custom message that a test might return and can be plain text or HTML. For the event listener to run you should include in Settings>Global>Scripts : https://codio.com/codio-client.js (where your account is running on codio.com) https://codio.co.uk/codio-client.js (where your account is running on codio.co.uk) The icon that appears in the top left of the message area can be controlled from your event listener, as shown in the example below. window.addEventListener('codio-button-custom', function (ev) { console.log('id:', ev.id, 'cmd:', ev.cmd, ev); if (codio) { codio.setButtonValue(ev.id, codio.BUTTON_STATE.PROGRESS, 'Checking'); codio.setButtonValue(ev.id, codio.BUTTON_STATE.FAILURE, 'Bad Job :('); codio.setButtonValue(ev.id, codio.BUTTON_STATE.INVALID, 'Internal error'); window.setTimeout(function () { codio.setButtonValue(ev.id, codio.BUTTON_STATE.SUCCESS, 'Extremely well done!'); },1000); } }); console.log('test.js script loaded'); ev.id is the contents internal id for the button. ev.cmd is the myId text you specified in the button with {Button Text|custom}(myId) . This is typically used to indicate the id of the test you wish to run or just the specific button that is being pressed. The available button commands are codio.setButtonValue(ev.id, codio.BUTTON_STATE.PROGRESS, 'Checking..'); codio.setButtonValue(ev.id, codio.BUTTON_STATE.SUCCESS, 'Good job!'); codio.setButtonValue(ev.id, codio.BUTTON_STATE.FAILURE, 'Bad Job :('); codio.setButtonValue(ev.id, codio.BUTTON_STATE.INVALID, 'Internal error'); The 3rd parameter can contain any text to display in the button's attached message area. It can be plain text or HTML. Adding media \uf0c1 You can insert Audio, Images and Videos into a page. Audio \uf0c1 You can insert and play audio files within your project. On the page you wish to play Audio, go to the Settings area where you can define the source audio file along with any actions the should be triggered at specific times during playback. Source Name - select the source file either from .guides/media folder if already uploaded to the project or upload directly from your PC where it will then be stored in the .guides/media folder. Add Action - specifies actions that are triggered at specific times during playback. The following options are available. Open file Close file Open Terminal Close Terminal Run command Highlight Close all tabs Pause Images \uf0c1 Inserting an image is similar. Here are some examples. PNG and JPG image types are supported. Note that the 2nd and 3rd examples point to images within your project. Generally speaking, you should put your images in the .guides/img folder in order to keep the rest of your workspace free of extraneous content for the benefit of the student. ![optional alt tag](http://any-url-you-like.png) ![](image-in-project-root.jpg) ![](.guides/img/best-place-for-images.png) You can also drag/drop images from your project file tree into your content. They will be automatically tagged with the correct path. For Markdown pages: ![.guides/img/displayimage](.guides/img/displayimage.png) For HTML pages: ![.guides/img/displayimage](.guides/img/displayimage.png) Videos \uf0c1 Including embedded videos are also possible using the standard <iframe> html tag. YouTube \uf0c1 If you wish to embed a YouTube video, go to the Share option and select Embed to obtain the code snippet. <iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/1JNhoVbmNAo\" frameborder=\"0\" allowfullscreen></iframe> Vimeo \uf0c1 If you wish to embed a Vimeo video, go to the Share option and select Embed to obtain the code snippet. <iframe src=\"//player.vimeo.com/video/110479088\" width=\"500\" height=\"281\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe> <p><a href=\"http://vimeo.com/110479088\">Codio - Innovation in Computer Programming Education</a> from <a href=\"http://vimeo.com/user20752628\">Codio</a> on <a href=\"https://vimeo.com\">Vimeo</a>.</p> Hyperlinks \uf0c1 Creating a hyperlink on a piece of text is easy. Go to [Google](google.com) to look stuff up. iframes \uf0c1 You can embed content in an iframe using the <iframe> html tag. To embed from Google Docs, go to File>Publish to Web and select Embed to get the code snippet Example Projects \uf0c1 https://codio.com/codio-units/java-example is a project that you can copy into your own Codio account and shows you how to create code tests and setup automatic marking. We would also recommend that you check out our Guides Cheat Sheet and Use Pack to create into your Codio account to review. Open/close tabs from content \uf0c1 You can include links in your content to perform the same open and close actions as you do from the open tabs dialog. Syntax Summary \uf0c1 The syntax is as follows and actions can be chained together using, separated by a ; . [Hyperlink text](open_file file1, file2; cmd ls -al) Opening directives \uf0c1 open_file file1 file2 fileN panel=0 where panel is optional, in which case the default panel (0) will be used if not specified. open_preview file panel=0 where panel is optional, in which case the default panel (0) will be used if not specified. open_terminal command panel=0 where command (a system command) is optional and where panel is optional, in which case the default panel (0) will be used if not specified. cmd systemcommand argument1 argument2 argumentN open_tutor file panel=0 to open visualiser and where panel is optional, in which case the default panel (0) will be used if not specified. Closing directives \uf0c1 close_all closes all tabs in all panels, except the Guide itself. close_all panel=0 closes all tabs in panel 0. close_file file1 closes file1 in all panels close_file file1 file2 fileN panel=0 where panel is optional, in which case the default panel (0) will be used. close_preview behaves like close_file for preview tabs. close_terminal behaves like close_file for terminal tabs. close_tutor file panel=0 where visualiser is closed for file open in panel 0 Important - spaces and ; in file names and commands \uf0c1 If any of your files contain spaces in the names, then you should enclose the file name in double quotes open_file \"file name.txt\" If you use cmd and the command has a ; character in it, then you should also use quotes cmd \"cp file1 file2; cp file3 file4\" Examples \uf0c1 Open a file file.txt [Click here](open_file file.txt) Open a file file.txt in panel 1 [Click here](open_file file.txt panel=1) Open a file file.txt in panel 1, with a code reference and highlight 3 lines [Click here](open_file file.txt panel=1 ref=\"some text in your code\" count=3) Open files file.txt and file2.txt [Click here](open_files file.txt file2.txt) Open a file file.txt and preview of file.txt in panel 2 [Click here](open_file file.txt; open_preview file.txt panel=2) Run a command then open a preview of file.txt in panel 2 [Click here](cmd cp source.txt target.txt; open_preview file.txt panel=2) Open a Terminal window in panel 1 [Click here](open_terminal panel=2) Close file.txt and open a preview file.txt [Click here](close_file file.txt; open_preview file.txt) Close all open files, previews and terminals in all panels, then open a file file.txt [Click here](close_all; open_file file.txt) Close all open files, previews and terminals, then open a file file.txt [Click here](close_all; open_file file.txt) Close all open files, previews and terminals that are in panel 2, then open a file file.txt [Click here](close_all panel=2; open_file file.txt) Hiding folders \uf0c1 Your content will often want to show code samples. Codio's recommended approach is to put each set of code samples into a dedicated folder. Then, using Show Folders on page settings , you can specify this folder. All non-specified folders are hidden from view in the file tree. Latex for math expressions \uf0c1 Latex is ideal for entering mathematical expressions into your pages. You can also insert Latex expressions into many assessment fields. Codio uses Mathjax for the rendering of all Latex expressions, so certain macros are not supported. Inline Latex expressions \uf0c1 An example of an inline expression is $\\frac{x^3+1}{x^2-1}$ . When your page is shown, the Latex expression will render appropriately. Display mode Latex expressions \uf0c1 You can also render one more more lines of Latex expressions in a more prominent format as shown below. $$ y=x^2 \\sum_{i=0}^n i^2 = \\frac{(n^2+n)(2n+1)}{6} $$ Latex Resources \uf0c1 Google is often your friend when it comes to discovering Latex syntax. However, here are two very useful references that will accelerate things for you. Mathjax \uf0c1 Here is a list of Latex commands supported by Mathjax. Stack Exchange \uf0c1 Here is a page on Math StackExchange that has an excellent overview of Mathjax/Latex syntax as well as explaining general concepts. Click here : Stack Exchange Detextify \uf0c1 Detextify is an excellent way of finding a Latex symbol by free hand drawing it on the screen using your mouse or touchpad. Important: you should not use commands that are not in the standard package. In the image above, you can see the last one has a \\usepackage command. Symbols in a special package may not work.","title":"Content Authoring with Guides"},{"location":"courses/authoring/#introduction","text":"Codio Guides is a powerful authoring tool creating rich tutorial and instructional content as well as assessments. Here are a few of the key features. Each page of content can control the layout of the IDE Open and close files, terminal windows and html page previews Launch commands from the content page and pipe terminal output into the content page Create manually and automatically graded questions and assessments Manage a table of contents Teachers/Instructors can obtain PDF export of the guides content to distribute to students as required","title":"Introduction"},{"location":"courses/authoring/#where-is-it","text":"You can launch the content authoring from The menu, Tools->Guide->Edit The button at the top of the file tree as shown below","title":"Where is it?"},{"location":"courses/authoring/#project-course-assignment-or-book","text":"Before you start to author content you should be aware of the three different places you can create content using guides. Let's look at each of the three ways to create content and why you might choose each one.","title":"Project, course assignment or book?"},{"location":"courses/authoring/#projects","text":"A project is simply a standalone Codio box. It may or may not have guides content. Projects are to be found in the Projects page on the main Codio dashboard. You would want to choose a project as the place to create your content if you have individual, ad hoc assignments or examples that do not constitute more extensive coursework or are not part of a larger series of associated projects. A project can be assigned to a course at any time. All the students in that course will then be able to access that project and its content. There are drawbacks to using projects to assign to students. If you have related projects and the number of projects grows, it can be hard to quickly find a project you want to assign to a course. There is also no way to arrange your projects into chronological order. Courses and books offer excellent solutions to this organizational problem.","title":"Projects"},{"location":"courses/authoring/#assignments","text":"An assignment is essentially the same as a project. The only difference is that your project assignments are located in the courses area in the main Codio dashboard and accessible to other teachers who can edit the item and to students in the course. Assignments are very easy to locate as they are tidily organized within the course module they belong to. You can also arrange your assignments within a course module. You would typically use an assignment if either of the following apply. You have a logically related series of projects that you want to assign to a student that form a course module. You have a collection of assessments relate to a course that are used for homework, lab assessments, projects etc. A course allows you to subdivide your course into modules and then chronologically arrange your assignments within your modules. When you create a course, you have to create at least one module. A module does nothing special other than contain assignments and are simply a nice way to group your assignments. There is one minor drawback to project based assignments that you should be aware of. If students are working with a project assignment and want to look at tutorial content that is contained in another assignment, they have to switch assignments. This can take several seconds and can be irritating during a revision phase when they want to frequently switch assignments. For this reason, we created the book, which we will look at next.","title":"Assignments"},{"location":"courses/authoring/#book-assignments","text":"A book is intended to replicate a hard-copy book. It contains a lot of content, often an entire course of content. Let's look at the case of a course called Introduction to Java . If this was a regular book, it might contain 500 pages. If you used project assignments to create this content, you might end up with a very large number of assignments, say 50. As we mentioned above, when students are revising and want to randomly move between different assignments to review content, the can get frustrated by the time it takes to switch assignments. A book addresses this issue by offering sophisticated table to contents management with nested chapters and sections. As a result, you can put all of your content into a single book, with a single box running in the background. However, faculty will still often want to teach a course based on a book. To do this, you use a course but rather than creating a project assignment, you create a book based assignment. This allows you to point to any parts of a book for that assignment.","title":"Book assignments"},{"location":"courses/authoring/#book-or-project-assignment","text":"It can still be a little confusing whether you should use a book based assignment or a project assignment, so here are some typical use cases. Project assignments - use when you have a collection of assessments with no or minimal tutorial content. Best used for homework or lab type assessments. If a student is not going to regularly switch assignments in a single session. Book assignments - use for tutorial content, examples and non-critical assessments. Note that you can mix both book and project assignments in a course.","title":"Book or project assignment?"},{"location":"courses/authoring/#author-and-student-views","text":"The experience when authoring differs from that of a student. Students are not able to view the authoring tools. When they start a assignment or project, if there is content present, it will automatically be shown. The author can also specify whether the student is able to close the content or not. If you are an author, you will often want to view the content as a student will see it.","title":"Author and student views"},{"location":"courses/authoring/#editing","text":"Only an author is able to edit the content. Students and users with read-only rights will not be able to. Click here for details on page editing.","title":"Editing"},{"location":"courses/authoring/#preview","text":"You can press the preview button in the top right area of the edit pane. This will switch to preview mode. You can then switch back to editor mode by pressing the Editor button. You can also start the preview mode from the Tools->Guide->Play . Finally, there is also a button at the top of the file tree that launches the content.","title":"Preview"},{"location":"courses/authoring/#customizing-ide-menu","text":"To simplify the educational process for students, the top menu can be customized to remove options from students that they cannot override. Please note that only students will see this. Teachers previewing the assignment will not see the customization. If you wish to check this, the test student accounts can be used Through a .codio-menu file, a teacher can specify what menu items should be hidden. Example: { \"Logo\": false, // hides the Codio logo \"Codio\": false, // hides the Codio menu dropdown \"Project\": { \"Permissions\": false // hides the Permissions option in the Project menu dropdown }, \"Help\": false, // hides the Help menu dropdown \"Run\": false, // hides the Run menu dropdown \"Preview\": false, // hides the Preview menu dropdown \"Debugger\": false, // hides the Debugger menu dropdown \"Status\": false // hides the Status icon, user Avatar, user name and exit button } Be aware that if setting Status=false, students will need to use the 'Back to Dashboard' button shown on the last page of the guides to return to their dashboard area Setting up .codio-menu file: Menu items that the student will see: Students will not see the .codio-menu file to be able to edit/change it.","title":"Customizing IDE menu"},{"location":"courses/authoring/#player-options","text":"When the content is rendered to a student, various options can be controlled The Collapse table of contents button allows the user to collapse the content pane to provide larger working area if required. This option will not show if the page layout is One Pane Navigation Buttons allows the user to navigate forward/backward in the guide. Settings allows the user to view the assignment as a teacher (e.g. show solution information hidden to students) change the Theme (light/dyslexic), Mark as Complete, change the font size, reset both the theme and fonts, to restore the current files (see below) and to access Code Comments. See Dyslexia Support section Show/Hide Section List Hamburger Icon allows the user to show/hide the section list. Grading button is visible for teachers to allow access to grading area. Students do not see this","title":"Player Options"},{"location":"courses/authoring/#restore-current-files","text":"The Restore Current Files feature is a great way to reset/restore any files on that page to its initial state after hacking sample code around. Files can be restored from the menu as shown below.","title":"Restore current files"},{"location":"courses/authoring/#table-of-contents-management","text":"Once you are in the Codio IDE, you are able to create and manage content. There are two ways to access the Codio Guide. Press then right arrow at the top of the file tree. From the menu, select Tools->Guide->Edit .","title":"Table of contents management"},{"location":"courses/authoring/#editing-page-content-and-actions","text":"Please refer to the following pages for details in how to edit page content and control page actions. Page Editing for details on how to edit a pages content using markdown or HTML, hiding folders and other actions. Settings and page actions : Opening and closing files, panel configuration and other settings","title":"Editing page content and actions"},{"location":"courses/authoring/#editing-content","text":"The image below highlights the main components of the editing page.","title":"Editing content"},{"location":"courses/authoring/#accessing-the-table-of-contents","text":"To open and close the table of contents, press the Hamburger Icon at the top right. From here you can add and organize content.","title":"Accessing the table of contents"},{"location":"courses/authoring/#chapters-sections-and-pages","text":"A guide is comprised of pages organized into chapters and sections. A chapter is a top level item only. Sections can be placed at any location and nested to any depth. You can add a new chapter, section or page by right clicking on the appropriate location within the table of contents. by first selecting the item in the table of contents below which the new element should be added and then pressing one of the buttons at the top of the table of contents.","title":"Chapters, sections and pages"},{"location":"courses/authoring/#adding-content-to-a-chapter-or-section","text":"By default, chapters and sections are passive and do not have page content assigned to them. However, you can add content by right-clicking the item and then selecting Add content from the menu. If you want to reverse the procedure, you right click and select Remove content .","title":"Adding content to a chapter or section"},{"location":"courses/authoring/#multiple-selection","text":"You can multi-select pages as follows Select an item then shift+click on a latter item to select all pages between the two items. This only works for items at the same level. Use ctrl+click (PC/Linux) or cmd+click (Mac) to multi select individual pages.","title":"Multiple selection"},{"location":"courses/authoring/#drag-and-drop","text":"It is very important to understand how drag and drop works within a table of contents as it is very powerful but can be confusing if you don\u2019t understand that drop process. Drag and drop works with individual or multiple selected pages. What is unusual about our drag and drop support is that the destination folder location is determined by where you drop. If you drop in the top portion of the target item, the selection will be dropped above it at the same level. If you drop in middle portion of the target item, the selection will be dropped within it if the target is a section. If you drop in the lower portion of the target item, the selection will be dropped below the target at the same level.","title":"Drag and Drop"},{"location":"courses/authoring/#page-editing-overview","text":"To create new content or to edit existing content, go to the Tools->Guide->Edit menu option. Use the layout modes to switch between editor, preview, and split view modes. When in preview mode, you can quickly switch back to editor mode by selecting the Editor button: Video: Editing Existing Guides Content","title":"Page editing overview"},{"location":"courses/authoring/#anatomy-of-the-content-editor","text":"Below is a screenshot of the editor with the main components highlighted.","title":"Anatomy of the content editor"},{"location":"courses/authoring/#editor-settings","text":"Editor settings gives you access to the key functions:","title":"Editor settings"},{"location":"courses/authoring/#page","text":"Layout allows you to specify the panel layout you want to choose for this section, Show Folders allows you to define specific folders in your project that you wish to be visible when the current section is displayed, Close Tabs allows you to close all tabs open from previous section, Close Terminal Session when Close tabs enabled, allows you the option to retain terminal session from previous section. By default, terminal session will close Set Section as Chapter allows you to set the section as a chapter in your content, Teacher Only allows you to show content that only teachers are able to see. Content Type allows you to write your content in either Markdown or HTML","title":"Page"},{"location":"courses/authoring/#open-tabs","text":"This allows you to specify: which files you want to automatically open when the current section is displayed, Preview (including external websites), Open a Terminal window (including running a terminal command), which lines (if any) you wish to highlight within each file.","title":"Open Tabs"},{"location":"courses/authoring/#assessments","text":"This allows you to set up assessments.","title":"Assessments"},{"location":"courses/authoring/#media","text":"This allows you to play audio files within your project.","title":"Media"},{"location":"courses/authoring/#global","text":"Scripts allows you to point to one or more .js files in your project (usually you would have this somewhere within the .guides folder) that is run when the page is shown. This is especially useful when interacting with a button in a page of content. Theme allows you to select the default theme for people viewing the content. We currently have a light theme and will be adding a dark theme shortly. Dyslexic users can also choose a special theme from the Settings drop down in the content player. Lexicon Topic if you use this option, an icon will appear in the toolbar that will load the Lexikon window with the selected topic automatically selected. Students can still access the Lexicon from the Tools>Lexicon menu (unless of course you are restricting the top menu available to them) Suppress page numbering allows you to suppress the section page numbers when in Play Mode. Hide Menu allows you to hide the main Codio menu items in the IDE (Codio/Project/File/Edit etc) when the assignment is run in a course . Allow guide to be closed allows students to be able to close the content. It can be restarted by selecting the Start icon in the file tree: Use submit buttons see Student submission options for more information Use mark as completed see Student submission options for more information Collapsed on start starts the assignment with the guides pane collapsed. Students can show the content clicking on the hamburger icon on the right Hide Section List hides the sections list in your content for the students. Hide Back to Dashboard button hides this button that would otherwise show on the last page of the guides. Protect Layout prevents students from closing files in tabs.","title":"Global"},{"location":"courses/authoring/#authoring-guidelines","text":"Here are some guidelines for creating good quality content.","title":"Authoring guidelines"},{"location":"courses/authoring/#markdown","text":"The best way to author content is using markdown. It is extremely easy to write content that renders very nicely and without having to fiddle with HTML. You can embed HTML snippets into a markdown as well where you need full control. We have a Cheat Sheet project that you can use to see the full capabilities. To copy this starter pack into your own account, please click here . You should select the Use Pack option to create the project.","title":"Markdown"},{"location":"courses/authoring/#courses-and-books","text":"We strongly recommend that when you are creating content at scale then you have a thorough understanding of the differences between projects, course assignments and books before starting.","title":"Courses and Books"},{"location":"courses/authoring/#media-assets","text":"When creating a book or a guide, you will often be working with images, video and other media. We recommend the following. Images should be placed in the .guides/img folder. You can create sub-folders for organizational purposes. Videos should be hosted on a 3rd party platform such as YouTube or Vimeo. You can embed these using regular HTML embed tags as available from those platforms. Web based media such as Google Doc documents can be embedded using regular HTML embed tags as available from those platforms.","title":"Media assets"},{"location":"courses/authoring/#callout-blocks","text":"Our markdown supports the use of special callout blocks. These provide icons and highlighted backgrounds for various concepts such as : Important, Info, Challenge, Topic, Definition, Meetups, Headline, Hackathon, Create, Calendar, Growth Hack, Debugging, Cross Discipline and more. Please refer to the Callout section of the Books Cheat Sheet. If you have not done so already, copy this starter pack into your own account. You should select the Use Pack option to create the project.","title":"Callout blocks"},{"location":"courses/authoring/#dont-make-pages-too-long","text":"Again, this depends on your intended audience but try to keep each page reasonably brief. If the topic is a long one, you may want to break it up into several pages. This prevents lots of scrolling and allows students to digest information in manageable chunks.","title":"Don't make pages too long"},{"location":"courses/authoring/#hidden-folders","text":"Your content will often want to show code samples. Codio's recommended approach is to put each set of code samples into a dedicated folder. Then, using the page settings, you can specify this folder with the consequence that all non-specified folders are hidden from view in the file tree (if you choose to show it). The benefit of hiding folders is that the student is not distracted by folders and files that are not relevant to the topic you are explaining. Click here for more details on folder hiding.","title":"Hidden folders"},{"location":"courses/authoring/#assessments_1","text":"Codio offers a range of manually and auto-graded assessments . When used as a part of content, assessments are a very important way of giving students challenges and exercises that help internalize what they have been learning. When used in a course situation, assessments are extremely helpful to the teacher as all assessment results are fed automatically through to the teacher course dashboard, allowing them to monitor students' progress across a Course. Many of Codio's assessment types (code tests, multiple choice questions, text, fill in the blank and list-based) are auto-graded, saving teachers considerable amounts of time and can also offer students instant feedback on the correct answers. You can also use the free-text assessment type for answers that require a typed answer that can be manually graded by faculty. The free text type also support Latex, so math questions can be answered and graded. Assessments you create can be saved in your own library for use in other assignments. See here for more information on this. We also have an extensive library of assessments that you are free to use as you wish. See here for more details","title":"Assessments"},{"location":"courses/authoring/#layouts","text":"The editor lets you create different panel layouts for your guide content and the layout can change from section to section. Click here for more information on panel layouts.","title":"Layouts"},{"location":"courses/authoring/#markdown-content-editing","text":"","title":"Markdown content editing"},{"location":"courses/authoring/#cheat-sheet","text":"Please refer to the Callout section of the Cheat Sheet. If you have not done so already, copy this starter pack into your own account. You should select the Use Pack option to create the project. Content can be written in Markdown - the recommended option and described on this page HTML allowing more detailed control but requiring more time; described on the next page. When you are in edit mode, you can select a section by using the navigation buttons in the header area selecting a section from the section list","title":"Cheat Sheet"},{"location":"courses/authoring/#renaming-the-section","text":"You can rename your section by clicking on the section title in the header area.","title":"Renaming the Section"},{"location":"courses/authoring/#writing-content","text":"You can then start writing your content in the main content area.","title":"Writing content"},{"location":"courses/authoring/#markdown_1","text":"For those of you not familiar with Markdown, it is an extremely easy way of writing content without having to worry about HTML. When in Play Mode or as you preview, your content is rendered as students will see it. You can also override the default CSS styling if you wish. Go to Tools->Guide->Add Custom CSS 'Reset Custom CSS' will restore the default CSS styling Click here for details on how to insert images, videos and hyperlinks . Here is a summary of the Markdown formatting codes","title":"Markdown"},{"location":"courses/authoring/#headerstitles","text":"To display a header or title, you can use the # character at the start of the line. The more # characters you add, the smaller the font. # Big title ## Smaller title # Even smaller title ## etc.","title":"Headers/Titles"},{"location":"courses/authoring/#bold-and-italic","text":"To create bold or italic text, you use ** and * either side of the respective words. I want to say that **this is really important**, you know I *really* like chocolate","title":"Bold and Italic"},{"location":"courses/authoring/#bullet-lists","text":"To create a list of bullet points, you start the line with a - - Bullet 1 - Bullet 2 - Bullet 3 - etc","title":"Bullet Lists"},{"location":"courses/authoring/#numbered-lists","text":"To create a numbered list, you start the line with a 1. The numbers are automatically calculated for you. 1. Item 1 1. Item 2 1. Item 3 1. etc","title":"Numbered Lists"},{"location":"courses/authoring/#code-blocks","text":"If you want to show some code, styled with the courier font, in a box and with syntax highlighting applied you surround your code block with three backticks ``` . For example, the following javascript snippet var i; for(i = 0; i < 10; i++) { document.write(i); } is written with the first line as ```js then your code, and the last line as ``` Note that you can specify a language type after the top 3 back ticks. Entering python after the backticks would apply syntax highlighting for python. Many languages are supported. See a full list of supported languages here . You should search for your language and then use the alias shown. The Code block also includes a 'copy to clipboard' button to allow students to easily copy the code to their clipboard where you may want them to run this code in the assignment","title":"Code Blocks"},{"location":"courses/authoring/#code-segments","text":"If you want to insert a piece of code inline with the rest of your text, then you use a single ` (backtick) character either side of the text. For example, We can define a variable var x; if we like ... is written in markdown as We can define a variable `var x;` if we like","title":"Code Segments"},{"location":"courses/authoring/#indented-lists","text":"If you want to indent a list, then indent just 2 spaces and it will indent. - Bullet 1 - Bullet 2 - Bullet 3 - etc","title":"Indented Lists"},{"location":"courses/authoring/#callout-blocks_1","text":"If you want to show a callout block a number of options are available and others can be easily added if required important info warning topic definition challenge guidance meetup hackathon create calendar growthhack xdiscipline debugging e.g. |||info # My Title Some text ||| The Guidance callout block is only visible in play mode to designated teachers within a course. It is not visible for students.","title":"Callout Blocks"},{"location":"courses/authoring/#hyperlinks-images-videos-iframes","text":"We describe these in this section .","title":"Hyperlinks, Images, Videos &amp; iframes"},{"location":"courses/authoring/#html","text":"You can include HTML tags","title":"HTML"},{"location":"courses/authoring/#latex-mathjax","text":"Latex is supported using MathJax . For example When $a \\ne 0$ there are two solutions to $(ax^2 + bx + c = 0)$ and they are $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$ and for multiple lines we do the following $$ y=x^2 y=\\frac{x^2}{x+1} $$ Click here for more details on Latex and Mathjax. Inline math equations are encapsulated in a single $ like this: $\\omega = d\\phi / dt$.","title":"Latex / MathJax"},{"location":"courses/authoring/#collapsible-content","text":"In writing content, it is sometimes useful to provide information for the student, but to keep this hidden until they are ready. This can be achieved with collapsible content and the <details> <summary> elements. The content is treated as HTML and as such a mix of HTML and Markdown can be required.","title":"Collapsible Content"},{"location":"courses/authoring/#notes","text":"If including code blocks, ensure you have an empty line after the closing </summary> tag. All code block starter lines, e.g. ```js must be preceded by a blank line. The closing block ``` tag must be followed by a newline. If you have multiple collapsible sections, ensure you have an empty line after the closing </details> tag. If you wish to have the content showing by default, use <details open> . Example To achieve this result, the code is comprised below (in 3 code blocks to ensure all presents correctly here) ## Example Collapsible Content <details><summary> There are some <b>Special Numeric Values</b> which are part of the number data type. For each of the variables <code>a</code> <code>b</code>and <code>c</code> print out their data types and values. </summary><hr> The result of any mathematical operation will produce a value of type `number`. 1. Variable `a` contains a value of `infinity` which represents mathematical infinity. 2. Variable `b` is assigned a value where the left-hand operator looks like a `string` however JavaScript tries to convert it into a number which is successful. 3. In the case of variable `c`, the string can't be converted and the operation returns the value of `NaN` which means _not a number_. If this is then used in susequent operations the value cascades and the result will also be `NaN`. <h6>Code Block</h6> ```js ` const name = { first: 'John', 'last name': 'Doe', dob: { year: 1970, month: 'January' } } </details>","title":"Notes"},{"location":"courses/authoring/#cheat-sheet_1","text":"Check out our Cheat Sheet and Use Pack to create the Cheet Sheet project in your Codio account.","title":"Cheat Sheet"},{"location":"courses/authoring/#previewing-content","text":"","title":"Previewing content"},{"location":"courses/authoring/#preview-mode","text":"You will regularly want to switch from editing your page content to preview it as users will see it. The best way to do this is to press the preview button in the top right of the content window. When the guide renders, it would open at the current page you were editing. To return to the edit mode, press the Editor button and you will be returned to edit mode on the page that you were viewing in Play mode.","title":"Preview mode"},{"location":"courses/authoring/#split-screen","text":"Another approach that works for the current page is to switch layout mode to split view mode by selecting the 2nd from left button in the header bar.","title":"Split screen"},{"location":"courses/authoring/#play","text":"You can start the Guide player from the Tools->Guide->Play menu or selecting the '>' icon in the file tree","title":"Play"},{"location":"courses/authoring/#html-content-editing","text":"We do not recommend this setting unless you have very specific reasons. It is much harder to use and maintain than markdown but for those who want ultimate control over appearance it is a good option.","title":"HTML content editing"},{"location":"courses/authoring/#setting-html","text":"You can specify that an individual page be authored using HTML from the content Settings . You will find the Content type dropdown where you can switch between HTML and markdown.","title":"Setting HTML"},{"location":"courses/authoring/#css-header-and-footer","text":"In order to style your content properly, you should use the Edit HTML header and Edit HTML footer settings. These can be found in the main Settings area on the Global tab. The header and footer information wrap the HTML content for your page. Below is a typical example of a header. <html> <head> <meta charset=\"UTF-8\"> <title>bjlo2e_ch04-1</title> <link href=\".guides/content/css/my-style.css\" rel=\"stylesheet\" type=\"text/css\" /> <script src=\"https://codio.com/codio-client.js\" type=\"text/javascript\"></script> <script src=\".guides/content/script/my-script.js\" type=\"text/javascript\"></script> </head> <body> And here is the footer. </body> </html>","title":"CSS header and footer"},{"location":"courses/authoring/#support-functions","text":"In a page authored using Markdown, you are able to create buttons and other actions. We provide some javascript functions that support the same functionality. Important : if you use any of the functions listed below then you must load https://codio.com/codio-client.js in the HTML Header as shown in the example above. codio.run(command, callback) - Run a command on the box. callback will fire once executed and should be used to communicate back to the user. codio.runAndShow(command, outputElementId) - Run a command on the box. All stdout will be displayed in outputElementId . codio.open('file', path, panel_num) - Opens a file located in path in the panel_num panel, where 0 is the first panel from top left codio.open('terminal', command, panel_num) - Opens a terminal window and executes command . panel_num specifies the location of the panel, where 0 is the first panel from top left. codio.open('preview', url, panel_num) - Opens a preview window at url . panel_num specifies the location of the panel, where 0 is the first panel from top left. codio.goToNextSection() - Moves to the next page in the guide. codio.goToPreviousSection() - Moves to the previous page in the guide. codio.switchUnit(unitId) - Changes to a different assignment. The assignment ID is found by opening the assignment and getting the ID from the URL. codio.goToSectionTitled('Section Title') - Switches to the page whose title is \"Section Title'. codio.assessments.check(assessmentId) - Executes the assessment codio.assessments.reset(assessmentId) - Resets any response and score that the user may have already provided for assessmentId . codio.assessments.get(assessmentId, callback) - Gets the result data for a completed assessment codio.assessments.send(assessmentId, answer, points, callback) - Sends result data for a custom assessment. answer contains the custom result data for assessment and will be stored in Codio. You can use codio.assessments.get() to reconstruct the output for an already answered question. codio.resetCurrentFiles() - Allows students to restore current files in guides within your content.","title":"Support functions"},{"location":"courses/authoring/#teacher-only-content","text":"Teacher only content can be viewed by teachers when: opening a assignment within a course module in a course viewing student code within a course Warning If your project is public and a user accesses this project via the public listing of your account then they will have access to the solutions. You can make content available only to course teachers in the following ways.","title":"Teacher only content"},{"location":"courses/authoring/#entire-page","text":"If you want a page and its appearance in the table of contents to be only visible to a teacher, then you should enable the Teacher Only slider in the page settings .","title":"Entire page"},{"location":"courses/authoring/#selected-content-within-page","text":"If you want to hide a certain piece of information within a page from students then you should include all such content within a page within |||guidance ..... ||| . An example is shown below. |||guidance # Solution This solution will only be shown - to teachers - provided the content is published within a assignment - if you share a project normally or it is public and a student loads it, they have access to this content. ||| Teacher only content can also be shown to teachers within an assessment question. This allows an question's answer rationale to be shown. Please refer to the assessments section for more details.","title":"Selected content within page"},{"location":"courses/authoring/#custom-buttons","text":"Custom buttons are a powerful feature that let you insert a button into your guide content that when pressed can carry out any custom action. There are a number of ways to use a custom button","title":"Custom Buttons"},{"location":"courses/authoring/#to-jump-to-a-page-in-the-content","text":"This will jump to a specific page in the guide {Button Text | go-to-section-titled}(section title) e.g. {Go to Section: LTI | go-to-section-titled}(LTI)","title":"To jump to a page in the content"},{"location":"courses/authoring/#to-launch-a-process","text":"This will launch a process and execute a terminal command. {Button Text}(command paramater1 parameter2 parameterN)","title":"To launch a process"},{"location":"courses/authoring/#launching-a-process-in-a-terminal-window","text":"There are cases where you will want to launch a command in a dedicated terminal window. A typical example is when student code requires input from the user. Codio cannot handle standard input through the guides window, so use the following button command. {Button Text | terminal}(command)","title":"Launching a process in a terminal window"},{"location":"courses/authoring/#launching-a-debugger-configuration","text":"You can launch a debugger configuration as shown below. It is important to specify the configuration name exactly. {Button text | debugger}(debugger configuration name)","title":"Launching a debugger configuration"},{"location":"courses/authoring/#to-restore-current-files-in-guides","text":"Students can restore current files to the default setting from the setting menu but you can also offer them a button within your guides content as well. {Button text | reset}(optional commands to run)","title":"To restore current files in guides"},{"location":"courses/authoring/#writing-a-custom-event-handler","text":"This offers you the most flexibility and allows you to write your own custom button press handler. A common use case is executing tests on user code. To do this, you should use the following format for your custom button. {Button Text|custom}(myId) If you wish to use a custom event handler to allow students to restore current files and handle other functions, you can do so but you will need to include this code in your custom script window.addEventListener('codio-button-custom', function (ev) { if(codio) { codio.resetCurrentFiles() } });","title":"Writing a custom event handler"},{"location":"courses/authoring/#loading-scripts","text":"You should point your content page to a script file to load javascript scripts. You can do this from Settings>Global>Scripts .","title":"Loading Scripts"},{"location":"courses/authoring/#event-listener","text":"The event listener is able to execute your custom task. It will display a custom message area beneath it into which you can write your own results data. The message data can be a custom message that a test might return and can be plain text or HTML. For the event listener to run you should include in Settings>Global>Scripts : https://codio.com/codio-client.js (where your account is running on codio.com) https://codio.co.uk/codio-client.js (where your account is running on codio.co.uk) The icon that appears in the top left of the message area can be controlled from your event listener, as shown in the example below. window.addEventListener('codio-button-custom', function (ev) { console.log('id:', ev.id, 'cmd:', ev.cmd, ev); if (codio) { codio.setButtonValue(ev.id, codio.BUTTON_STATE.PROGRESS, 'Checking'); codio.setButtonValue(ev.id, codio.BUTTON_STATE.FAILURE, 'Bad Job :('); codio.setButtonValue(ev.id, codio.BUTTON_STATE.INVALID, 'Internal error'); window.setTimeout(function () { codio.setButtonValue(ev.id, codio.BUTTON_STATE.SUCCESS, 'Extremely well done!'); },1000); } }); console.log('test.js script loaded'); ev.id is the contents internal id for the button. ev.cmd is the myId text you specified in the button with {Button Text|custom}(myId) . This is typically used to indicate the id of the test you wish to run or just the specific button that is being pressed. The available button commands are codio.setButtonValue(ev.id, codio.BUTTON_STATE.PROGRESS, 'Checking..'); codio.setButtonValue(ev.id, codio.BUTTON_STATE.SUCCESS, 'Good job!'); codio.setButtonValue(ev.id, codio.BUTTON_STATE.FAILURE, 'Bad Job :('); codio.setButtonValue(ev.id, codio.BUTTON_STATE.INVALID, 'Internal error'); The 3rd parameter can contain any text to display in the button's attached message area. It can be plain text or HTML.","title":"Event Listener"},{"location":"courses/authoring/#adding-media","text":"You can insert Audio, Images and Videos into a page.","title":"Adding media"},{"location":"courses/authoring/#audio","text":"You can insert and play audio files within your project. On the page you wish to play Audio, go to the Settings area where you can define the source audio file along with any actions the should be triggered at specific times during playback. Source Name - select the source file either from .guides/media folder if already uploaded to the project or upload directly from your PC where it will then be stored in the .guides/media folder. Add Action - specifies actions that are triggered at specific times during playback. The following options are available. Open file Close file Open Terminal Close Terminal Run command Highlight Close all tabs Pause","title":"Audio"},{"location":"courses/authoring/#images","text":"Inserting an image is similar. Here are some examples. PNG and JPG image types are supported. Note that the 2nd and 3rd examples point to images within your project. Generally speaking, you should put your images in the .guides/img folder in order to keep the rest of your workspace free of extraneous content for the benefit of the student. ![optional alt tag](http://any-url-you-like.png) ![](image-in-project-root.jpg) ![](.guides/img/best-place-for-images.png) You can also drag/drop images from your project file tree into your content. They will be automatically tagged with the correct path. For Markdown pages: ![.guides/img/displayimage](.guides/img/displayimage.png) For HTML pages: ![.guides/img/displayimage](.guides/img/displayimage.png)","title":"Images"},{"location":"courses/authoring/#videos","text":"Including embedded videos are also possible using the standard <iframe> html tag.","title":"Videos"},{"location":"courses/authoring/#youtube","text":"If you wish to embed a YouTube video, go to the Share option and select Embed to obtain the code snippet. <iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/1JNhoVbmNAo\" frameborder=\"0\" allowfullscreen></iframe>","title":"YouTube"},{"location":"courses/authoring/#vimeo","text":"If you wish to embed a Vimeo video, go to the Share option and select Embed to obtain the code snippet. <iframe src=\"//player.vimeo.com/video/110479088\" width=\"500\" height=\"281\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe> <p><a href=\"http://vimeo.com/110479088\">Codio - Innovation in Computer Programming Education</a> from <a href=\"http://vimeo.com/user20752628\">Codio</a> on <a href=\"https://vimeo.com\">Vimeo</a>.</p>","title":"Vimeo"},{"location":"courses/authoring/#hyperlinks","text":"Creating a hyperlink on a piece of text is easy. Go to [Google](google.com) to look stuff up.","title":"Hyperlinks"},{"location":"courses/authoring/#iframes","text":"You can embed content in an iframe using the <iframe> html tag. To embed from Google Docs, go to File>Publish to Web and select Embed to get the code snippet","title":"iframes"},{"location":"courses/authoring/#example-projects","text":"https://codio.com/codio-units/java-example is a project that you can copy into your own Codio account and shows you how to create code tests and setup automatic marking. We would also recommend that you check out our Guides Cheat Sheet and Use Pack to create into your Codio account to review.","title":"Example Projects"},{"location":"courses/authoring/#openclose-tabs-from-content","text":"You can include links in your content to perform the same open and close actions as you do from the open tabs dialog.","title":"Open/close tabs from content"},{"location":"courses/authoring/#syntax-summary","text":"The syntax is as follows and actions can be chained together using, separated by a ; . [Hyperlink text](open_file file1, file2; cmd ls -al)","title":"Syntax Summary"},{"location":"courses/authoring/#opening-directives","text":"open_file file1 file2 fileN panel=0 where panel is optional, in which case the default panel (0) will be used if not specified. open_preview file panel=0 where panel is optional, in which case the default panel (0) will be used if not specified. open_terminal command panel=0 where command (a system command) is optional and where panel is optional, in which case the default panel (0) will be used if not specified. cmd systemcommand argument1 argument2 argumentN open_tutor file panel=0 to open visualiser and where panel is optional, in which case the default panel (0) will be used if not specified.","title":"Opening directives"},{"location":"courses/authoring/#closing-directives","text":"close_all closes all tabs in all panels, except the Guide itself. close_all panel=0 closes all tabs in panel 0. close_file file1 closes file1 in all panels close_file file1 file2 fileN panel=0 where panel is optional, in which case the default panel (0) will be used. close_preview behaves like close_file for preview tabs. close_terminal behaves like close_file for terminal tabs. close_tutor file panel=0 where visualiser is closed for file open in panel 0","title":"Closing directives"},{"location":"courses/authoring/#important-spaces-and-in-file-names-and-commands","text":"If any of your files contain spaces in the names, then you should enclose the file name in double quotes open_file \"file name.txt\" If you use cmd and the command has a ; character in it, then you should also use quotes cmd \"cp file1 file2; cp file3 file4\"","title":"Important - spaces and ; in file names and commands"},{"location":"courses/authoring/#examples","text":"Open a file file.txt [Click here](open_file file.txt) Open a file file.txt in panel 1 [Click here](open_file file.txt panel=1) Open a file file.txt in panel 1, with a code reference and highlight 3 lines [Click here](open_file file.txt panel=1 ref=\"some text in your code\" count=3) Open files file.txt and file2.txt [Click here](open_files file.txt file2.txt) Open a file file.txt and preview of file.txt in panel 2 [Click here](open_file file.txt; open_preview file.txt panel=2) Run a command then open a preview of file.txt in panel 2 [Click here](cmd cp source.txt target.txt; open_preview file.txt panel=2) Open a Terminal window in panel 1 [Click here](open_terminal panel=2) Close file.txt and open a preview file.txt [Click here](close_file file.txt; open_preview file.txt) Close all open files, previews and terminals in all panels, then open a file file.txt [Click here](close_all; open_file file.txt) Close all open files, previews and terminals, then open a file file.txt [Click here](close_all; open_file file.txt) Close all open files, previews and terminals that are in panel 2, then open a file file.txt [Click here](close_all panel=2; open_file file.txt)","title":"Examples"},{"location":"courses/authoring/#hiding-folders","text":"Your content will often want to show code samples. Codio's recommended approach is to put each set of code samples into a dedicated folder. Then, using Show Folders on page settings , you can specify this folder. All non-specified folders are hidden from view in the file tree.","title":"Hiding folders"},{"location":"courses/authoring/#latex-for-math-expressions","text":"Latex is ideal for entering mathematical expressions into your pages. You can also insert Latex expressions into many assessment fields. Codio uses Mathjax for the rendering of all Latex expressions, so certain macros are not supported.","title":"Latex for math expressions"},{"location":"courses/authoring/#inline-latex-expressions","text":"An example of an inline expression is $\\frac{x^3+1}{x^2-1}$ . When your page is shown, the Latex expression will render appropriately.","title":"Inline Latex expressions"},{"location":"courses/authoring/#display-mode-latex-expressions","text":"You can also render one more more lines of Latex expressions in a more prominent format as shown below. $$ y=x^2 \\sum_{i=0}^n i^2 = \\frac{(n^2+n)(2n+1)}{6} $$","title":"Display mode Latex expressions"},{"location":"courses/authoring/#latex-resources","text":"Google is often your friend when it comes to discovering Latex syntax. However, here are two very useful references that will accelerate things for you.","title":"Latex Resources"},{"location":"courses/authoring/#mathjax","text":"Here is a list of Latex commands supported by Mathjax.","title":"Mathjax"},{"location":"courses/authoring/#stack-exchange","text":"Here is a page on Math StackExchange that has an excellent overview of Mathjax/Latex syntax as well as explaining general concepts. Click here : Stack Exchange","title":"Stack Exchange"},{"location":"courses/authoring/#detextify","text":"Detextify is an excellent way of finding a Latex symbol by free hand drawing it on the screen using your mouse or touchpad. Important: you should not use commands that are not in the standard package. In the image above, you can see the last one has a \\usepackage command. Symbols in a special package may not work.","title":"Detextify"},{"location":"courses/classes/","text":"A course has the following properties. It is a grouping of students who are taught as a logical group. It can have one or more teachers/instructors. You can add content to it. You can instantly access student code and projects. You can integrate the course with any LTI enabled LMS platform such as Canvas, D2L, Moodle, Blackboard and many others. Your LMS can auto-populate courses and grade data can be fed back from Codio to the LMS. Video: Courses Overview Creating a new course \uf0c1 To work with the course features in Codio you will first need to set up a course for your students. Sign in to Codio at www.codio.com If you are in the IDE, click the Codio icon in the top left corner to take you back to the Courses screen. If you are in the dashboard, click on Courses in the left menu. Click the New Course button at the top left of the page. Select Add Empty Course , complete the details requested, then click Create Course . Your new course will appear in your Courses area. Creating new course from share code \uf0c1 You can create courses from a code other users in other organisations can share to you. A relationship between your course and those created using the share code will be established so any updates/changes you may make in your course content can be pulled in by the other users. See working with master/child courses below for more information Select the Add From Share Code option Enter the code given and complete all other details and the course will be created for you. Sharing your course with others \uf0c1 To share your course with others Select the existing course, go to the Admin area. Enable Course share code and a code will be generated. Copy to your clipboard and share out as required. In order that you can manage access you can disable the code and/or regenerate to create a new code and the original code can no longer be used. Restricting child courses from being cloned/shared \uf0c1 To restrict a course that is shared/cloned from a master course from being shared/cloned further, enable Course share code as above and enable Licensed When enabled you can also manage IP Consent by clicking the Manage IP Consent link offered. You should first create the content that you wish to display. You enter your text in the lower portion of the screen. You can use markdown or HTML to format your text. If you are not familiar with markdown, here is a reference for markdown: Daring Fireball - the author of markdown You can press the Save Draft button to save your changes and continue editing later. You can also Preview your changes to see how the rendered output appears. When you are happy you can then publish and then enable IP consent that will then require teachers to accept your terms Publishing and revisions \uf0c1 You need to publish your changes so that they appear to the student. You can create new versions over time. Earlier versions of the form can be recalled by selecting the version from the drop down list. Once you are happy with your text, you press the Publish new version button. Please note: Child courses created from licensed master courses cannot be shared/cloned and the content cannot be added into other courses/modules or as assignments The ability to enable/disable course share code is restricted in such child courses Cloning a Course \uf0c1 You can clone an existing course to create a new course in 2 ways Sign in to Codio at www.codio.com Either: 1. Click the 3 blue dot menu item shown on the main course dashboard and select Clone Course or Select the existing course, go to the Admin area. Click the Clone Course button at the bottom of the page. Complete the details requested for the name of the new course, then click Create Course . Your new course will appear in your Courses area. Please note, students in the existing course will not be added to the new course. Working with Master/Child courses \uf0c1 Where you have cloned a course or created using a share code, there will be a relationship between the original (Master) course content and the clone (Child) course content so that if you have need to edit/update an assignment in the master course these changes can be pulled into the child courses. After publishing the updates from the original course, you can send notifications so that teachers (not 'read only' teachers) in the course will see a banner advising them of the available updates. Updating and sending notifications to child courses \uf0c1 To send notifications, go to the Admin tab and select Send New Notification where you can then enter a notification message to assist teachers in the child course to understand what changes have been made available and can be updated This message can include details of all the changes made in each assignment or just be a summary. If a summary used and the teachers in the child course wish to check the changes made for individual assignments, they can pull the assignments to review the information entered in the publish assignment changelog The history of all notifications sent for published updates in the master course can be seen selecting the View Sent Notification Where notifications have been sent, teachers will then see an icon on the course view and when accessing the course, details of the notification changes available in the associated child course Clicking on Show Changes will then show details of the assignments updated tagged with the parts of the assignment that have been updated Clicking on the ? for updated part will show information on the meaning of the tags Clicking on Update History will show the notification message sent for that update Select the assignments you wish to update and Apply . A confirmation dialog will be shown for you to confirm you wish to update the assignments Updating and not sending notifications to child courses \uf0c1 After publishing the update from the original course, go to the cloned course where (in 'edit' mode) you will see the option to Pull for the individual assignments. Details will be shown of the update published in the original course to allow for confirmation and on acceptance the update will be pulled in to the assignment in the cloned course. You can also Pull All to pull all updates available for each module but be aware this will not show you the details for each updated assignment. To see this information, use the individual Pull for the assignment. The option to pull at the module or individual level will only be shown if an update to the assignment has been published in the original course. Adding new assignments from Master to Child courses \uf0c1 Having added and published a new assignment to a master course you can add this into child courses and allow future updates to be pulled as above. Go to the child course, select the module and click on the + Add assignment and select Existing Select the master course and module and select the assignment(s) to be added to the child course. The assignment in the child course will automatically be published. Reverting to an earlier version \uf0c1 You can revert to earlier published versions, see Revert to earlier versions Searching and ordering courses \uf0c1 Courses are shown grouped together by their creation date with the most recently created first. The grouping intervals are Sep-Dec - Autumn Jan-May - Spring Jun-Aug - Summer Ordering courses within their groups \uf0c1 Courses can be ordered by Name, Created Date, Student Count or Start Date within the groups Searching \uf0c1 If you have a large number of courses, you can also search by Name, Created Date, Student Count or Start Date. Select the appropriate option and simply start typing, whereupon Codio will search within all course names and filter your list accordingly. Add as a Tab \uf0c1 You can then 'Add as a Tab' to save the search parameters and in future quickly access them by clicking on the tab that will be created for you. Archiving Courses \uf0c1 To help manage the number of courses visible to teachers they can be archived so they no longer show on the active screen for teachers and in the students dashboard the course will show as archived and their assignments will be read-only. Go to the 3 blue dot menu and select 'Archive Course'. You will then be prompted to confirm your action by typing in a phrase 'make-read-only' Archiving a course does not effect students being able to see their grades/feedback but they will not be able to continue working on assignments. They are not deleted and can be unarchived at any time in the future if they are required either by clicking on the course in the archived tab or from the 3 blue dot menu and selecting 'Unarchive Course' Adding teachers to a course \uf0c1 Your course may be taught by more than one teacher. If this is the case, you can add another teacher to your Codio course in the following way: From the Courses area, click on your course to open it. Click on the Admin tab, centre right near the top. Find the Teachers area on the left, and then click Edit . Click Add Teacher Search for the teacher you want to add, then click done. The teacher should then appear in your teacher list for that course. If you wish the teachers to be restricted to only viewing the course but not to be able to add/edit/change the course content, you can do so checking Add this teacher as read-only option. If needed to be changed later, this can be done toggling the Read Only switch. With this enabled, these teachers will not be able to switch into Edit mode. Click Done to save your changes. If the teacher is not a member of your Organization, you can send them an invitation email. An email will be sent to your colleague containing a link where they can sign up for a Codio account and on completion they will be added into your organization and course automatically. If you wish the teachers to be restricted to only viewing the course but not to be able to add/edit/change the course content, you can do so checking Add this teacher as read-only option. If needed to be changed later, this can be done toggling the Read Only switch. With this enabled, these teachers will not be able to switch into Edit mode as above. Teaching Assistants \uf0c1 Teaching assistants can be invited into courses by sending then the invitation email and they will then be able to switch between being a teacher and student. When they are in teacher mode they will see all the courses in which they are set as a teacher and when in student mode will see all the courses in which they are set as a student. Enabling teachers to be student in a course \uf0c1 If a teacher wishes to be a student in a course that they are already a teacher in, this can be done by using the Student Invite URL that can be found on the course admin tab. Enter that into the browser and it will add them into that course as a student. Add students to a course \uf0c1 Video: Adding Student and Test Students You can add students to your organization and your course easily by giving each student a unique two-word phrase called a token or by giving them in Student Invite URL. A student will enter the token and will automatically be added to the your organization and the correct course as they complete the process to create a Codio account. To do this follow the steps below: From the Courses area, click on your course to open it. Click on the Students tab, top centre of your screen. Click on the Add a student button. You can then send the 2 word token to your students or send them the Invite URL to join the course or you can add the Test students to your course. We recommend you use the Invite URL to avoid students going through the process to create a new organisation where they may click on the Free Trial button in error. There maybe a delay in us being able to get back to them to advise them of the correct steps to take but if you use the Invite URL, they should be able to get started a lot quicker. If using the token then ask them to go to https://codio.com/p/join-class or select the Join Course button on our main website. They should enter the token when requested and proceed to register for a Codio account. If using the URL, the students can just click that and proceed as above. To view the students in your course, select the course and the Students tab once again. You will see a list of students who have successfully completed the sign-up process. Please note: If your course is LTI enabled, students cannot be added this way to avoid them having duplicate accounts with different registered email addresses. They do so by logging into the LMS and when accessing an assignment an account will be created for them. See [Single sign-in and account creation]{/courses/lti1_0/#single-sign-in-and-account-creation). Change student passwords \uf0c1 You can change a student's password in the following way: From the Courses area, click on your course to open it. Click on the Students tab, top centre of your screen. You will see all students in your course displayed on this screen. Find the student whose password needs to be changed and click on the blue triple dot icon to the right of their name. Choose Change student's password and follow the steps to reset. Remove a student from a course \uf0c1 From the Courses area, click on your course to open it. Click on the Students tab, top centre of your screen. You will see all students in your course displayed on this screen. Find the student that you want to remove from the course and click on the blue triple dot icon to the right of their name. Choose Remove student to take them out of the course. (Note: this does not remove your student entirely from your organization - if you wish to do this, see Remove Members ) Deleting a course \uf0c1 A course can be deleted by course teachers and organization owners. All the course data can also be exported. See Export course data for more information Select the course, go to the Admin area and then press the Delete Course button. You can delete just the course or you can also delete the course AND remove the students from your organization as well. If you select the option to Delete the Course and Students and any of the students in this course are also members in other courses, they will not show in the list of students. They will not be removed from the organization or from other courses they are also members of. The option Delete Course Only will just delete the course but not remove any students. Organization owners are able to view a list of any members that are no longer members of any courses and remove any users from the organization. See View organization members for more information. Exporting course data \uf0c1 Course Data \uf0c1 Course data (including students workspaces) can be exported. We would recommend the data is exported before you Delete a Course Select the course, go to the Admin area and then press the Course Data button. All the data from the course will be compiled into a zip file in the background and when ready an email will be sent to you with a link for you to download. The link will be active for 7 days and after this time the zip file will be removed You can also access any active files to download (and generate a new export if required) by clicking on the Course Data button Individual assignments data can also be exported separately if required. See managing assignments for more details If your course is LTI enabled you can also download all the unit LTI intergration URL's in a csv file. See Exporting LTI settings for more information. User Access Data \uf0c1 Use this to download a CSV of user access to assignments in the course. Details include Username Users registered email address First name Last name Date/time when user logged in Access type (Log In, Log Out, Project Open, Project Close) Assignment name (n.b Book based assignments will report the name of the book) Role in course (ie Teacher/Student) Project path IP address (IP address associated with login session) Select the course, go to the Admin area and then press the Export User Access Data button. Collection and storage of this data will be retained for maximum of 6 months. PDF \uf0c1 Use this to obtain PDF versions of the guides content in your assignments. When selected, a dialog shows allowing you to select the assignments to obtain the PDF version You can select a single PDF where all selected assignments are compiled into one PDF file or to receive a PDF for each selected assignment The link will be active for 7 days and after this time the file will be removed. Autograde Notification Failure \uf0c1 Where autograde scripts are implemented, Codio can send email notifications of such failures to the teachers in the course. By default, all teachers in the course will receive them but you can change this to either: Off - no notification emails will be sent Teachers - all teachers in the course will receive the notification email (default) Custom - where you can enter specific email addresses to receive the notifications (one entry per line) LTI Settings \uf0c1 For more information see Exporting LTI settings Working with student workspaces \uf0c1 If in the future you have need to review any students workspace, these can be imported back into your Codio account. Simply 'zip' up the folder and you can then import the project into your account. See creating and importing a project for more information. Please note, the stack used in the original workspace is not included in the exported workspace so if you need to 'run' the project you should select the appropriate stack when importing the project or by switching the stack, either from the gear icon in the main projects listing or by going to Project->Stack->Settings in the project Course contact url \uf0c1 Contact URL's can be set at the course level so if you have specific areas/forums for your courses for students to raise questions, you can set the contact URL's there and it will override the organisation contact url if set. You can set as many options as you require and also define the default option that will be checked automatically for the students. Students will then be shown all the options in addition to contact Codio directly if they have a problem accessing the Codio platform, or loading a assignment. Select the course, go to the Admin area and Edit Details where you can then enter the text and URL's to direct students to when they use any of the Contact us options. N.B. \"Teacher\" accounts will not be effected by this setting and they will still be able to contact Codio in the usual manner. See Support for more on this LMS shared feedback \uf0c1 If your organisation uses an LMS, when grades are released a URL is passed to the LMS grading area where students/teachers can access the grading information for the assignment. By default, only the course teachers and the individual student can access the grading preview but by enabling the LMS shared feedback option, this will pass a different URL back to your LMS system where anyone who knows the URL can access the students grading information Grading rubric templates \uf0c1 The Grading Rubric feature provides a two dimensional grid that provides grading guidance for manually assessing a coding project. Grading Rubric templates \uf0c1 You will only have access to this feature if you are a member of the owners group or a teacher. To find the grading templates screen, click on your user name from the Codio dashboard and then select your organization name. You should see a Grading Templates tab item. There will be fewer tabs visible if you are not an organization owner. Click the New button in the to right to create a new template. You should then add rows and columns. Rows : a row addresses a single assessment criterion. Each row has a weighting % value that you should supply. All rows must add up to 100%. Columns : each column contains a score that you can freely assign. Typically, you would have a 0 value in the first column that corresponds to a complete failure to address the criterion. The remaining columns contain a range of values that you choose with the right most column being the score for fully meeting the assessment criterion. Please read the following paragraph before choosing column values. Calculation of scores \uf0c1 When you are grading student code, the grading rubric will appear and is clickable. Points are awarded according to where you click. Codio will then weight the scores according to the weightings that were provided for each row. A final score is calculated based on your selections and is re-based to the maximum column value. You should be aware of this when choosing your column values. If you wanted your scores to calculate directly to percentages then you should choose a maximum value of 100 with other column values distributed between 0 and 100. Applying a grading template to an assignment \uf0c1 To use a grading template you should select the course so you see the full assignment listing. Go to the Edit tab, select Settings and scroll down to the Grading Weights from the list, select Teachers Grading , enable Rubrics and choose the grading template from the list. If there are no templates set up, follow the link to the organisation area to create a new template. See Grade weights for more information on grading weights Grading student work \uf0c1 You perform the actual grading from the course. Teachers Grading needs to be enabled before teachers can grade. See the grading process for more information. Select an assignment to grade so you see the students listed. You can then grade in the usual two ways. either from the student course. With an assignment selected from the course, you click the grading box for the student and then the grading dialog appears. Press edit and click within the grading field and the template appears. or from with a student's code, select the Education->Grading menu item to bring up the same grading dialog. You can then click within the template to assign a score for each criterion. Large cells are partially collapsed but will maximize when you click within the row. The score is calculated as you click. If you have enabled a grading rubric template , clicking in the 'grade' field will pop up the rubric It is important that you click the Apply button to save the score correctly. Anonymous Grading \uf0c1 Anonymous grading can be set for the course so that students will not see the names of the teachers who graded their work. The teacher names are not shown for the grades and code comments with the setting: in the shared feedback, in the project and dashboard for the user who started the graded assignment, regardless of their role. These users see their own names for their comments. To enable this go to the Admin tab for the course, Edit Details , enable Anonymous Grading and Save for the changes to be applied Gigaboxes \uf0c1 A Gigabox is a box that has a higher memory allocation than the standard Codio boxes. The default memory allocation is 512MB, which is fine for most applications. If you need your students to have more memory then we offer 1GB, 2GB, 8GB,16GB and GPU (for GPU-accelerated instances) boxes. These need to be purchased separately and you can add any number of either box size to your organization. You will need to specify the Gigabox size and then each student accessing the assignment will have a Gigabox for that assignment. You can set the required Gigabox in your project or assignment in the course module and this setting will be automatically applied to the assignments as you add the module into a course. If students have already started the assignment, the gigabox settings will be applied to their assignment when they next run the assignment. You should be aware that if you do not have enough Gigaboxes in your organization then they will be allocated on a first come, first served basis. Students who access the assignment after your Gigabox limit has been reached will see a warning. An organization owner can see the status of the Gigabox count in the organization settings screen. Assign a project to the course \uf0c1 In Codio, a teaching assignment is a project that has been assigned to a course. The scope of an assignment is entirely up to you but it could be a project assignment that a course works on. It could also be some tutorial content built using Guides. We generally recommend that it relates reasonably closely to a lesson or two. But if you prefer and it suits your structure better then you can assign as much or as little content to a Unit as you like. There are two ways you can assign an assessment to a course. Assign a project \uf0c1 The simplest and quickest thing you can do is to assign one of your projects to a course. Once assigned, we refer to it as an assessment but the assessment's source is simply a project. With the course selected, click on the Assessment tab at the top of the page. The list will be empty at this point. Now click the + button in the top left. Select Empty Module and create a new module. When created click Add Assignment and then select Project Based From here you can either start creating a new project or import projects in. To import an existing project see: Then select Copy Project and your project will show. If you have other projects in your My Projects area you can browse to select one of them. At this point you can set the name of the assignment (by default it will be the name of your project with 'copy' appended) and add a description if you wish. When ready, click the Create button and the assignment will be added to the course module. To create a new assignment, select your starting point (the stack you wish to start from) and you can create your assignment. For more information on authoring your content, strategies etc, see creating course content For the assignments to be visible to your students, you need to Publish the assignment. To publish your assignment, either press the Publish button visible in the assignment or go to Education->Publish Assignment Any changes you make in future to assignments will not be visible to students until you publish again. Details of previously published versions is available in the log area. At this point, we take a snapshot of your source project, ready for the students to clone when they start the assignment. Any changes you make to the source project will not be reflected automatically in the student assignment. Once assigned to the course, each student will be able to access the assignment from their dashboard. Go to the Students tab and login as one of the test students. Make sure you have the correct course and module selected form the dropdowns. You will now see the assignment in the list. If you don't, make sure the module dropdown has the correct module name selected. You can then switch back to your teacher account. Assign existing modules to the course \uf0c1 You can assign existing course modules and all of its assignments to your course with a single action. To assign an existing course module, follow the steps below: From the Courses screen, click on your course to open it. Click on the New Module button, and choose Add Copy from Existing . Choose the course you want to copy the content from and select the modules you wish and click Select The module will appear in your course. To add Codio resources to your courses see Creating from Resources Removing course module from a course \uf0c1 You can remove course modules from a course selecting the Delete button You can also remove individual assignments from a module, clicking the Delete button for that assignment Warning Deleting a module or assignment from your course also removes all student data for all the assignments in the module (including assessment data and results) and cannot be restored so you may wish to Download CSV before removing the module or assignment. Updating courses \uf0c1 Updating assignment content \uf0c1 It is recommended that you connect your assignments to a remote repo (GitHub/BitBucket etc) where you can push your work. As well as giving you full versioning control it also allows you to easily update assignments where you may use the same content in different courses as you can make the changes in one assignment, push to the repo and then pull in the changes to the other assignments to publish. Where you have courses that do not have a relationship (see Working with Master/Child courses ) this will allow you to easily update all courses where an assignment has been updated in one course. collaborate with colleagues who can create their own 'project' by importing from the repo and push their changes to the repo for review before they are pulled into the course assignment and published Please note the code workspace can be updated with new files added but existing files will not be updated as this can invalidate work for students who have already started the assignment. Any students who haven't started the assignment will see the updated content but for those that have already started the assignment they will not. To enable students who have started the unit to see the new content, the assignment can be Reset (see Actions Area Settings for more information) but be aware that any existing work they may have done will be lost. Updating Stack \uf0c1 If changes to the stack used in the assignment are required, when completed (and tested) remember to update your stack before publishing. Either create a new version of the stack if you have permissions or create a new stack. See Modifying a stack for more information. Most assessment changes can be safely upgraded but if you have altered the structure of a question (for example multiple choice changed from single response to multiple response) then student response data can be invalidated. Any changes to guides content can be applied. You should be careful about making major structural changes as students who have already started the assignment could be confused. The code workspace folder will not be impacted, so any student work in this folder will not be impacted. Test students \uf0c1 Codio automatically creates 3 test students for you. This allows instructors to view the student experience when assignments are assigned to courses even if your course is integrated with an LMS They can be seen in the members section. If there are not 3 student listed then you can regenerate them from this screen. You can log in as the student here by clicking the Login as button: Or you can also log in as the student within a course as well: You can switch back to teacher mode by clicking Switch back to teacher account . Excluding Files \uf0c1 Files/folders may need to be excluded from students assignments. Such files may be unused resources/logs and other files used when testing the assignment prior to publishing. This can be handled by using .unitignore file in the source project and when published to a course, these files/folders will not be available to the students. Enter on a new line the file/folders to be excluded defining them relative to the location of the .unitignore file and defining folders with / For example if the .unitignore file is located in the project workspace and you wish to exclude testing & node_modules folder the file checkscore.js in the views folder the files app.js and README.md the .codioignore file will be /testing /node_modules /views/checkscore.js app.js README.md Managing Assignments \uf0c1 On the module assignment screen you can manage the following settings Change the name of the module Change the name of the assignment View the version history of the assignment publications, This allows you to view the version history. You can see date/time when the assignment was published, name of the person who published the assignment, the name and version of the stack assigned to the assignment. Delete the individual assignment from the module. You are required to enter a confirmation code to proceed and you can then do one of the following Select Convert content to a project to delete the assignment and save the assignment contents to your projects list. Select Delete content to delete the assignment and its content entirely. Delete the entire module. You are required to enter a confirmation code to proceed Reorder the modules in the course. Duplicate the assignment You can also change the order of the assignments within a module by dragging an assignment into its desired position in the list. Video: Rearranging and Deleting Assignments When on the Edit tab you can: Pin the assignment Amend the Unit Duration of the assignment See at a glance how many students have started and completed the assignment Release the grades View Insights for the assignment Access the assignment settings From the 3 blue dot menu area you can: Run the Plagiarism Checker Download CSV with student grade data for the assignment Export assignment data. This allows you to export all the data for the assignment, including the students workspaces. All the data from the course will be compiled into a zip file in the background and when ready an email will be sent to you with a link for you to download. The link will be active for 7 days and after this time the zip file will be removed. All the data from all the courses/modules/assignments in the course can also be exported. Assignment Settings \uf0c1 Click on the settings icon to view the assignment settings Assignment Settings \uf0c1 Available from the Settings area. Pin/unpin units \uf0c1 This allows you to pin or unpin an assignment. Pinning an assignment ensures that the assignment is shown in a large box at the top of the student dashboard. You would typically pin an assignment if this is the assignment you are currently teaching. When you have finished teaching it, you would unpin it. You should not have more than four assignments pinned. Disable/enable assignment \uf0c1 You can enable or disable assignments that have been assigned to a course. This is useful when your students are working in controlled assessment conditions and you only want them to have access to their work within a prescribed timeframe. For book based assignments, you should be aware that if another assignment gives access to the book then students can access the book. and if the student is able to access the terminal window or see the file tree then access to areas that you intend to be disabled cannot be guaranteed. For project assignments and normal projects, preventing access can be guaranteed. Visibility on completed \uf0c1 You can specify the students ability to access the assignment when completed. Not available for book based assignments 'Read Only with Resubmit' will allow students access the assignment in read only mode, but also to change the status of their assignment from completed to not completed regain full access and re-submit their work again. Any assessments that are not limited to 'one attempt only' can also be submitted again. 'Read-Only' will allow students to access their assignment but not make any changes. 'No Access' will not allow the students to access their assignment. Visibility on disabled \uf0c1 You can specify the students ability to access the assignment when disabled. Not available for book based assignments 'Read-Only' will allow students to access their assignment but not make any changes. 'No Access' will not allow the students to access their assignment. Disable Mark as Completed \uf0c1 Disabling will not allow students to mark the assignment as completed. If assignments in your course are of a \u2018playground\u2019 type where you allow students to experiment with their code, this can be useful to disable to avoid them completing the assignment in error and then having to ask the teacher/instructor to change the status back so they can continue working. If your assignment contains guides content, you should also disable the option to show Mark as Completed button in guides Reset Assignment by Student \uf0c1 You can allow students to be able to reset their assignments in the course to start again. All work they may have done will be lost. When enabled, students can reset their completed assignments either from the Education -> Reset Assignment menu option or selecting the Reset Assignment button offered to them in the pop up message Unit duration \uf0c1 You can specify a start and a stop date and time for an assignment. The assignment will be disabled prior to the start date at which point it becomes available to students in their dashboard. Video: Setting Due Dates and Late Work Penalties Once the stop date and time is reached you can set the assignment to be marked as complete and/or disabled. If you elect to disable access, then depending on your disabled assignment settings students will either be refused all access or can have read-only access to the assignment. Please note, that selecting mark as complete will not stop students who have not started the assignment from being able to access the assignment after the stop date/time has been reached. If you wish to manage this, look at using the disable assignment and mark as complete option. For book based assignments, you should read the caveats mentioned in the Disable/enable assignment section above. For more information on using Mark as complete please click here . You can also set up Notification emails to be sent to the students where they have either not started or completed an assignment before the end time and if penalties applied (see below) email notifications can be sent before penalties apply Penalties \uf0c1 If applying penalties for late submission it is recommended that you set the end date/time for the assignment to the last date/time of your penalties. You can set the penalty date/time after the assignment end date/time but for students to then be able to work you will need to change the individual students assignment status from Completed and also adjust the deadline for each of them. Time Zones The time zone is taken automatically from your browser, so please check your time settings are correct. Set assignment penalties \uf0c1 You can specify penalties in the event that students do not complete the assignment within agreed timescales. Incremental penalties can be applied if required. Each row in the table will contain the following fields : Number (auto-incremental) Date Time Penalty % (The % of the total score for the assignment to be deducted as a penalty) Message (If the message field is not specified, then a default message will be generated - see below) Default Messages: \uf0c1 1: If a student opens a project after deadline or the student is working in the assignment when deadline is reached Deadline X (the table row number) has been reached. This deadline carries a penalty of Y%. You can review your answers with no penalty. However, if you decide to change any answers by pressing the Modify button beneath a question, a Y% penalty deduction will be applied to your overall results. Once a modify button has been pressed once, the penalty deduction will be applied and you will be free to modify as many questions as you like with no additional penalty 2: If a student presses a Modify button past a deadline Deadline X (the table row number) has been reached. This deadline carries a penalty of Y%. If you proceed, a Y% penalty deduction will be applied to your overall results. You will then be able to modify as many questions as you like with no additional penalty 3: Final deadline (assignment end date) Once the final deadline hits (if one is set), the assignment will be forced to read-only and then following message will be displayed to the student : You have exceeded the final deadline. You are no longer able to make changes to your answers. You are free to review your answers. Teacher/Instructors Dashboard: \uf0c1 Penalty indicator: If a penalty was applied then the grade field will have a light red background. This should be the case even if no grade has been calculated yet. Hover above the field to see the penalty details (#, date/time, penalty %). Final grade field: this field will show the final graded score less any penalty deduction. If the field is overwritten by the teacher/instructor, then the penalty deduction will not be applied. Adjusting deadline for individual students \uf0c1 The set deadline(s) can be adjusted forward by a number of days if required for individual students. Select the assignment from the course assignments list and click on the 3 blue vertical dots and select 'Adjust deadline' You can then adjust the deadline forward by as many days/hours/minutes as you require. If a deadline is already set, you can remove it When applied, the adjustment will then show next to the grade field in the teacher/instructors dashboard. The deadline in the image below was adjusted by 4 days Exam Proctoring \uf0c1 Where you can enable various options to help support running an assignment in exam conditions Time Limit - when enabled assignments will be marked as complete after the indicated amount of time has passed since the student started the assignment or the End Time of the assignment is reached, whichever is first. Students can be granted additional time if required. Select the 3 blue dot menu for the students assignment and Extend Time Shuffle Question Order - when enabled, each student will receive the pages of the assignment in a random order Forward Only Navigation - When enabled, navigation buttons and menus that allow students to re-visit questions will be hidden so students can only go forward through the pages. If any assessments on a page are unanswered, a pop-up dialogue will encourage students to review the assessment on the current page before proceeding to the next page. Single Login - Once a student has started this assignment, until they mark it as complete, all other account login attempts will be blocked. As students start the assignment, they will be advised that it is restricted to single login and to ensure They have closed other tabs or browsers with Codio open They have a stable internet connection They have enough power in their device They have plenty of time to complete the assignment If students attempt to access the assignment from a different IP address or browser, they will be restricted and advised to contact their course instructor/professor for assistance. If students try to logout of Codio before the assessment is fully completed, they will be advised if they continue they will not be able to access it again. Instructor/Professors will be able to release the lock for the individual students if they feel it is appropriate. Either go to the students tab in the course, find the student and go to the 3 blue dot menu where you will see the option to release the lock or when in the assignment, on the student tab there, also on the 3 dot blue menu Grade Weights \uf0c1 Where you can enable/disable Teachers Grading, Assessments Grading, Script Grading, set the grading rubric to use for the assignment and manage the weighting for all/any grade options you have enabled. Video: Combining Grading Sources These are relative weightings against all 3 grade options. You can set any number for these. For example, if the teachers grading has weight 2 and assessments grading has 1, that means the final grade will be calculated like (teachersgrading_points * 2 + assessmentgrading_points * 1) /3 . If you have only one option enabled 100% of the points of the enabled grading will go to the final grade. Teachers Grading \uf0c1 Where you can set a Grading Rubric Template to use with an assignment and set the weighting for this. Assessments Grading \uf0c1 If your assignment includes assessments this will be enabled by default. If you do not wish the results of the assessments to be included in the grading you can disable this. You can also set the weighting for this. Script Grading \uf0c1 This allows you to specify an auto-grade script that should run when the assignment is marked as complete. The default setting ensures that any grades generated from auto-graded assessments and grades from free text assessments are automatically transferred into the grading field. You can also set the weighting for this. An assignment is marked as complete in any of the following ways Students mark the assignment as complete from their dashboard. The teacher can also mark the assignment as complete for a student from the Course dashboard with the assignment selected. The teacher can mark all assignments as complete for all students by pressing the Actions button. This button appears on the assignment screen. If you are using the Assignment Duration feature, all student assignments are marked as complete as soon as the assignment duration expiry date and time is reached. Running an auto-grade script \uf0c1 To populate the grading field, you write your own custom script that evaluates the student code. This script can then transfer the grading value into the grading field. If you are using an LMS platform with Codio then be sure to write a percentage value into this field to maintain compatibility with LMS gradebooks. This grading field is then transferred into your LMS gradebook once you release the grades . Secure scripts \uf0c1 If you want your scripts to run securely such that the student has no way of either viewing the script or viewing other files that might contain secure data then you should place those scripts and files in the .guides/secure folder. Codio ensures that only the original project author is able to access this folder but when it is assigned to Students as an assignment, it is not accessible in any way and the script runs in an ephemeral container isolated from the students assignment. Timeout \uf0c1 Your script must execute within 3 minutes or a timeout error will occur. Accessing authored content assessment results \uf0c1 You are able to get scores attained by students in authored content based autograded assessments. This data is in JSON format and can be accessed from the CODIO_AUTOGRADE_ENV environment variable. Below is an example. { \"assessments\": { \"stats\": { \"total\": 2, \"answered\": 2, \"correct\": 2, \"totalPoints\": 12, \"points\": 8 }, \"info\": [{ \"name\": \"Test 1\", \"points\": 5, \"answer\": { \"correct\": true, \"points\": 5 } }, { \"name\": \"Test 2\", \"points\": 7, \"answer\": { \"correct\": true, \"points\": 3 } }] }, \"completedDate\": \"2017-02-07T09:47:54.471Z\" } You can get both summary data and data for each assessment individually. Participation Grading \uf0c1 Participation grading can be enabled if required. To enable this: Add the script below as .py file to .guides/secure folder import os import json # import grade submit function import sys sys.path.append('/usr/share/codio/assessments') from lib.grade import send_grade env = os.environ.get('CODIO_AUTOGRADE_ENV') parsed = json.loads(env) answered = parsed['assessments']['stats']['submitted'] total=parsed['assessments']['stats']['total'] grade=answered*100/total res = send_grade(int(round(grade))) exit( 0 if res else 1) Add the file to Education> Test Autograde Script Go to the assignment settings, enable Script Grading set to that file and disable Assessments Grading Regrading for an individual student \uf0c1 If students set their work to 'complete' such that the custom script step is triggered then you can regrade the work by resetting the complete switch and then setting it again, which re-triggers the custom script. Regrading all students \uf0c1 From the Actions area of the assignment, you can regrade all students that have already been auto-graded by pressing the Regrade All button. This is useful if you have found a bug in your grading script. If you follow (or use) the code sample shown at the bottom of this page you can see how the original student submission date is handled. Testing and debugging your grading scripts \uf0c1 IMPORTANT : please read this section carefully. We provide a way of testing autograding scripts when authoring your project. This is described below. You should make use of this before publishing your project to a course. You should be aware that once the assignment has been published to the course, any changes made to the assignment's source project are not automatically reflected in the published assignment. As a result, if you include your main grading logic within the project itself and if that script has bugs, you will not be able to fix the bugs without deleting the assignment, fixing the bug and finally republishing the assignment. All student data will be lost as a result. However, if all your scripts are stored in .guides/secure folder, you can update and test them and you can then publish the new version. Another strategy is to use a simple bootstrap launcher that loads and executes the script from a remote location that you can edit and debug independently of the Codio box. The following example bash script shows a Python script that is located as a Gist on GitHub. This script might be called .guides/secure/launcher.sh . #!/bin/bash URL=\"https://gist.githubusercontent.com/MaximKraev/11cd4e43b0c43f79d9478efbe21ba1b9/raw/validate.py\" curl -fsSL $URL | python - $@ It is important that it is located in the .guides/secure folder. You then specify the full filepath .guides/secure/launcher.sh in the Set custom script path field in the assignment settings. You are now free to debug the Python script and fix any bugs that you may have noticed once students have started work on the assignment. Testing your script in the IDE \uf0c1 We provide the ability to test your autograding script from the Education -> Test Autograde Script menu. This option lets you specify the location to your autograding script and run it against the current project contents. It also lets you simulate scores attained by any autograded assessments located within the Codio Guide and select which autograded assessments to test. You should be aware of the following points. When you press the Test Script button all output to stdout and stderr are displayed within the dialog the grade as returned by your test script is at the bottom of the output section stdout and stderr output is not available when running for real (not in this test mode) as the autograding script runs invisibly when the assignment is marked as complete. As such, you should generate output for testing and debugging purposes only. If you want your script to provide any feedback to the student, then you should output it to a file that the student can access when opening the project at a later date. In this case you will need to allow read-only access to the project from the assignment settings after being marked as complete. Your script must execute within 3 minutes to avoid a timeout error. If the Guide has autograded assessments then the test takes its data from the fields shown in the dialog. All of your assessment settings are accessed as described above under Accessing Guide assessment results . Example Python grading script \uf0c1 Below is an example Python file that might be loaded by the bootstrap script above. Notice that the only code you need to modify is near the bottom. The other functions are helpers and can be used for any test in any assignment. import os import random import requests import json import datetime # import grade submit function import sys sys.path.append('/usr/share/codio/assessments') from lib.grade import send_grade ################## # Helper functions # ################## # Get the url to send the results to CODIO_AUTOGRADE_URL = os.environ[\"CODIO_AUTOGRADE_URL\"] CODIO_UNIT_DATA = os.environ[\"CODIO_AUTOGRADE_ENV\"] def main(): # Execute the test on the student's code grade = validate_code() # Send the grade back to Codio with the penatly factor applied res = send_grade(int(round(grade))) exit( 0 if res else 1) ######################################## # You only need to modify the code below # ######################################## # Your actual test logic # Our demo function is just generating some random score def validate_code(): return random.randint(10, 100) main() Example Bash grading script \uf0c1 Below is an example bash script file that would be stored in .guides/secure folder #!/bin/bash set -e # Your actual test logic # Our demo function is just generating some random score POINTS=$(( ( RANDOM % 100 ) + 1 )) # Show json based passed environment echo $CODIO_AUTOGRADE_ENV # Send the grade back to Codio curl --retry 3 -s \"$CODIO_AUTOGRADE_URL&grade=$POINTS\" Autograding enhancements \uf0c1 To provide instructors with more robust auto-grade scripts, you can also now Send back feedback in different formats HTML/Markdown/plainText Allow separate debug logs Notify (instructors and students) and reopen assignments for a student on grade script failure. To support this additional feedback, this URL (passed as an environment variable) can be used: CODIO_AUTOGRADE_V2_URL These variables allow POST and GET requests with the following parameters: Grade ( CODIO_AUTOGRADE_V2_URL ): 0-100 grade result Feedback - text Format - html|md|txt - txt is default if used (optional) Extra Credit - where extra credit points can be given to students (optional) If the grade is submitted to these urls script output is saved as debug log. If the script fails, the attempt is recorded, the assignment is not locked (if due date is not passed) and an email notification with information about the problem is sent to the course instructor(s) containing the debug output from the script. Example Python grading script \uf0c1 import os import random import requests import json # import grade submit function import sys sys.path.append('/usr/share/codio/assessments') from lib.grade import send_grade_v2, FORMAT_V2_MD, FORMAT_V2_HTML, FORMAT_V2_TXT def main(): # Execute the test on the student's code grade = random.randint(10, 100) # Send the grade back to Codio with the penatly factor applied res = send_grade_v2(int(round(grade)), feedback='Simple text here', format=FORMAT_V2_HTML, extra_credit=int(round(grade))) exit( 0 if res else 1) main() Example Bash grading script \uf0c1 #!/bin/bash set -e POINTS=$(( ( RANDOM % 100 ) + 1 )) curl --retry 3 -s \"$CODIO_AUTOGRADE_V2_URL\" -d grade=$POINTS -d format=txt -d feedback='Simple text here' -d extra_credit=$POINTS Actions area settings \uf0c1 Additional options are also available if you select the Actions button. Plagiarism checker You can run plagiarism detection from the blue dots menu on the assignment or the Actions area. Mark all as completed Certain actions can be triggered when a student marks an assignment as complete: Auto-graded assessment scores can be passed directly to the grade field and/or Scripts can be executed for assessing the student code and assigning the grade Students can mark the assignment as complete from their own dashboards but a teacher is also able to do this on their behalf either individually or for all students either by pressing the Marking All As Completed button to mark all student assignments as complete, hover over a student to see the switch appear to the left of the students name, which you can then activate or Accessing student work and going to the Education->Mark as Completed menu item within the IDE. Teachers can also mark complete assignments as incomplete for all students in the course or for individual students selecting the switch or by accessing their assignment. Unmark as complete Where the assignment can be marked as not complete for all students Download CSV This allows you to download a CSV file with student grade data for the assignment. Reset This option will destroy all student work. In the event that an assignment in your course is updated you can reset it so all students, including those who have already started the assignment, are updated with the new assignment. You can reset the assignment for all your students by selecting either the Actions button and then the Reset button or you can reset the assignment for individual students from the 3 blue dot menu Regrade completed This option should be selected if you are running an auto-grade script when the assignment is marked as completed and you want the script to be re-run. Release Grades By default, grades are not shown to students or transferred to the LMS gradebook if you are using LMS integration for a course. When you are ready to do so, you can select the option from here. Notification Emails \uf0c1 Automatic email notifications can be set up in your courses to send emails to your students. Go to the Notifications tab in your course to create notifications. Not available for Read only teachers in the course. Notification details \uf0c1 Not Started Assignment: you can schedule the notifications to be sent to all students in the course that have never opened the assignment that is due soon Incomplete Assignment: you can schedule the notifications to be sent to all students who have started but not finished an assignment that is due soon. Students that have also not started will also be notified New Feedback: the email notification will be sent when new feedback is available for the student Before \uf0c1 Due Date (before late penalties) where penalties deadlines are set and the End Time is set to the final date of completion, the Due Date is taken from the penalty deadline date End Date is taken from the End Time set for the assignment duration Reply to Email Address: enter an email address that students can then reply to if they have questions or require further assistance. Notification Template \uf0c1 We prefill a default title name and the body text including links (in the <<< >>> tags) that will assist the students. You may edit this as you wish. Supported tags Student name <<<student name>>> : Students name Assignment name <<<assignment name>>> : Assignment name Course name <<<course name>>> : Codio course name Course link <<<course link>>> : link to Codio course for non LTI and for LTI enabled courses the COURSE LMS URL Assignment link <<<assignment link>>> : link to students project (if the project is not started then the course link as above used) Feedback link <<<feedback link>>> : Link to assignment feedback Due In <<<due in>>> : when the assignment is due for completion relative to current date/time Please note: we have plans to develop this feature in the future but if you have ideas/suggestions please raise in our Feedback area.","title":"Understanding Courses"},{"location":"courses/classes/#creating-a-new-course","text":"To work with the course features in Codio you will first need to set up a course for your students. Sign in to Codio at www.codio.com If you are in the IDE, click the Codio icon in the top left corner to take you back to the Courses screen. If you are in the dashboard, click on Courses in the left menu. Click the New Course button at the top left of the page. Select Add Empty Course , complete the details requested, then click Create Course . Your new course will appear in your Courses area.","title":"Creating a new course"},{"location":"courses/classes/#creating-new-course-from-share-code","text":"You can create courses from a code other users in other organisations can share to you. A relationship between your course and those created using the share code will be established so any updates/changes you may make in your course content can be pulled in by the other users. See working with master/child courses below for more information Select the Add From Share Code option Enter the code given and complete all other details and the course will be created for you.","title":"Creating new course from share code"},{"location":"courses/classes/#sharing-your-course-with-others","text":"To share your course with others Select the existing course, go to the Admin area. Enable Course share code and a code will be generated. Copy to your clipboard and share out as required. In order that you can manage access you can disable the code and/or regenerate to create a new code and the original code can no longer be used.","title":"Sharing your course with others"},{"location":"courses/classes/#restricting-child-courses-from-being-clonedshared","text":"To restrict a course that is shared/cloned from a master course from being shared/cloned further, enable Course share code as above and enable Licensed When enabled you can also manage IP Consent by clicking the Manage IP Consent link offered. You should first create the content that you wish to display. You enter your text in the lower portion of the screen. You can use markdown or HTML to format your text. If you are not familiar with markdown, here is a reference for markdown: Daring Fireball - the author of markdown You can press the Save Draft button to save your changes and continue editing later. You can also Preview your changes to see how the rendered output appears. When you are happy you can then publish and then enable IP consent that will then require teachers to accept your terms","title":"Restricting child courses from being cloned/shared"},{"location":"courses/classes/#publishing-and-revisions","text":"You need to publish your changes so that they appear to the student. You can create new versions over time. Earlier versions of the form can be recalled by selecting the version from the drop down list. Once you are happy with your text, you press the Publish new version button. Please note: Child courses created from licensed master courses cannot be shared/cloned and the content cannot be added into other courses/modules or as assignments The ability to enable/disable course share code is restricted in such child courses","title":"Publishing and revisions"},{"location":"courses/classes/#cloning-a-course","text":"You can clone an existing course to create a new course in 2 ways Sign in to Codio at www.codio.com Either: 1. Click the 3 blue dot menu item shown on the main course dashboard and select Clone Course or Select the existing course, go to the Admin area. Click the Clone Course button at the bottom of the page. Complete the details requested for the name of the new course, then click Create Course . Your new course will appear in your Courses area. Please note, students in the existing course will not be added to the new course.","title":"Cloning a Course"},{"location":"courses/classes/#working-with-masterchild-courses","text":"Where you have cloned a course or created using a share code, there will be a relationship between the original (Master) course content and the clone (Child) course content so that if you have need to edit/update an assignment in the master course these changes can be pulled into the child courses. After publishing the updates from the original course, you can send notifications so that teachers (not 'read only' teachers) in the course will see a banner advising them of the available updates.","title":"Working with Master/Child courses"},{"location":"courses/classes/#updating-and-sending-notifications-to-child-courses","text":"To send notifications, go to the Admin tab and select Send New Notification where you can then enter a notification message to assist teachers in the child course to understand what changes have been made available and can be updated This message can include details of all the changes made in each assignment or just be a summary. If a summary used and the teachers in the child course wish to check the changes made for individual assignments, they can pull the assignments to review the information entered in the publish assignment changelog The history of all notifications sent for published updates in the master course can be seen selecting the View Sent Notification Where notifications have been sent, teachers will then see an icon on the course view and when accessing the course, details of the notification changes available in the associated child course Clicking on Show Changes will then show details of the assignments updated tagged with the parts of the assignment that have been updated Clicking on the ? for updated part will show information on the meaning of the tags Clicking on Update History will show the notification message sent for that update Select the assignments you wish to update and Apply . A confirmation dialog will be shown for you to confirm you wish to update the assignments","title":"Updating and sending notifications to child courses"},{"location":"courses/classes/#updating-and-not-sending-notifications-to-child-courses","text":"After publishing the update from the original course, go to the cloned course where (in 'edit' mode) you will see the option to Pull for the individual assignments. Details will be shown of the update published in the original course to allow for confirmation and on acceptance the update will be pulled in to the assignment in the cloned course. You can also Pull All to pull all updates available for each module but be aware this will not show you the details for each updated assignment. To see this information, use the individual Pull for the assignment. The option to pull at the module or individual level will only be shown if an update to the assignment has been published in the original course.","title":"Updating and not sending notifications to child courses"},{"location":"courses/classes/#adding-new-assignments-from-master-to-child-courses","text":"Having added and published a new assignment to a master course you can add this into child courses and allow future updates to be pulled as above. Go to the child course, select the module and click on the + Add assignment and select Existing Select the master course and module and select the assignment(s) to be added to the child course. The assignment in the child course will automatically be published.","title":"Adding new assignments from Master to Child courses"},{"location":"courses/classes/#reverting-to-an-earlier-version","text":"You can revert to earlier published versions, see Revert to earlier versions","title":"Reverting to an earlier version"},{"location":"courses/classes/#searching-and-ordering-courses","text":"Courses are shown grouped together by their creation date with the most recently created first. The grouping intervals are Sep-Dec - Autumn Jan-May - Spring Jun-Aug - Summer","title":"Searching and ordering courses"},{"location":"courses/classes/#ordering-courses-within-their-groups","text":"Courses can be ordered by Name, Created Date, Student Count or Start Date within the groups","title":"Ordering courses within their groups"},{"location":"courses/classes/#searching","text":"If you have a large number of courses, you can also search by Name, Created Date, Student Count or Start Date. Select the appropriate option and simply start typing, whereupon Codio will search within all course names and filter your list accordingly.","title":"Searching"},{"location":"courses/classes/#add-as-a-tab","text":"You can then 'Add as a Tab' to save the search parameters and in future quickly access them by clicking on the tab that will be created for you.","title":"Add as a Tab"},{"location":"courses/classes/#archiving-courses","text":"To help manage the number of courses visible to teachers they can be archived so they no longer show on the active screen for teachers and in the students dashboard the course will show as archived and their assignments will be read-only. Go to the 3 blue dot menu and select 'Archive Course'. You will then be prompted to confirm your action by typing in a phrase 'make-read-only' Archiving a course does not effect students being able to see their grades/feedback but they will not be able to continue working on assignments. They are not deleted and can be unarchived at any time in the future if they are required either by clicking on the course in the archived tab or from the 3 blue dot menu and selecting 'Unarchive Course'","title":"Archiving Courses"},{"location":"courses/classes/#adding-teachers-to-a-course","text":"Your course may be taught by more than one teacher. If this is the case, you can add another teacher to your Codio course in the following way: From the Courses area, click on your course to open it. Click on the Admin tab, centre right near the top. Find the Teachers area on the left, and then click Edit . Click Add Teacher Search for the teacher you want to add, then click done. The teacher should then appear in your teacher list for that course. If you wish the teachers to be restricted to only viewing the course but not to be able to add/edit/change the course content, you can do so checking Add this teacher as read-only option. If needed to be changed later, this can be done toggling the Read Only switch. With this enabled, these teachers will not be able to switch into Edit mode. Click Done to save your changes. If the teacher is not a member of your Organization, you can send them an invitation email. An email will be sent to your colleague containing a link where they can sign up for a Codio account and on completion they will be added into your organization and course automatically. If you wish the teachers to be restricted to only viewing the course but not to be able to add/edit/change the course content, you can do so checking Add this teacher as read-only option. If needed to be changed later, this can be done toggling the Read Only switch. With this enabled, these teachers will not be able to switch into Edit mode as above.","title":"Adding teachers to a course"},{"location":"courses/classes/#teaching-assistants","text":"Teaching assistants can be invited into courses by sending then the invitation email and they will then be able to switch between being a teacher and student. When they are in teacher mode they will see all the courses in which they are set as a teacher and when in student mode will see all the courses in which they are set as a student.","title":"Teaching Assistants"},{"location":"courses/classes/#enabling-teachers-to-be-student-in-a-course","text":"If a teacher wishes to be a student in a course that they are already a teacher in, this can be done by using the Student Invite URL that can be found on the course admin tab. Enter that into the browser and it will add them into that course as a student.","title":"Enabling teachers to be student in a course"},{"location":"courses/classes/#add-students-to-a-course","text":"Video: Adding Student and Test Students You can add students to your organization and your course easily by giving each student a unique two-word phrase called a token or by giving them in Student Invite URL. A student will enter the token and will automatically be added to the your organization and the correct course as they complete the process to create a Codio account. To do this follow the steps below: From the Courses area, click on your course to open it. Click on the Students tab, top centre of your screen. Click on the Add a student button. You can then send the 2 word token to your students or send them the Invite URL to join the course or you can add the Test students to your course. We recommend you use the Invite URL to avoid students going through the process to create a new organisation where they may click on the Free Trial button in error. There maybe a delay in us being able to get back to them to advise them of the correct steps to take but if you use the Invite URL, they should be able to get started a lot quicker. If using the token then ask them to go to https://codio.com/p/join-class or select the Join Course button on our main website. They should enter the token when requested and proceed to register for a Codio account. If using the URL, the students can just click that and proceed as above. To view the students in your course, select the course and the Students tab once again. You will see a list of students who have successfully completed the sign-up process. Please note: If your course is LTI enabled, students cannot be added this way to avoid them having duplicate accounts with different registered email addresses. They do so by logging into the LMS and when accessing an assignment an account will be created for them. See [Single sign-in and account creation]{/courses/lti1_0/#single-sign-in-and-account-creation).","title":"Add students to a course"},{"location":"courses/classes/#change-student-passwords","text":"You can change a student's password in the following way: From the Courses area, click on your course to open it. Click on the Students tab, top centre of your screen. You will see all students in your course displayed on this screen. Find the student whose password needs to be changed and click on the blue triple dot icon to the right of their name. Choose Change student's password and follow the steps to reset.","title":"Change student passwords"},{"location":"courses/classes/#remove-a-student-from-a-course","text":"From the Courses area, click on your course to open it. Click on the Students tab, top centre of your screen. You will see all students in your course displayed on this screen. Find the student that you want to remove from the course and click on the blue triple dot icon to the right of their name. Choose Remove student to take them out of the course. (Note: this does not remove your student entirely from your organization - if you wish to do this, see Remove Members )","title":"Remove a student from a course"},{"location":"courses/classes/#deleting-a-course","text":"A course can be deleted by course teachers and organization owners. All the course data can also be exported. See Export course data for more information Select the course, go to the Admin area and then press the Delete Course button. You can delete just the course or you can also delete the course AND remove the students from your organization as well. If you select the option to Delete the Course and Students and any of the students in this course are also members in other courses, they will not show in the list of students. They will not be removed from the organization or from other courses they are also members of. The option Delete Course Only will just delete the course but not remove any students. Organization owners are able to view a list of any members that are no longer members of any courses and remove any users from the organization. See View organization members for more information.","title":"Deleting a course"},{"location":"courses/classes/#exporting-course-data","text":"","title":"Exporting course data"},{"location":"courses/classes/#course-data","text":"Course data (including students workspaces) can be exported. We would recommend the data is exported before you Delete a Course Select the course, go to the Admin area and then press the Course Data button. All the data from the course will be compiled into a zip file in the background and when ready an email will be sent to you with a link for you to download. The link will be active for 7 days and after this time the zip file will be removed You can also access any active files to download (and generate a new export if required) by clicking on the Course Data button Individual assignments data can also be exported separately if required. See managing assignments for more details If your course is LTI enabled you can also download all the unit LTI intergration URL's in a csv file. See Exporting LTI settings for more information.","title":"Course Data"},{"location":"courses/classes/#user-access-data","text":"Use this to download a CSV of user access to assignments in the course. Details include Username Users registered email address First name Last name Date/time when user logged in Access type (Log In, Log Out, Project Open, Project Close) Assignment name (n.b Book based assignments will report the name of the book) Role in course (ie Teacher/Student) Project path IP address (IP address associated with login session) Select the course, go to the Admin area and then press the Export User Access Data button. Collection and storage of this data will be retained for maximum of 6 months.","title":"User Access Data"},{"location":"courses/classes/#pdf","text":"Use this to obtain PDF versions of the guides content in your assignments. When selected, a dialog shows allowing you to select the assignments to obtain the PDF version You can select a single PDF where all selected assignments are compiled into one PDF file or to receive a PDF for each selected assignment The link will be active for 7 days and after this time the file will be removed.","title":"PDF"},{"location":"courses/classes/#autograde-notification-failure","text":"Where autograde scripts are implemented, Codio can send email notifications of such failures to the teachers in the course. By default, all teachers in the course will receive them but you can change this to either: Off - no notification emails will be sent Teachers - all teachers in the course will receive the notification email (default) Custom - where you can enter specific email addresses to receive the notifications (one entry per line)","title":"Autograde Notification Failure"},{"location":"courses/classes/#lti-settings","text":"For more information see Exporting LTI settings","title":"LTI Settings"},{"location":"courses/classes/#working-with-student-workspaces","text":"If in the future you have need to review any students workspace, these can be imported back into your Codio account. Simply 'zip' up the folder and you can then import the project into your account. See creating and importing a project for more information. Please note, the stack used in the original workspace is not included in the exported workspace so if you need to 'run' the project you should select the appropriate stack when importing the project or by switching the stack, either from the gear icon in the main projects listing or by going to Project->Stack->Settings in the project","title":"Working with student workspaces"},{"location":"courses/classes/#course-contact-url","text":"Contact URL's can be set at the course level so if you have specific areas/forums for your courses for students to raise questions, you can set the contact URL's there and it will override the organisation contact url if set. You can set as many options as you require and also define the default option that will be checked automatically for the students. Students will then be shown all the options in addition to contact Codio directly if they have a problem accessing the Codio platform, or loading a assignment. Select the course, go to the Admin area and Edit Details where you can then enter the text and URL's to direct students to when they use any of the Contact us options. N.B. \"Teacher\" accounts will not be effected by this setting and they will still be able to contact Codio in the usual manner. See Support for more on this","title":"Course contact url"},{"location":"courses/classes/#lms-shared-feedback","text":"If your organisation uses an LMS, when grades are released a URL is passed to the LMS grading area where students/teachers can access the grading information for the assignment. By default, only the course teachers and the individual student can access the grading preview but by enabling the LMS shared feedback option, this will pass a different URL back to your LMS system where anyone who knows the URL can access the students grading information","title":"LMS shared feedback"},{"location":"courses/classes/#grading-rubric-templates","text":"The Grading Rubric feature provides a two dimensional grid that provides grading guidance for manually assessing a coding project.","title":"Grading rubric templates"},{"location":"courses/classes/#grading-rubric-templates_1","text":"You will only have access to this feature if you are a member of the owners group or a teacher. To find the grading templates screen, click on your user name from the Codio dashboard and then select your organization name. You should see a Grading Templates tab item. There will be fewer tabs visible if you are not an organization owner. Click the New button in the to right to create a new template. You should then add rows and columns. Rows : a row addresses a single assessment criterion. Each row has a weighting % value that you should supply. All rows must add up to 100%. Columns : each column contains a score that you can freely assign. Typically, you would have a 0 value in the first column that corresponds to a complete failure to address the criterion. The remaining columns contain a range of values that you choose with the right most column being the score for fully meeting the assessment criterion. Please read the following paragraph before choosing column values.","title":"Grading Rubric templates"},{"location":"courses/classes/#calculation-of-scores","text":"When you are grading student code, the grading rubric will appear and is clickable. Points are awarded according to where you click. Codio will then weight the scores according to the weightings that were provided for each row. A final score is calculated based on your selections and is re-based to the maximum column value. You should be aware of this when choosing your column values. If you wanted your scores to calculate directly to percentages then you should choose a maximum value of 100 with other column values distributed between 0 and 100.","title":"Calculation of scores"},{"location":"courses/classes/#applying-a-grading-template-to-an-assignment","text":"To use a grading template you should select the course so you see the full assignment listing. Go to the Edit tab, select Settings and scroll down to the Grading Weights from the list, select Teachers Grading , enable Rubrics and choose the grading template from the list. If there are no templates set up, follow the link to the organisation area to create a new template. See Grade weights for more information on grading weights","title":"Applying a grading template to an assignment"},{"location":"courses/classes/#grading-student-work","text":"You perform the actual grading from the course. Teachers Grading needs to be enabled before teachers can grade. See the grading process for more information. Select an assignment to grade so you see the students listed. You can then grade in the usual two ways. either from the student course. With an assignment selected from the course, you click the grading box for the student and then the grading dialog appears. Press edit and click within the grading field and the template appears. or from with a student's code, select the Education->Grading menu item to bring up the same grading dialog. You can then click within the template to assign a score for each criterion. Large cells are partially collapsed but will maximize when you click within the row. The score is calculated as you click. If you have enabled a grading rubric template , clicking in the 'grade' field will pop up the rubric It is important that you click the Apply button to save the score correctly.","title":"Grading student work"},{"location":"courses/classes/#anonymous-grading","text":"Anonymous grading can be set for the course so that students will not see the names of the teachers who graded their work. The teacher names are not shown for the grades and code comments with the setting: in the shared feedback, in the project and dashboard for the user who started the graded assignment, regardless of their role. These users see their own names for their comments. To enable this go to the Admin tab for the course, Edit Details , enable Anonymous Grading and Save for the changes to be applied","title":"Anonymous Grading"},{"location":"courses/classes/#gigaboxes","text":"A Gigabox is a box that has a higher memory allocation than the standard Codio boxes. The default memory allocation is 512MB, which is fine for most applications. If you need your students to have more memory then we offer 1GB, 2GB, 8GB,16GB and GPU (for GPU-accelerated instances) boxes. These need to be purchased separately and you can add any number of either box size to your organization. You will need to specify the Gigabox size and then each student accessing the assignment will have a Gigabox for that assignment. You can set the required Gigabox in your project or assignment in the course module and this setting will be automatically applied to the assignments as you add the module into a course. If students have already started the assignment, the gigabox settings will be applied to their assignment when they next run the assignment. You should be aware that if you do not have enough Gigaboxes in your organization then they will be allocated on a first come, first served basis. Students who access the assignment after your Gigabox limit has been reached will see a warning. An organization owner can see the status of the Gigabox count in the organization settings screen.","title":"Gigaboxes"},{"location":"courses/classes/#assign-a-project-to-the-course","text":"In Codio, a teaching assignment is a project that has been assigned to a course. The scope of an assignment is entirely up to you but it could be a project assignment that a course works on. It could also be some tutorial content built using Guides. We generally recommend that it relates reasonably closely to a lesson or two. But if you prefer and it suits your structure better then you can assign as much or as little content to a Unit as you like. There are two ways you can assign an assessment to a course.","title":"Assign a project to the course"},{"location":"courses/classes/#assign-a-project","text":"The simplest and quickest thing you can do is to assign one of your projects to a course. Once assigned, we refer to it as an assessment but the assessment's source is simply a project. With the course selected, click on the Assessment tab at the top of the page. The list will be empty at this point. Now click the + button in the top left. Select Empty Module and create a new module. When created click Add Assignment and then select Project Based From here you can either start creating a new project or import projects in. To import an existing project see: Then select Copy Project and your project will show. If you have other projects in your My Projects area you can browse to select one of them. At this point you can set the name of the assignment (by default it will be the name of your project with 'copy' appended) and add a description if you wish. When ready, click the Create button and the assignment will be added to the course module. To create a new assignment, select your starting point (the stack you wish to start from) and you can create your assignment. For more information on authoring your content, strategies etc, see creating course content For the assignments to be visible to your students, you need to Publish the assignment. To publish your assignment, either press the Publish button visible in the assignment or go to Education->Publish Assignment Any changes you make in future to assignments will not be visible to students until you publish again. Details of previously published versions is available in the log area. At this point, we take a snapshot of your source project, ready for the students to clone when they start the assignment. Any changes you make to the source project will not be reflected automatically in the student assignment. Once assigned to the course, each student will be able to access the assignment from their dashboard. Go to the Students tab and login as one of the test students. Make sure you have the correct course and module selected form the dropdowns. You will now see the assignment in the list. If you don't, make sure the module dropdown has the correct module name selected. You can then switch back to your teacher account.","title":"Assign a project"},{"location":"courses/classes/#assign-existing-modules-to-the-course","text":"You can assign existing course modules and all of its assignments to your course with a single action. To assign an existing course module, follow the steps below: From the Courses screen, click on your course to open it. Click on the New Module button, and choose Add Copy from Existing . Choose the course you want to copy the content from and select the modules you wish and click Select The module will appear in your course. To add Codio resources to your courses see Creating from Resources","title":"Assign existing modules to the course"},{"location":"courses/classes/#removing-course-module-from-a-course","text":"You can remove course modules from a course selecting the Delete button You can also remove individual assignments from a module, clicking the Delete button for that assignment Warning Deleting a module or assignment from your course also removes all student data for all the assignments in the module (including assessment data and results) and cannot be restored so you may wish to Download CSV before removing the module or assignment.","title":"Removing course module from a course"},{"location":"courses/classes/#updating-courses","text":"","title":"Updating courses"},{"location":"courses/classes/#updating-assignment-content","text":"It is recommended that you connect your assignments to a remote repo (GitHub/BitBucket etc) where you can push your work. As well as giving you full versioning control it also allows you to easily update assignments where you may use the same content in different courses as you can make the changes in one assignment, push to the repo and then pull in the changes to the other assignments to publish. Where you have courses that do not have a relationship (see Working with Master/Child courses ) this will allow you to easily update all courses where an assignment has been updated in one course. collaborate with colleagues who can create their own 'project' by importing from the repo and push their changes to the repo for review before they are pulled into the course assignment and published Please note the code workspace can be updated with new files added but existing files will not be updated as this can invalidate work for students who have already started the assignment. Any students who haven't started the assignment will see the updated content but for those that have already started the assignment they will not. To enable students who have started the unit to see the new content, the assignment can be Reset (see Actions Area Settings for more information) but be aware that any existing work they may have done will be lost.","title":"Updating assignment content"},{"location":"courses/classes/#updating-stack","text":"If changes to the stack used in the assignment are required, when completed (and tested) remember to update your stack before publishing. Either create a new version of the stack if you have permissions or create a new stack. See Modifying a stack for more information. Most assessment changes can be safely upgraded but if you have altered the structure of a question (for example multiple choice changed from single response to multiple response) then student response data can be invalidated. Any changes to guides content can be applied. You should be careful about making major structural changes as students who have already started the assignment could be confused. The code workspace folder will not be impacted, so any student work in this folder will not be impacted.","title":"Updating Stack"},{"location":"courses/classes/#test-students","text":"Codio automatically creates 3 test students for you. This allows instructors to view the student experience when assignments are assigned to courses even if your course is integrated with an LMS They can be seen in the members section. If there are not 3 student listed then you can regenerate them from this screen. You can log in as the student here by clicking the Login as button: Or you can also log in as the student within a course as well: You can switch back to teacher mode by clicking Switch back to teacher account .","title":"Test students"},{"location":"courses/classes/#excluding-files","text":"Files/folders may need to be excluded from students assignments. Such files may be unused resources/logs and other files used when testing the assignment prior to publishing. This can be handled by using .unitignore file in the source project and when published to a course, these files/folders will not be available to the students. Enter on a new line the file/folders to be excluded defining them relative to the location of the .unitignore file and defining folders with / For example if the .unitignore file is located in the project workspace and you wish to exclude testing & node_modules folder the file checkscore.js in the views folder the files app.js and README.md the .codioignore file will be /testing /node_modules /views/checkscore.js app.js README.md","title":"Excluding Files"},{"location":"courses/classes/#managing-assignments","text":"On the module assignment screen you can manage the following settings Change the name of the module Change the name of the assignment View the version history of the assignment publications, This allows you to view the version history. You can see date/time when the assignment was published, name of the person who published the assignment, the name and version of the stack assigned to the assignment. Delete the individual assignment from the module. You are required to enter a confirmation code to proceed and you can then do one of the following Select Convert content to a project to delete the assignment and save the assignment contents to your projects list. Select Delete content to delete the assignment and its content entirely. Delete the entire module. You are required to enter a confirmation code to proceed Reorder the modules in the course. Duplicate the assignment You can also change the order of the assignments within a module by dragging an assignment into its desired position in the list. Video: Rearranging and Deleting Assignments When on the Edit tab you can: Pin the assignment Amend the Unit Duration of the assignment See at a glance how many students have started and completed the assignment Release the grades View Insights for the assignment Access the assignment settings From the 3 blue dot menu area you can: Run the Plagiarism Checker Download CSV with student grade data for the assignment Export assignment data. This allows you to export all the data for the assignment, including the students workspaces. All the data from the course will be compiled into a zip file in the background and when ready an email will be sent to you with a link for you to download. The link will be active for 7 days and after this time the zip file will be removed. All the data from all the courses/modules/assignments in the course can also be exported.","title":"Managing Assignments"},{"location":"courses/classes/#assignment-settings","text":"Click on the settings icon to view the assignment settings","title":"Assignment Settings"},{"location":"courses/classes/#assignment-settings_1","text":"Available from the Settings area.","title":"Assignment Settings"},{"location":"courses/classes/#pinunpin-units","text":"This allows you to pin or unpin an assignment. Pinning an assignment ensures that the assignment is shown in a large box at the top of the student dashboard. You would typically pin an assignment if this is the assignment you are currently teaching. When you have finished teaching it, you would unpin it. You should not have more than four assignments pinned.","title":"Pin/unpin units"},{"location":"courses/classes/#disableenable-assignment","text":"You can enable or disable assignments that have been assigned to a course. This is useful when your students are working in controlled assessment conditions and you only want them to have access to their work within a prescribed timeframe. For book based assignments, you should be aware that if another assignment gives access to the book then students can access the book. and if the student is able to access the terminal window or see the file tree then access to areas that you intend to be disabled cannot be guaranteed. For project assignments and normal projects, preventing access can be guaranteed.","title":"Disable/enable assignment"},{"location":"courses/classes/#visibility-on-completed","text":"You can specify the students ability to access the assignment when completed. Not available for book based assignments 'Read Only with Resubmit' will allow students access the assignment in read only mode, but also to change the status of their assignment from completed to not completed regain full access and re-submit their work again. Any assessments that are not limited to 'one attempt only' can also be submitted again. 'Read-Only' will allow students to access their assignment but not make any changes. 'No Access' will not allow the students to access their assignment.","title":"Visibility on completed"},{"location":"courses/classes/#visibility-on-disabled","text":"You can specify the students ability to access the assignment when disabled. Not available for book based assignments 'Read-Only' will allow students to access their assignment but not make any changes. 'No Access' will not allow the students to access their assignment.","title":"Visibility on disabled"},{"location":"courses/classes/#disable-mark-as-completed","text":"Disabling will not allow students to mark the assignment as completed. If assignments in your course are of a \u2018playground\u2019 type where you allow students to experiment with their code, this can be useful to disable to avoid them completing the assignment in error and then having to ask the teacher/instructor to change the status back so they can continue working. If your assignment contains guides content, you should also disable the option to show Mark as Completed button in guides","title":"Disable Mark as Completed"},{"location":"courses/classes/#reset-assignment-by-student","text":"You can allow students to be able to reset their assignments in the course to start again. All work they may have done will be lost. When enabled, students can reset their completed assignments either from the Education -> Reset Assignment menu option or selecting the Reset Assignment button offered to them in the pop up message","title":"Reset Assignment by Student"},{"location":"courses/classes/#unit-duration","text":"You can specify a start and a stop date and time for an assignment. The assignment will be disabled prior to the start date at which point it becomes available to students in their dashboard. Video: Setting Due Dates and Late Work Penalties Once the stop date and time is reached you can set the assignment to be marked as complete and/or disabled. If you elect to disable access, then depending on your disabled assignment settings students will either be refused all access or can have read-only access to the assignment. Please note, that selecting mark as complete will not stop students who have not started the assignment from being able to access the assignment after the stop date/time has been reached. If you wish to manage this, look at using the disable assignment and mark as complete option. For book based assignments, you should read the caveats mentioned in the Disable/enable assignment section above. For more information on using Mark as complete please click here . You can also set up Notification emails to be sent to the students where they have either not started or completed an assignment before the end time and if penalties applied (see below) email notifications can be sent before penalties apply","title":"Unit duration"},{"location":"courses/classes/#penalties","text":"If applying penalties for late submission it is recommended that you set the end date/time for the assignment to the last date/time of your penalties. You can set the penalty date/time after the assignment end date/time but for students to then be able to work you will need to change the individual students assignment status from Completed and also adjust the deadline for each of them. Time Zones The time zone is taken automatically from your browser, so please check your time settings are correct.","title":"Penalties"},{"location":"courses/classes/#set-assignment-penalties","text":"You can specify penalties in the event that students do not complete the assignment within agreed timescales. Incremental penalties can be applied if required. Each row in the table will contain the following fields : Number (auto-incremental) Date Time Penalty % (The % of the total score for the assignment to be deducted as a penalty) Message (If the message field is not specified, then a default message will be generated - see below)","title":"Set assignment penalties"},{"location":"courses/classes/#default-messages","text":"1: If a student opens a project after deadline or the student is working in the assignment when deadline is reached Deadline X (the table row number) has been reached. This deadline carries a penalty of Y%. You can review your answers with no penalty. However, if you decide to change any answers by pressing the Modify button beneath a question, a Y% penalty deduction will be applied to your overall results. Once a modify button has been pressed once, the penalty deduction will be applied and you will be free to modify as many questions as you like with no additional penalty 2: If a student presses a Modify button past a deadline Deadline X (the table row number) has been reached. This deadline carries a penalty of Y%. If you proceed, a Y% penalty deduction will be applied to your overall results. You will then be able to modify as many questions as you like with no additional penalty 3: Final deadline (assignment end date) Once the final deadline hits (if one is set), the assignment will be forced to read-only and then following message will be displayed to the student : You have exceeded the final deadline. You are no longer able to make changes to your answers. You are free to review your answers.","title":"Default Messages:"},{"location":"courses/classes/#teacherinstructors-dashboard","text":"Penalty indicator: If a penalty was applied then the grade field will have a light red background. This should be the case even if no grade has been calculated yet. Hover above the field to see the penalty details (#, date/time, penalty %). Final grade field: this field will show the final graded score less any penalty deduction. If the field is overwritten by the teacher/instructor, then the penalty deduction will not be applied.","title":"Teacher/Instructors Dashboard:"},{"location":"courses/classes/#adjusting-deadline-for-individual-students","text":"The set deadline(s) can be adjusted forward by a number of days if required for individual students. Select the assignment from the course assignments list and click on the 3 blue vertical dots and select 'Adjust deadline' You can then adjust the deadline forward by as many days/hours/minutes as you require. If a deadline is already set, you can remove it When applied, the adjustment will then show next to the grade field in the teacher/instructors dashboard. The deadline in the image below was adjusted by 4 days","title":"Adjusting deadline for individual students"},{"location":"courses/classes/#exam-proctoring","text":"Where you can enable various options to help support running an assignment in exam conditions Time Limit - when enabled assignments will be marked as complete after the indicated amount of time has passed since the student started the assignment or the End Time of the assignment is reached, whichever is first. Students can be granted additional time if required. Select the 3 blue dot menu for the students assignment and Extend Time Shuffle Question Order - when enabled, each student will receive the pages of the assignment in a random order Forward Only Navigation - When enabled, navigation buttons and menus that allow students to re-visit questions will be hidden so students can only go forward through the pages. If any assessments on a page are unanswered, a pop-up dialogue will encourage students to review the assessment on the current page before proceeding to the next page. Single Login - Once a student has started this assignment, until they mark it as complete, all other account login attempts will be blocked. As students start the assignment, they will be advised that it is restricted to single login and to ensure They have closed other tabs or browsers with Codio open They have a stable internet connection They have enough power in their device They have plenty of time to complete the assignment If students attempt to access the assignment from a different IP address or browser, they will be restricted and advised to contact their course instructor/professor for assistance. If students try to logout of Codio before the assessment is fully completed, they will be advised if they continue they will not be able to access it again. Instructor/Professors will be able to release the lock for the individual students if they feel it is appropriate. Either go to the students tab in the course, find the student and go to the 3 blue dot menu where you will see the option to release the lock or when in the assignment, on the student tab there, also on the 3 dot blue menu","title":"Exam Proctoring"},{"location":"courses/classes/#grade-weights","text":"Where you can enable/disable Teachers Grading, Assessments Grading, Script Grading, set the grading rubric to use for the assignment and manage the weighting for all/any grade options you have enabled. Video: Combining Grading Sources These are relative weightings against all 3 grade options. You can set any number for these. For example, if the teachers grading has weight 2 and assessments grading has 1, that means the final grade will be calculated like (teachersgrading_points * 2 + assessmentgrading_points * 1) /3 . If you have only one option enabled 100% of the points of the enabled grading will go to the final grade.","title":"Grade Weights"},{"location":"courses/classes/#teachers-grading","text":"Where you can set a Grading Rubric Template to use with an assignment and set the weighting for this.","title":"Teachers Grading"},{"location":"courses/classes/#assessments-grading","text":"If your assignment includes assessments this will be enabled by default. If you do not wish the results of the assessments to be included in the grading you can disable this. You can also set the weighting for this.","title":"Assessments Grading"},{"location":"courses/classes/#script-grading","text":"This allows you to specify an auto-grade script that should run when the assignment is marked as complete. The default setting ensures that any grades generated from auto-graded assessments and grades from free text assessments are automatically transferred into the grading field. You can also set the weighting for this. An assignment is marked as complete in any of the following ways Students mark the assignment as complete from their dashboard. The teacher can also mark the assignment as complete for a student from the Course dashboard with the assignment selected. The teacher can mark all assignments as complete for all students by pressing the Actions button. This button appears on the assignment screen. If you are using the Assignment Duration feature, all student assignments are marked as complete as soon as the assignment duration expiry date and time is reached.","title":"Script Grading"},{"location":"courses/classes/#running-an-auto-grade-script","text":"To populate the grading field, you write your own custom script that evaluates the student code. This script can then transfer the grading value into the grading field. If you are using an LMS platform with Codio then be sure to write a percentage value into this field to maintain compatibility with LMS gradebooks. This grading field is then transferred into your LMS gradebook once you release the grades .","title":"Running an auto-grade script"},{"location":"courses/classes/#secure-scripts","text":"If you want your scripts to run securely such that the student has no way of either viewing the script or viewing other files that might contain secure data then you should place those scripts and files in the .guides/secure folder. Codio ensures that only the original project author is able to access this folder but when it is assigned to Students as an assignment, it is not accessible in any way and the script runs in an ephemeral container isolated from the students assignment.","title":"Secure scripts"},{"location":"courses/classes/#timeout","text":"Your script must execute within 3 minutes or a timeout error will occur.","title":"Timeout"},{"location":"courses/classes/#accessing-authored-content-assessment-results","text":"You are able to get scores attained by students in authored content based autograded assessments. This data is in JSON format and can be accessed from the CODIO_AUTOGRADE_ENV environment variable. Below is an example. { \"assessments\": { \"stats\": { \"total\": 2, \"answered\": 2, \"correct\": 2, \"totalPoints\": 12, \"points\": 8 }, \"info\": [{ \"name\": \"Test 1\", \"points\": 5, \"answer\": { \"correct\": true, \"points\": 5 } }, { \"name\": \"Test 2\", \"points\": 7, \"answer\": { \"correct\": true, \"points\": 3 } }] }, \"completedDate\": \"2017-02-07T09:47:54.471Z\" } You can get both summary data and data for each assessment individually.","title":"Accessing authored content assessment results"},{"location":"courses/classes/#participation-grading","text":"Participation grading can be enabled if required. To enable this: Add the script below as .py file to .guides/secure folder import os import json # import grade submit function import sys sys.path.append('/usr/share/codio/assessments') from lib.grade import send_grade env = os.environ.get('CODIO_AUTOGRADE_ENV') parsed = json.loads(env) answered = parsed['assessments']['stats']['submitted'] total=parsed['assessments']['stats']['total'] grade=answered*100/total res = send_grade(int(round(grade))) exit( 0 if res else 1) Add the file to Education> Test Autograde Script Go to the assignment settings, enable Script Grading set to that file and disable Assessments Grading","title":"Participation Grading"},{"location":"courses/classes/#regrading-for-an-individual-student","text":"If students set their work to 'complete' such that the custom script step is triggered then you can regrade the work by resetting the complete switch and then setting it again, which re-triggers the custom script.","title":"Regrading for an individual student"},{"location":"courses/classes/#regrading-all-students","text":"From the Actions area of the assignment, you can regrade all students that have already been auto-graded by pressing the Regrade All button. This is useful if you have found a bug in your grading script. If you follow (or use) the code sample shown at the bottom of this page you can see how the original student submission date is handled.","title":"Regrading all students"},{"location":"courses/classes/#testing-and-debugging-your-grading-scripts","text":"IMPORTANT : please read this section carefully. We provide a way of testing autograding scripts when authoring your project. This is described below. You should make use of this before publishing your project to a course. You should be aware that once the assignment has been published to the course, any changes made to the assignment's source project are not automatically reflected in the published assignment. As a result, if you include your main grading logic within the project itself and if that script has bugs, you will not be able to fix the bugs without deleting the assignment, fixing the bug and finally republishing the assignment. All student data will be lost as a result. However, if all your scripts are stored in .guides/secure folder, you can update and test them and you can then publish the new version. Another strategy is to use a simple bootstrap launcher that loads and executes the script from a remote location that you can edit and debug independently of the Codio box. The following example bash script shows a Python script that is located as a Gist on GitHub. This script might be called .guides/secure/launcher.sh . #!/bin/bash URL=\"https://gist.githubusercontent.com/MaximKraev/11cd4e43b0c43f79d9478efbe21ba1b9/raw/validate.py\" curl -fsSL $URL | python - $@ It is important that it is located in the .guides/secure folder. You then specify the full filepath .guides/secure/launcher.sh in the Set custom script path field in the assignment settings. You are now free to debug the Python script and fix any bugs that you may have noticed once students have started work on the assignment.","title":"Testing and debugging your grading scripts"},{"location":"courses/classes/#testing-your-script-in-the-ide","text":"We provide the ability to test your autograding script from the Education -> Test Autograde Script menu. This option lets you specify the location to your autograding script and run it against the current project contents. It also lets you simulate scores attained by any autograded assessments located within the Codio Guide and select which autograded assessments to test. You should be aware of the following points. When you press the Test Script button all output to stdout and stderr are displayed within the dialog the grade as returned by your test script is at the bottom of the output section stdout and stderr output is not available when running for real (not in this test mode) as the autograding script runs invisibly when the assignment is marked as complete. As such, you should generate output for testing and debugging purposes only. If you want your script to provide any feedback to the student, then you should output it to a file that the student can access when opening the project at a later date. In this case you will need to allow read-only access to the project from the assignment settings after being marked as complete. Your script must execute within 3 minutes to avoid a timeout error. If the Guide has autograded assessments then the test takes its data from the fields shown in the dialog. All of your assessment settings are accessed as described above under Accessing Guide assessment results .","title":"Testing your script in the IDE"},{"location":"courses/classes/#example-python-grading-script","text":"Below is an example Python file that might be loaded by the bootstrap script above. Notice that the only code you need to modify is near the bottom. The other functions are helpers and can be used for any test in any assignment. import os import random import requests import json import datetime # import grade submit function import sys sys.path.append('/usr/share/codio/assessments') from lib.grade import send_grade ################## # Helper functions # ################## # Get the url to send the results to CODIO_AUTOGRADE_URL = os.environ[\"CODIO_AUTOGRADE_URL\"] CODIO_UNIT_DATA = os.environ[\"CODIO_AUTOGRADE_ENV\"] def main(): # Execute the test on the student's code grade = validate_code() # Send the grade back to Codio with the penatly factor applied res = send_grade(int(round(grade))) exit( 0 if res else 1) ######################################## # You only need to modify the code below # ######################################## # Your actual test logic # Our demo function is just generating some random score def validate_code(): return random.randint(10, 100) main()","title":"Example Python grading script"},{"location":"courses/classes/#example-bash-grading-script","text":"Below is an example bash script file that would be stored in .guides/secure folder #!/bin/bash set -e # Your actual test logic # Our demo function is just generating some random score POINTS=$(( ( RANDOM % 100 ) + 1 )) # Show json based passed environment echo $CODIO_AUTOGRADE_ENV # Send the grade back to Codio curl --retry 3 -s \"$CODIO_AUTOGRADE_URL&grade=$POINTS\"","title":"Example Bash grading script"},{"location":"courses/classes/#autograding-enhancements","text":"To provide instructors with more robust auto-grade scripts, you can also now Send back feedback in different formats HTML/Markdown/plainText Allow separate debug logs Notify (instructors and students) and reopen assignments for a student on grade script failure. To support this additional feedback, this URL (passed as an environment variable) can be used: CODIO_AUTOGRADE_V2_URL These variables allow POST and GET requests with the following parameters: Grade ( CODIO_AUTOGRADE_V2_URL ): 0-100 grade result Feedback - text Format - html|md|txt - txt is default if used (optional) Extra Credit - where extra credit points can be given to students (optional) If the grade is submitted to these urls script output is saved as debug log. If the script fails, the attempt is recorded, the assignment is not locked (if due date is not passed) and an email notification with information about the problem is sent to the course instructor(s) containing the debug output from the script.","title":"Autograding enhancements"},{"location":"courses/classes/#example-python-grading-script_1","text":"import os import random import requests import json # import grade submit function import sys sys.path.append('/usr/share/codio/assessments') from lib.grade import send_grade_v2, FORMAT_V2_MD, FORMAT_V2_HTML, FORMAT_V2_TXT def main(): # Execute the test on the student's code grade = random.randint(10, 100) # Send the grade back to Codio with the penatly factor applied res = send_grade_v2(int(round(grade)), feedback='Simple text here', format=FORMAT_V2_HTML, extra_credit=int(round(grade))) exit( 0 if res else 1) main()","title":"Example Python grading script"},{"location":"courses/classes/#example-bash-grading-script_1","text":"#!/bin/bash set -e POINTS=$(( ( RANDOM % 100 ) + 1 )) curl --retry 3 -s \"$CODIO_AUTOGRADE_V2_URL\" -d grade=$POINTS -d format=txt -d feedback='Simple text here' -d extra_credit=$POINTS","title":"Example Bash grading script"},{"location":"courses/classes/#actions-area-settings","text":"Additional options are also available if you select the Actions button. Plagiarism checker You can run plagiarism detection from the blue dots menu on the assignment or the Actions area. Mark all as completed Certain actions can be triggered when a student marks an assignment as complete: Auto-graded assessment scores can be passed directly to the grade field and/or Scripts can be executed for assessing the student code and assigning the grade Students can mark the assignment as complete from their own dashboards but a teacher is also able to do this on their behalf either individually or for all students either by pressing the Marking All As Completed button to mark all student assignments as complete, hover over a student to see the switch appear to the left of the students name, which you can then activate or Accessing student work and going to the Education->Mark as Completed menu item within the IDE. Teachers can also mark complete assignments as incomplete for all students in the course or for individual students selecting the switch or by accessing their assignment. Unmark as complete Where the assignment can be marked as not complete for all students Download CSV This allows you to download a CSV file with student grade data for the assignment. Reset This option will destroy all student work. In the event that an assignment in your course is updated you can reset it so all students, including those who have already started the assignment, are updated with the new assignment. You can reset the assignment for all your students by selecting either the Actions button and then the Reset button or you can reset the assignment for individual students from the 3 blue dot menu Regrade completed This option should be selected if you are running an auto-grade script when the assignment is marked as completed and you want the script to be re-run. Release Grades By default, grades are not shown to students or transferred to the LMS gradebook if you are using LMS integration for a course. When you are ready to do so, you can select the option from here.","title":"Actions area settings"},{"location":"courses/classes/#notification-emails","text":"Automatic email notifications can be set up in your courses to send emails to your students. Go to the Notifications tab in your course to create notifications. Not available for Read only teachers in the course.","title":"Notification Emails"},{"location":"courses/classes/#notification-details","text":"Not Started Assignment: you can schedule the notifications to be sent to all students in the course that have never opened the assignment that is due soon Incomplete Assignment: you can schedule the notifications to be sent to all students who have started but not finished an assignment that is due soon. Students that have also not started will also be notified New Feedback: the email notification will be sent when new feedback is available for the student","title":"Notification details"},{"location":"courses/classes/#before","text":"Due Date (before late penalties) where penalties deadlines are set and the End Time is set to the final date of completion, the Due Date is taken from the penalty deadline date End Date is taken from the End Time set for the assignment duration Reply to Email Address: enter an email address that students can then reply to if they have questions or require further assistance.","title":"Before"},{"location":"courses/classes/#notification-template","text":"We prefill a default title name and the body text including links (in the <<< >>> tags) that will assist the students. You may edit this as you wish. Supported tags Student name <<<student name>>> : Students name Assignment name <<<assignment name>>> : Assignment name Course name <<<course name>>> : Codio course name Course link <<<course link>>> : link to Codio course for non LTI and for LTI enabled courses the COURSE LMS URL Assignment link <<<assignment link>>> : link to students project (if the project is not started then the course link as above used) Feedback link <<<feedback link>>> : Link to assignment feedback Due In <<<due in>>> : when the assignment is due for completion relative to current date/time Please note: we have plans to develop this feature in the future but if you have ideas/suggestions please raise in our Feedback area.","title":"Notification Template"},{"location":"courses/coursemanagement/","text":"-- title: Creating Course Content Updating courses and collaboration \uf0c1 If you want to allow other teachers in your organization to modify your course structure and assignment content then it is important to understand how Codio manages this. Please refer to Collaborating on project units for details. Overview \uf0c1 The most basic way to assign content to students is to create a project and then assign the project to the course . Over time, you may end up with a lot of projects in your project list. Each time you come to teach your course, you will find it harder and harder to locate the right project when you need it. As a result, you should be familiar with the functionality offered by courses, described below, and books . A course is a very elegant way of managing and organizing your projects. A course has a very simple hierarchy. Course : the course is the top level and contains modules. Module : a module is simply a container for your main project assignments. If you have 50 project assignments in your course then you might want to put collections of assignments into distinct, suitably named modules. Assignment : an assignment is a Codio project that is some unit of teaching. It is entirely up to you how much material is covered by an assignment. Approaches include putting about a week, a lesson or a lecture's worth of material into a single assignment. A course assignment typically takes one of two forms. Tutorial : in this case you would use the Codio Guides or Codio Books tutorial authoring tools to create your tutorial content. Click here for an overview of the difference. Assignment : in this case you create a project assignment where everything is set up for the student to tackle a coding assignment or challenge. You can still use guides or books to give instructions, but with assignments, you expect your students will be coding rather than learning. The above two cases are not fixed concepts in Codio but are typical use cases. You can do whatever you like with a project. Working with courses \uf0c1 Working with courses often follows the pattern listed below. Setup \uf0c1 Create a new course and name it. Create your first module . You need at least one module to hold your assignments. A module is an organizational item and a) contains assignments and b) can be assigned to a course with all its assignments. Assignment Creation \uf0c1 Either Create a new project assignment this gives you a dedicated Codio box and behaves like a regular Codio project. Or Create a new book assignment which maps to a part of a book that has already been created. Unlike project assignments, a book has a single Codio box to work with along with a typically large volume of content. Please click here for details on how to decide whether to use project assignments or book assignments First version \uf0c1 This describes the first time you create a new assignment. Edit your assignment . If your assignment is a project assignment, clicking the assignment will take you into the IDE, as with a Codio project, where you can work on your project. Publish your assignment . When you think your assignment is in good shape, it is ready to publish. A assignment is not available to the course until you publish. At this point a snapshot is taken of the assignment and it forms a part of the published course. It is recommended that you connect your assignments to a remote repo (GitHub/BitBucket etc) where you can push your work. As well as giving you full versioning control it also allows you to easily update assignments where you may use the same content in different courses as you cam make the changes in one assignment, push to the repo and then pull in the changes to the other assignemts to publish. collaborate with colleagues who can create their own 'project' by importing from the repo and push their changes to the repo for review before they are pulled into the course assignment and published automate the publishing process as you merge your repo branch into the master branch. See GitHub API for more information Please note the code workspace, other than the guides folder, is never updated as this can invalidate work for students who have already started the assignment. Any students who haven't started the assignment will see the updated content but for those that have already started the assignment they will not. To enable students who have started the unit to see the new content, the assignment can be Reset (see Actions Area Settings but be aware that any existing work they may have done will be lost. You will iterate through the above process as you add more assignments to your course modules. Updates \uf0c1 Editing an assignment does not affect published course content or content assigned to course . This section describes how you can push your changes out to courses when you are ready. More edits to a assignment . After publishing, you may decide to make further changes. These changes do not form a part of the published course assignment until you republish, so you can edit without concern for altering published content. Republish . Having made more changes, you can publish the assignment again in order to make those changes available to the course. However, publishing does not update assignments previously assigned to a course. Stack planning \uf0c1 The following applies to project assignments rather than books. Books require less thought as a book only has one box associated with it and the book assignment will takes its stack setting from the book. You should be familiar with the concept of stack before creating content. Minimize the number of stacks \uf0c1 It is important to think about the stack(s) that your course uses. You should avoid creating a new stack for each assignment. There are very few cases where this is needed. If you unnecessarily create new stacks for each assignment, you will be be less efficient and waste unnecessary time with stack builds/rebuilds. You should look to use as few stacks as possible, ideally just one, and use that stack for all assignments. There are perfectly valid exceptions, but this is the rule. Single stack example \uf0c1 To illustrate a single stack situation, let's assume you are teaching a course \"Programming in Java\". You could either use our default Java stack or you start with the Java stack and then add additional tools so it has all the components you require to teach all parts of your course. Whether you have created your own stack or used a default one, you would then point all your assignments to that one, same stack. If, as you create more assignments in your course, you find you need to install more tools, then you should update the stack with a new version . By default, when you choose a stack for your new assignment, it will point to the latest version. So if the underlying stack is updated from any location at all, then any assignment that uses that stack will automatically be set to use it. Students who are using a assignment in a course will also automatically use the latest version when it is updated. It follows that you should be very careful when pointing to a specific version of a stack, rather than the latest version. If you do this, then you will need to update all assignments that are not set to use the latest version. Multiple stack example \uf0c1 Let's say you are teaching a course \"Introduction to Programming\" and it has 3 modules \"Java\", \"Python\" and \"Haskell\" and each module contains a good number of assignments. In this case, you could still choose the single stack approach, but you would need to install all three languages and their toolsets and then create a stack from it. A simpler approach would be to use three separate stacks, one for each language. You set the assignments for each language to point to the appropriate language stack. Other than that, the principles described above still apply. Switching stacks \uf0c1 It is possible to change the stack for an assignment. This can be done from either the assignment listing area from within the IDE. However, if this change were to be needed for all assignments then you would have to repeat this for each assignment individually. It is therefore highly recommended that you start with a stack and stick with it wherever possible. Stacks not owned by you \uf0c1 If you were to use one of Codio's default stacks then you are not able to update these yourself as you don't have permissions. However, you might want to start off with, say, the Java stack and then install new components. In this case, you should plan this ahead of time. You would first create the assignment from Codio's Java stack install your components create a new stack from your assignment ( in the IDE or from the stacks dashboard ) make sure your stack is switched to that newly created stack You now own this stack and so you can update whenever you like down the line. When you create new assignments, you would then choose this new stack. Use Latest Version \uf0c1 When you assign a stack to a assignment, it will be set by default to the Use Latest Version . You can view the stack settings from the IDE ( Project-Stack Settings ) Understanding what Use Latest Version means is important. When you work with a assignment as a course author, that assignment is actually using a fixed version. It does not automatically switch to the latest version each time a new version of a stack is created. This could be dangerous as switching a stack resets everything outside the workspace folder. If you want to update to the latest version then you need to go to the stack settings dialog and press the save button. Where Use Latest Version is useful is when you assign a course module and its assignments to a course. In this case, students who have not yet started a assignment will get the latest version of the stack. Create a course \uf0c1 If you are in the IDE, click the Codio icon in the top left corner to take you to the Courses screen. If you are in the dashboard, click on Courses in the left menu. Click the New Course button at the top left of the page. Select Add Empty Course , complete the details requested, then click Create Course . Your new course will appear in your Courses area. Course Code, Name, Tags & Duration \uf0c1 You are required to enter a name for your course. The other fields are optional. The Course Code field is used so your course can be shared with others (in other organisations) and they can create a course by entering in the code you define here. The tags field is usually used to identify the technologies used and assist with searching courses but you can create you own tag names as you require if you wish to use for different purposes. Modules \uf0c1 A course has to have at least one module. A module contains the individual assignments that will be assigned to students. Modules help you organize your assignments into logical groupings. If your course only contains a few assignments then you may want only a single module. If, on the other hand, your course has a large number of assignments, then dividing them between several suitably named modules may make more organizational sense. Creating a module \uf0c1 To create a new, empty module - With the course selected, click on the Assignments tab at the top of the page. The list will be empty at this point. - Now click the + button in the top left. - Select Empty Module and create a new module. Adding a Module \uf0c1 It is possible to add a module to your course that already exists in another course. Press the Copy from Existing button. The Module browser will open for you to search for the module(s) you wish to add. If there is a relationship already with a 'Parent' course, this will show at the top. You can filter from the available options in the tabs, or search by typing into the search field, whereupon Codio will search within all Module names available to you. You can also order the list of modules by name or owner and use the Filter by Course drop down to view modules in other courses. You can also add module content using Share Codes. To do this, first add a new module using Add Empty Module , give it a name (you can always rename it later if required) and then Add Assignment , select the Existing option and then the Get by Code tab and enter the share code for the relevant resource. The share code for Codio Resources can be found here Adding an assignment to a module \uf0c1 Please read the section Assign a project to the course for details. Course access \uf0c1 When a course is created all 'Teachers' in the course have admin access to the content and can edit the content Deleting courses and modules \uf0c1 You can delete a course by going to the Admin tab and clicking Delete Course . You can delete a module by clicking the Delete button on the courses listing area Deleting a course will delete all modules within the course. Similarly, deleting a module will delete all assignments within it. It is recommended that you connect your assignments to a remote repo (GitHub/BitBucket etc) so you will always be able to restore your work from the repo. Adding assignments \uf0c1 An assignment behaves like a Codio project except it will not appear in your projects list. This makes it much easier to find your assignment as well as to chronologically arrange the assignments within each module. You can mix book assignments and project assignments in a course module. If you have already have a regular project that you want to load into a assignment, then the process is described below. Adding a new assignment \uf0c1 You add a new assignment by pressing the large blue + button. You now need to choose between a project assignment a book assignment Click here if you are not sure about the difference between project assignments and book assignments. New project assignment \uf0c1 You can create a new assignment in the following ways. Create a brand new assignment as you would with a normal Codio project. Import (Copy) an existing project into the assignment. See the image below and click on the click here for more options where you can Import (copy) an existing project. A snapshot of the selected project is taken. From that point on you will edit from the assignment, not the project. Import from GitHub or a Zip file of an existing Codio project, again, by clicking on the click here to select this option. New book assignment \uf0c1 Creating a new book assignment involves pointing to the parts of a book that you want to map to your assignment. You will seen the following screen. You can now specify the book you want to reference. Browse to the books available to you select the parts of the book you want to include in this assignment give the assignment a name. Publishing \uf0c1 As you update your assignment, a Publish button will show on the top menu bar, to the left of your username. There is also an option to publish in the Education menu item in the top menu bar. Please note : If you change the stack or files via the terminal, the publish button on the top menu bar will NOT appear If you add and remove the same character, it will assume that you made a change even though the start and end file are the same The publish process is slightly different for books and project assignments. Updating book assignments \uf0c1 Book assignments are published from the books area. Let's say you have already published a book and created an assignment from a part of that book. If you then make changes to the book and republish the book, those published changes are not automatically reflected in the course. If you want to update the assignment, then go into Edit mode in the course and click on the book assignment you wish to update. After pressing this, the book update dialog will open: Click Use latest version and then Update for the changes to be made available to your students Publishing project assignments \uf0c1 By default a project assignment is not available to others until you explicitly publish it. This ensures that you can make changes, even after publishing, without the published course content being affected. Publishing the assignment takes a snapshot of the underlying project assignment and assigns it a new version. Once published, you can make further edits to the assignment without changes being visible in the published assignment until you publish it again. You can also automate the publishing process as you merge your repo branch into the master branch. See GitHub API for more information Go to the Edit tab, select the assignment from the listing to open it and then press Publish button or go to Education->Publish Assignment Describe changes \uf0c1 You should enter a brief description of the changes you made since the last publish of the assignment. You can see the version history on the versions screen . Publishing options \uf0c1 If, in your project assignment, you have only made changes to the code workspace (the workspace is the contents of the file tree in the IDE or /home/codio/workspace then you should Press the Publish button when ready. Enter the changelog text, which is a description of the changes made since the last publish and select the Publish option Reverting to an earlier version \uf0c1 You can revert back to earlier published versions. Please Note reverting to an earlier version automatically publishes it and will be available to students. Go to the Versions listing Selecting will show you the listing of all previous versions, click the Revert button you wish to revert back to. When teachers next wish to open the assignment in the course, they can elect to update their working copy to the currently published version if required. Stack modifications \uf0c1 If you have made any changes to the project's stack then you should first press the Stack button where you can then change the stack or check/confirm that Use the latest version is selected. Please be aware that changes to the stack can be made indirectly by applications as well as manual file changes. For example, if you modified a database's contents that is not configured to live in the workspace area then these count as stack changes. When done you should Press the Publish button when ready. Enter the changelog text, which is a description of the changes made since the last publish and select the Publish with stack update option Please note if using GitHub API to automate the publising process, this will not update the stack. You will need to also re publish manually to update the stack For more information on how to update/modify stacks, see Modifying a stack IMPORTANT: Switching an assignment's stack \uf0c1 Let's say you have one or more assignments and you decide to change the stack that they point to. You can switch the stack from within the IDE ( Project->Stack>settings ) but if you use this, when publishing the new version, select the Publish with stack update option. Editing an existing assignment \uf0c1 Editing a book assignment \uf0c1 If you want to edit book assignment content, then you edit the book from the books listing, not the assignment listing. You would then republish the book and then in the course, publish the new version. See Updating book assignments for more information. If you have added new content then you can also remap the assignment to the book as described on the adding an assignment section. Editing assignments \uf0c1 See Managing Assigments Editing a project assignment is always done from the assignment listing. Select the assignment to open in the IDE. If there is a later version of the assignment that has been published by a colleague since you last opened it, you will see the following screen and elect to open either the latest published version or the last version you edited. If you are working in an assignment and wish to revert to the last published version, you can do so going to Project>Delete . As you then re open the assignment you will have reverted to the last published version Collaborating on project assignments \uf0c1 It is recommended that you connect your assignments to a remote repo (GitHub/BitBucket etc) where you can push your work. As well as giving you full versioning control it also allows you to easily update assignments where you may use the same content in different courses as you can make the changes in one assignment, push to the repo and then pull in the changes to the other assignments to publish. collaborate with colleagues who can create their own 'project' by importing from the repo and push their changes to the repo for review before they are pulled into the course assignment and published automate the publishing process as you merge your repo branch into the master branch. See GitHub API for more information Please note the code workspace can be updated with new files added but existing files will not be updated as this can invalidate work for students who have already started the assignment. Any students who haven't started the assignment will see the updated content but for those that have already started the assignment they will not. To enable students who have started the unit to see the new content, the assignment can be Reset (see Actions Area Settings for more information) but be aware that any existing work they may have done will be lost. Other teachers in the course can then collaborate on course assignments by creating their own project in their My Projects area and push their changes to the remote repo for review prior to pulling into the course assignment and then publishing the new version The module assignments can be edited by others directly if required. It is suggested that this is only considered if the changes are very simple and the assignment is not used in other courses. The rules for other users to edit a project assignment in a course are as follows. Private - only you can edit the project assignment. Private but organization is the owner - any teacher in your organization can edit. Public - only you can edit. Public but organization is the owner - any teacher in your organization can edit. The ability to create public courses/modules can be enabled for the organization. See Public/Private setttings for more information. If you want 2 or more people to collaborate on a project assignment directly, you need to understand how Codio manages this process. The key thing you need to realize is that unless you are familiar with Git, only one user should make changes at a time . If User A and User B want to collaborate, then they need to inform each other when they are working on the content. If they fail to do so, then one person will have to surrender their changes later on. Let's say User A has authored a assignment and has finished work. At this point, User A must publish the assignment for others to be able to carry on from this point. User B now makes changes to the assignment. When done, User B should inform User A that the changes are complete and published. At this point, when User A opens the assignment for editing, a dialog will appear showing that User B has published new changes. User A now wants User B to be able to collaborate. User A should inform User B that the assignment is ready to edit. When User B accesses the assignment, Codio will take a snapshot of the published assignment and User B can start work on it. In other words, User B is not editing User A's assignment, User B has a clone. User B now makes changes to the assignment. When done, User B should publish the changes in the same way that User A did. User B then informs User A that the changes are complete and published. At this point, when User A opens the assignment for editing, a dialog will appear showing that User B has published new changes. A new snapshot is then taken and User A (or any other user for that matter) can editing. The important point in this process is that any user who has made changes and wants other to see those changes should publish first.","title":"Coursemanagement"},{"location":"courses/coursemanagement/#updating-courses-and-collaboration","text":"If you want to allow other teachers in your organization to modify your course structure and assignment content then it is important to understand how Codio manages this. Please refer to Collaborating on project units for details.","title":"Updating courses and collaboration"},{"location":"courses/coursemanagement/#overview","text":"The most basic way to assign content to students is to create a project and then assign the project to the course . Over time, you may end up with a lot of projects in your project list. Each time you come to teach your course, you will find it harder and harder to locate the right project when you need it. As a result, you should be familiar with the functionality offered by courses, described below, and books . A course is a very elegant way of managing and organizing your projects. A course has a very simple hierarchy. Course : the course is the top level and contains modules. Module : a module is simply a container for your main project assignments. If you have 50 project assignments in your course then you might want to put collections of assignments into distinct, suitably named modules. Assignment : an assignment is a Codio project that is some unit of teaching. It is entirely up to you how much material is covered by an assignment. Approaches include putting about a week, a lesson or a lecture's worth of material into a single assignment. A course assignment typically takes one of two forms. Tutorial : in this case you would use the Codio Guides or Codio Books tutorial authoring tools to create your tutorial content. Click here for an overview of the difference. Assignment : in this case you create a project assignment where everything is set up for the student to tackle a coding assignment or challenge. You can still use guides or books to give instructions, but with assignments, you expect your students will be coding rather than learning. The above two cases are not fixed concepts in Codio but are typical use cases. You can do whatever you like with a project.","title":"Overview"},{"location":"courses/coursemanagement/#working-with-courses","text":"Working with courses often follows the pattern listed below.","title":"Working with courses"},{"location":"courses/coursemanagement/#setup","text":"Create a new course and name it. Create your first module . You need at least one module to hold your assignments. A module is an organizational item and a) contains assignments and b) can be assigned to a course with all its assignments.","title":"Setup"},{"location":"courses/coursemanagement/#assignment-creation","text":"Either Create a new project assignment this gives you a dedicated Codio box and behaves like a regular Codio project. Or Create a new book assignment which maps to a part of a book that has already been created. Unlike project assignments, a book has a single Codio box to work with along with a typically large volume of content. Please click here for details on how to decide whether to use project assignments or book assignments","title":"Assignment Creation"},{"location":"courses/coursemanagement/#first-version","text":"This describes the first time you create a new assignment. Edit your assignment . If your assignment is a project assignment, clicking the assignment will take you into the IDE, as with a Codio project, where you can work on your project. Publish your assignment . When you think your assignment is in good shape, it is ready to publish. A assignment is not available to the course until you publish. At this point a snapshot is taken of the assignment and it forms a part of the published course. It is recommended that you connect your assignments to a remote repo (GitHub/BitBucket etc) where you can push your work. As well as giving you full versioning control it also allows you to easily update assignments where you may use the same content in different courses as you cam make the changes in one assignment, push to the repo and then pull in the changes to the other assignemts to publish. collaborate with colleagues who can create their own 'project' by importing from the repo and push their changes to the repo for review before they are pulled into the course assignment and published automate the publishing process as you merge your repo branch into the master branch. See GitHub API for more information Please note the code workspace, other than the guides folder, is never updated as this can invalidate work for students who have already started the assignment. Any students who haven't started the assignment will see the updated content but for those that have already started the assignment they will not. To enable students who have started the unit to see the new content, the assignment can be Reset (see Actions Area Settings but be aware that any existing work they may have done will be lost. You will iterate through the above process as you add more assignments to your course modules.","title":"First version"},{"location":"courses/coursemanagement/#updates","text":"Editing an assignment does not affect published course content or content assigned to course . This section describes how you can push your changes out to courses when you are ready. More edits to a assignment . After publishing, you may decide to make further changes. These changes do not form a part of the published course assignment until you republish, so you can edit without concern for altering published content. Republish . Having made more changes, you can publish the assignment again in order to make those changes available to the course. However, publishing does not update assignments previously assigned to a course.","title":"Updates"},{"location":"courses/coursemanagement/#stack-planning","text":"The following applies to project assignments rather than books. Books require less thought as a book only has one box associated with it and the book assignment will takes its stack setting from the book. You should be familiar with the concept of stack before creating content.","title":"Stack planning"},{"location":"courses/coursemanagement/#minimize-the-number-of-stacks","text":"It is important to think about the stack(s) that your course uses. You should avoid creating a new stack for each assignment. There are very few cases where this is needed. If you unnecessarily create new stacks for each assignment, you will be be less efficient and waste unnecessary time with stack builds/rebuilds. You should look to use as few stacks as possible, ideally just one, and use that stack for all assignments. There are perfectly valid exceptions, but this is the rule.","title":"Minimize the number of stacks"},{"location":"courses/coursemanagement/#single-stack-example","text":"To illustrate a single stack situation, let's assume you are teaching a course \"Programming in Java\". You could either use our default Java stack or you start with the Java stack and then add additional tools so it has all the components you require to teach all parts of your course. Whether you have created your own stack or used a default one, you would then point all your assignments to that one, same stack. If, as you create more assignments in your course, you find you need to install more tools, then you should update the stack with a new version . By default, when you choose a stack for your new assignment, it will point to the latest version. So if the underlying stack is updated from any location at all, then any assignment that uses that stack will automatically be set to use it. Students who are using a assignment in a course will also automatically use the latest version when it is updated. It follows that you should be very careful when pointing to a specific version of a stack, rather than the latest version. If you do this, then you will need to update all assignments that are not set to use the latest version.","title":"Single stack example"},{"location":"courses/coursemanagement/#multiple-stack-example","text":"Let's say you are teaching a course \"Introduction to Programming\" and it has 3 modules \"Java\", \"Python\" and \"Haskell\" and each module contains a good number of assignments. In this case, you could still choose the single stack approach, but you would need to install all three languages and their toolsets and then create a stack from it. A simpler approach would be to use three separate stacks, one for each language. You set the assignments for each language to point to the appropriate language stack. Other than that, the principles described above still apply.","title":"Multiple stack example"},{"location":"courses/coursemanagement/#switching-stacks","text":"It is possible to change the stack for an assignment. This can be done from either the assignment listing area from within the IDE. However, if this change were to be needed for all assignments then you would have to repeat this for each assignment individually. It is therefore highly recommended that you start with a stack and stick with it wherever possible.","title":"Switching stacks"},{"location":"courses/coursemanagement/#stacks-not-owned-by-you","text":"If you were to use one of Codio's default stacks then you are not able to update these yourself as you don't have permissions. However, you might want to start off with, say, the Java stack and then install new components. In this case, you should plan this ahead of time. You would first create the assignment from Codio's Java stack install your components create a new stack from your assignment ( in the IDE or from the stacks dashboard ) make sure your stack is switched to that newly created stack You now own this stack and so you can update whenever you like down the line. When you create new assignments, you would then choose this new stack.","title":"Stacks not owned by you"},{"location":"courses/coursemanagement/#use-latest-version","text":"When you assign a stack to a assignment, it will be set by default to the Use Latest Version . You can view the stack settings from the IDE ( Project-Stack Settings ) Understanding what Use Latest Version means is important. When you work with a assignment as a course author, that assignment is actually using a fixed version. It does not automatically switch to the latest version each time a new version of a stack is created. This could be dangerous as switching a stack resets everything outside the workspace folder. If you want to update to the latest version then you need to go to the stack settings dialog and press the save button. Where Use Latest Version is useful is when you assign a course module and its assignments to a course. In this case, students who have not yet started a assignment will get the latest version of the stack.","title":"Use Latest Version"},{"location":"courses/coursemanagement/#create-a-course","text":"If you are in the IDE, click the Codio icon in the top left corner to take you to the Courses screen. If you are in the dashboard, click on Courses in the left menu. Click the New Course button at the top left of the page. Select Add Empty Course , complete the details requested, then click Create Course . Your new course will appear in your Courses area.","title":"Create a course"},{"location":"courses/coursemanagement/#course-code-name-tags-duration","text":"You are required to enter a name for your course. The other fields are optional. The Course Code field is used so your course can be shared with others (in other organisations) and they can create a course by entering in the code you define here. The tags field is usually used to identify the technologies used and assist with searching courses but you can create you own tag names as you require if you wish to use for different purposes.","title":"Course Code, Name, Tags &amp; Duration"},{"location":"courses/coursemanagement/#modules","text":"A course has to have at least one module. A module contains the individual assignments that will be assigned to students. Modules help you organize your assignments into logical groupings. If your course only contains a few assignments then you may want only a single module. If, on the other hand, your course has a large number of assignments, then dividing them between several suitably named modules may make more organizational sense.","title":"Modules"},{"location":"courses/coursemanagement/#creating-a-module","text":"To create a new, empty module - With the course selected, click on the Assignments tab at the top of the page. The list will be empty at this point. - Now click the + button in the top left. - Select Empty Module and create a new module.","title":"Creating a module"},{"location":"courses/coursemanagement/#adding-a-module","text":"It is possible to add a module to your course that already exists in another course. Press the Copy from Existing button. The Module browser will open for you to search for the module(s) you wish to add. If there is a relationship already with a 'Parent' course, this will show at the top. You can filter from the available options in the tabs, or search by typing into the search field, whereupon Codio will search within all Module names available to you. You can also order the list of modules by name or owner and use the Filter by Course drop down to view modules in other courses. You can also add module content using Share Codes. To do this, first add a new module using Add Empty Module , give it a name (you can always rename it later if required) and then Add Assignment , select the Existing option and then the Get by Code tab and enter the share code for the relevant resource. The share code for Codio Resources can be found here","title":"Adding a Module"},{"location":"courses/coursemanagement/#adding-an-assignment-to-a-module","text":"Please read the section Assign a project to the course for details.","title":"Adding an assignment to a module"},{"location":"courses/coursemanagement/#course-access","text":"When a course is created all 'Teachers' in the course have admin access to the content and can edit the content","title":"Course access"},{"location":"courses/coursemanagement/#deleting-courses-and-modules","text":"You can delete a course by going to the Admin tab and clicking Delete Course . You can delete a module by clicking the Delete button on the courses listing area Deleting a course will delete all modules within the course. Similarly, deleting a module will delete all assignments within it. It is recommended that you connect your assignments to a remote repo (GitHub/BitBucket etc) so you will always be able to restore your work from the repo.","title":"Deleting courses and modules"},{"location":"courses/coursemanagement/#adding-assignments","text":"An assignment behaves like a Codio project except it will not appear in your projects list. This makes it much easier to find your assignment as well as to chronologically arrange the assignments within each module. You can mix book assignments and project assignments in a course module. If you have already have a regular project that you want to load into a assignment, then the process is described below.","title":"Adding assignments"},{"location":"courses/coursemanagement/#adding-a-new-assignment","text":"You add a new assignment by pressing the large blue + button. You now need to choose between a project assignment a book assignment Click here if you are not sure about the difference between project assignments and book assignments.","title":"Adding a new assignment"},{"location":"courses/coursemanagement/#new-project-assignment","text":"You can create a new assignment in the following ways. Create a brand new assignment as you would with a normal Codio project. Import (Copy) an existing project into the assignment. See the image below and click on the click here for more options where you can Import (copy) an existing project. A snapshot of the selected project is taken. From that point on you will edit from the assignment, not the project. Import from GitHub or a Zip file of an existing Codio project, again, by clicking on the click here to select this option.","title":"New project assignment"},{"location":"courses/coursemanagement/#new-book-assignment","text":"Creating a new book assignment involves pointing to the parts of a book that you want to map to your assignment. You will seen the following screen. You can now specify the book you want to reference. Browse to the books available to you select the parts of the book you want to include in this assignment give the assignment a name.","title":"New book assignment"},{"location":"courses/coursemanagement/#publishing","text":"As you update your assignment, a Publish button will show on the top menu bar, to the left of your username. There is also an option to publish in the Education menu item in the top menu bar. Please note : If you change the stack or files via the terminal, the publish button on the top menu bar will NOT appear If you add and remove the same character, it will assume that you made a change even though the start and end file are the same The publish process is slightly different for books and project assignments.","title":"Publishing"},{"location":"courses/coursemanagement/#updating-book-assignments","text":"Book assignments are published from the books area. Let's say you have already published a book and created an assignment from a part of that book. If you then make changes to the book and republish the book, those published changes are not automatically reflected in the course. If you want to update the assignment, then go into Edit mode in the course and click on the book assignment you wish to update. After pressing this, the book update dialog will open: Click Use latest version and then Update for the changes to be made available to your students","title":"Updating book assignments"},{"location":"courses/coursemanagement/#publishing-project-assignments","text":"By default a project assignment is not available to others until you explicitly publish it. This ensures that you can make changes, even after publishing, without the published course content being affected. Publishing the assignment takes a snapshot of the underlying project assignment and assigns it a new version. Once published, you can make further edits to the assignment without changes being visible in the published assignment until you publish it again. You can also automate the publishing process as you merge your repo branch into the master branch. See GitHub API for more information Go to the Edit tab, select the assignment from the listing to open it and then press Publish button or go to Education->Publish Assignment","title":"Publishing project assignments"},{"location":"courses/coursemanagement/#describe-changes","text":"You should enter a brief description of the changes you made since the last publish of the assignment. You can see the version history on the versions screen .","title":"Describe changes"},{"location":"courses/coursemanagement/#publishing-options","text":"If, in your project assignment, you have only made changes to the code workspace (the workspace is the contents of the file tree in the IDE or /home/codio/workspace then you should Press the Publish button when ready. Enter the changelog text, which is a description of the changes made since the last publish and select the Publish option","title":"Publishing options"},{"location":"courses/coursemanagement/#reverting-to-an-earlier-version","text":"You can revert back to earlier published versions. Please Note reverting to an earlier version automatically publishes it and will be available to students. Go to the Versions listing Selecting will show you the listing of all previous versions, click the Revert button you wish to revert back to. When teachers next wish to open the assignment in the course, they can elect to update their working copy to the currently published version if required.","title":"Reverting to an earlier version"},{"location":"courses/coursemanagement/#stack-modifications","text":"If you have made any changes to the project's stack then you should first press the Stack button where you can then change the stack or check/confirm that Use the latest version is selected. Please be aware that changes to the stack can be made indirectly by applications as well as manual file changes. For example, if you modified a database's contents that is not configured to live in the workspace area then these count as stack changes. When done you should Press the Publish button when ready. Enter the changelog text, which is a description of the changes made since the last publish and select the Publish with stack update option Please note if using GitHub API to automate the publising process, this will not update the stack. You will need to also re publish manually to update the stack For more information on how to update/modify stacks, see Modifying a stack","title":"Stack modifications"},{"location":"courses/coursemanagement/#important-switching-an-assignments-stack","text":"Let's say you have one or more assignments and you decide to change the stack that they point to. You can switch the stack from within the IDE ( Project->Stack>settings ) but if you use this, when publishing the new version, select the Publish with stack update option.","title":"IMPORTANT: Switching an assignment's stack"},{"location":"courses/coursemanagement/#editing-an-existing-assignment","text":"","title":"Editing an existing assignment"},{"location":"courses/coursemanagement/#editing-a-book-assignment","text":"If you want to edit book assignment content, then you edit the book from the books listing, not the assignment listing. You would then republish the book and then in the course, publish the new version. See Updating book assignments for more information. If you have added new content then you can also remap the assignment to the book as described on the adding an assignment section.","title":"Editing a book assignment"},{"location":"courses/coursemanagement/#editing-assignments","text":"See Managing Assigments Editing a project assignment is always done from the assignment listing. Select the assignment to open in the IDE. If there is a later version of the assignment that has been published by a colleague since you last opened it, you will see the following screen and elect to open either the latest published version or the last version you edited. If you are working in an assignment and wish to revert to the last published version, you can do so going to Project>Delete . As you then re open the assignment you will have reverted to the last published version","title":"Editing assignments"},{"location":"courses/coursemanagement/#collaborating-on-project-assignments","text":"It is recommended that you connect your assignments to a remote repo (GitHub/BitBucket etc) where you can push your work. As well as giving you full versioning control it also allows you to easily update assignments where you may use the same content in different courses as you can make the changes in one assignment, push to the repo and then pull in the changes to the other assignments to publish. collaborate with colleagues who can create their own 'project' by importing from the repo and push their changes to the repo for review before they are pulled into the course assignment and published automate the publishing process as you merge your repo branch into the master branch. See GitHub API for more information Please note the code workspace can be updated with new files added but existing files will not be updated as this can invalidate work for students who have already started the assignment. Any students who haven't started the assignment will see the updated content but for those that have already started the assignment they will not. To enable students who have started the unit to see the new content, the assignment can be Reset (see Actions Area Settings for more information) but be aware that any existing work they may have done will be lost. Other teachers in the course can then collaborate on course assignments by creating their own project in their My Projects area and push their changes to the remote repo for review prior to pulling into the course assignment and then publishing the new version The module assignments can be edited by others directly if required. It is suggested that this is only considered if the changes are very simple and the assignment is not used in other courses. The rules for other users to edit a project assignment in a course are as follows. Private - only you can edit the project assignment. Private but organization is the owner - any teacher in your organization can edit. Public - only you can edit. Public but organization is the owner - any teacher in your organization can edit. The ability to create public courses/modules can be enabled for the organization. See Public/Private setttings for more information. If you want 2 or more people to collaborate on a project assignment directly, you need to understand how Codio manages this process. The key thing you need to realize is that unless you are familiar with Git, only one user should make changes at a time . If User A and User B want to collaborate, then they need to inform each other when they are working on the content. If they fail to do so, then one person will have to surrender their changes later on. Let's say User A has authored a assignment and has finished work. At this point, User A must publish the assignment for others to be able to carry on from this point. User B now makes changes to the assignment. When done, User B should inform User A that the changes are complete and published. At this point, when User A opens the assignment for editing, a dialog will appear showing that User B has published new changes. User A now wants User B to be able to collaborate. User A should inform User B that the assignment is ready to edit. When User B accesses the assignment, Codio will take a snapshot of the published assignment and User B can start work on it. In other words, User B is not editing User A's assignment, User B has a clone. User B now makes changes to the assignment. When done, User B should publish the changes in the same way that User A did. User B then informs User A that the changes are complete and published. At this point, when User A opens the assignment for editing, a dialog will appear showing that User B has published new changes. A new snapshot is then taken and User A (or any other user for that matter) can editing. The important point in this process is that any user who has made changes and wants other to see those changes should publish first.","title":"Collaborating on project assignments"},{"location":"courses/google-classroom/","text":"Integrating Google Classroom is very easy to do. Setting up Integration \uf0c1 In Google Classroom \uf0c1 Create a Class In Codio \uf0c1 Go to the Admin area in the course you wish to integrate to Google Classroom Select Connect to Google Classroom and authenticate to your Google account When authenticated you will be redirected to the Classes List page and will see a list of your Google Classes Select Connect Class button for the Google class you wish to connect your Codio course to Your Codio Course is now integrated with your Google Class Please Note: Google classrooms do not support the ordering of modules/assignments from the Codio Course, they will be generated randomly but can easily be reordered from the Classwork tab in your Google Class Single sign-in and account creation \uf0c1 It is important to understand how Codio maps Google Classroom users to Codio users. The following rules should be understood. If students or faculty access Codio via a Google Classroom assignment then Codio will initially use the Google Classroom email address to identify the user and create the Codio account. In all subsequent access, the Google Classroom userID will be used so in the event the user changes their email address in Google Classroom, the user will be mapped to the same Codio account. If the user is not known to Codio then we will sign up the user as a new Codio user in the background and take the user directly into the Codio content. The Google Classroom user role will be carried over as well. If the user is known to Codio then Codio will take them directly into the Codio content without any sign-in required. If they are a Codio user but are not a member of your organization then they will be required to complete a verification via email. Releasing grades \uf0c1 By default, grades in Codio are neither passed back to the student nor to Google Classroom until they are Marked as complete by either the student or the teacher and the Release Grades switch is enabled (or if you have set the course to automatically release grades when completed) Once Release Grades is enabled, all completed student assignments are automatically sent through. There are various ways to mark a student's work as complete The student can do this from either the Course dashboard or from the Education->Mark as Complete menu in the assignment itself. The teacher can do the same in the assignment when viewing students code The teacher can do the same from the assignment in the Course dashboard by hovering in the left side of a student entry and then setting the completed switch. The teacher can mark all student assignments as completed in one action. This is done by selecting the assignment in the Course pressing the Action button pressing the Mark all as Completed button Updating \uf0c1 If assignments/modules are added/removed in the Codio Course, to update to your Google Classroom Go to the Admin area in the course Select Update Google Classroom to update As above, be aware that this may change the ordering in your Google classroom so review and reorder as required from the Classwork tab Removing \uf0c1 To remove the integration link between Codio and your Google Classroom Go to the Admin area in the course Select Remove Google Classroom to update Please note: Removing the integration link will mean students will not be able to access any of their assignments any longer from Google Classroom","title":"Integrating with Google Classrooms"},{"location":"courses/google-classroom/#setting-up-integration","text":"","title":"Setting up Integration"},{"location":"courses/google-classroom/#in-google-classroom","text":"Create a Class","title":"In Google Classroom"},{"location":"courses/google-classroom/#in-codio","text":"Go to the Admin area in the course you wish to integrate to Google Classroom Select Connect to Google Classroom and authenticate to your Google account When authenticated you will be redirected to the Classes List page and will see a list of your Google Classes Select Connect Class button for the Google class you wish to connect your Codio course to Your Codio Course is now integrated with your Google Class Please Note: Google classrooms do not support the ordering of modules/assignments from the Codio Course, they will be generated randomly but can easily be reordered from the Classwork tab in your Google Class","title":"In Codio"},{"location":"courses/google-classroom/#single-sign-in-and-account-creation","text":"It is important to understand how Codio maps Google Classroom users to Codio users. The following rules should be understood. If students or faculty access Codio via a Google Classroom assignment then Codio will initially use the Google Classroom email address to identify the user and create the Codio account. In all subsequent access, the Google Classroom userID will be used so in the event the user changes their email address in Google Classroom, the user will be mapped to the same Codio account. If the user is not known to Codio then we will sign up the user as a new Codio user in the background and take the user directly into the Codio content. The Google Classroom user role will be carried over as well. If the user is known to Codio then Codio will take them directly into the Codio content without any sign-in required. If they are a Codio user but are not a member of your organization then they will be required to complete a verification via email.","title":"Single sign-in and account creation"},{"location":"courses/google-classroom/#releasing-grades","text":"By default, grades in Codio are neither passed back to the student nor to Google Classroom until they are Marked as complete by either the student or the teacher and the Release Grades switch is enabled (or if you have set the course to automatically release grades when completed) Once Release Grades is enabled, all completed student assignments are automatically sent through. There are various ways to mark a student's work as complete The student can do this from either the Course dashboard or from the Education->Mark as Complete menu in the assignment itself. The teacher can do the same in the assignment when viewing students code The teacher can do the same from the assignment in the Course dashboard by hovering in the left side of a student entry and then setting the completed switch. The teacher can mark all student assignments as completed in one action. This is done by selecting the assignment in the Course pressing the Action button pressing the Mark all as Completed button","title":"Releasing grades"},{"location":"courses/google-classroom/#updating","text":"If assignments/modules are added/removed in the Codio Course, to update to your Google Classroom Go to the Admin area in the course Select Update Google Classroom to update As above, be aware that this may change the ordering in your Google classroom so review and reorder as required from the Classwork tab","title":"Updating"},{"location":"courses/google-classroom/#removing","text":"To remove the integration link between Codio and your Google Classroom Go to the Admin area in the course Select Remove Google Classroom to update Please note: Removing the integration link will mean students will not be able to access any of their assignments any longer from Google Classroom","title":"Removing"},{"location":"courses/grading/","text":"Previewing assignments \uf0c1 You can open the assignments in teachmode. This allows you to see any content that is for teachers' eyes only. This includes hidden content and teacher solutions auto-graded assessments. From the Courses screen, click on your course to open and go to the Teach tab. If your teacher account is read only you will only have access to this tab. You will see the assignments you have assigned to your course. To open the assignment to preview it, click the Preview button Important : Each time you preview the assignment it opens as new. i.e. anything you may add as notes to your preview is not saved Overview of student progress \uf0c1 You can monitor student progress and time spent on individual assignments. Video: Viewing Student Work and Adjusting Individual Due Dates From the Courses screen, click on your course to open it. Click on the Students tab, top centre of your screen. You will see all students in your course displayed on this screen. You will see progress data for assignments started and assignments completed alongside their names. To see an individual student's progress in more detail click on their name. You will then see an individual breakdown of auto-graded assessment results, along with time spent on each assignment. To see a more detailed breakdown of each assignment the student has attempted, click on the assignment name. You will be able to view a breakdown of the challenges attempted along with corresponding results. Download CSV summary \uf0c1 You can also download a CSV file of your students progress. You can do this for individual assignments to see all your students by clicking on the blue triple dot icon to the right of the assignment name: or you can download a CSV file for the Course module to see all your students progress in all the assignments in a Module by selecting Download CSV : or you can export all the data from a course (including the students workspaces) by exporting course data. See export course data for more details Accessing student work \uf0c1 As a teacher you have access to your students cloud area within Codio. This allows you to view and access any work your students have completed at any time. You can enable writable mode at any time to be able to make changes without them affecting the students work. Any changes you may make will be discarded when you exit the assignment. From the Courses area, click on your course to open it. Click on the Students tab, top centre of your screen. You will see all students in your course displayed on this screen. By default they will show sorted alphabetically by first name but you can also sort them by last name, number of started or number of completed assignments if preferred. To view/access an individual students work click on their name. On the far right of the screen, under the heading Open , click the blue arrow to open the students work. Cursor presence \uf0c1 When accessing a students assignment, all active users in a project/assignment will be shown with a color in an icon showing in the menu bar when files are being accessed/edited Clicking on the icon will change focus to show what that user is currently editing highlighted in that color and will show the users cursor. Hovering over the icon will show the filename and line currently being edited. This can be very useful if a student needs assistance as you can see what they are doing, real time and if you need to demonstrate something to them, they can see what you are doing Audio/Video Chat Support \uf0c1 When accessing a students assignment, a Call button will show allowing Audio/Video calls and or real time chat with the student if they are also accessing the assignment at the same time Permissions \uf0c1 Permission for your camera/microphone is required and your browser will prompt you to allow.Permission If permission has been denied, you can re enable in your browser Google Chrome: If you are using Google Chrome you can access your settings through the padlock icon in the top left of your screen, next to the URL of the page you are currently on. Click Site settings and make sure your camera and microphone both say Allow Firefox: If you are using Firefox as your internet browser you can access your settings by typing \"about:permissions\" into the location bar as if it were a website and hitting enter. This will take you to your settings page, click the following link to find out more about changing your settings: https://support.mozilla.org/en-US/kb/permissions-manager-give-ability-store-passwords-set-cookies-more?redirectlocale=en-US&redirectslug=how-do-i-manage-website-permissions Safari: If you are using Safari, you can access your browser settings by clicking Safari and then Preferences. You will see a pop up box and can update your settings. Learn more about how to update the settings through the following link: https://support.apple.com/en-nz/guide/safari/ibrwe2159f50/mac Code Playback \uf0c1 Teachers have access to all of the files that students produce on Codio. In order to see how these code files were built, teachers can use Code Playback . If your cursor is in the code file you want to see the playback of, simply select Tools->Code Playback menu. If you are looking into a multi-file program or did not have the file you want to investigate in-focus, search for the student\u2019s file by clicking on the folder icon. To watch the code be built, click the play button. You can change the speed using the Speed drop down which is in changes per second. To walk through the changes manually, you can use the \u201cPrevious change\u201d and \u201cNext change\u201d buttons. You can drag along the playback slider to find points of interest. Auto-graded assessments \uf0c1 Auto-graded assessments will appear in the teacher dashboard. nbgrader autograding \uf0c1 Jupyter notebook has auto-grade functionality through nbgrader that Codio supports Overview \uf0c1 Assignment creators create the assignment with Jupyter notebook files for the assignment. nbgrader support doesn't require guides or any other assessments . Any user configurations required should be stored in a .codio-jupyter file. if a .codio-jupyter file exists in a project we assume it is jupyter based grader, and therefore only nbgrader can be selected for the assessment scripts in the assignment When the assignment is published to a course, either as an individual project or as part of a course module , the release version is created for the student. If the assignment is updated in the future, when published it will overwrite all tests and read only cells with the new version and the release version for the students will be updated. When the student submits the assignment by marking the assignment as complete, it will be autograded automatically. Manual grading is also available if required Configuration \uf0c1 Extend Timeout period \uf0c1 To extend the time required for completion (to 90 seconds in this example), you can add nbgrader: ExecutePreprocessor.timeout: 90 to the .codio-jupyter file Lock all cells \uf0c1 To lock all cells (Default: False) nbgrader: LockCells.lock_all_cells: True to the .codio-jupyter file Lock all grade cells \uf0c1 To lock all grade cells (Default: True) where grade cells are locked (non-deletable) nbgrader: LockCells.lock_grade_cells: True to the .codio-jupyter file Lock all read-only cells \uf0c1 To lock all grade cells (Default: True) where read only cells are locked (non-deletable and non-editable) nbgrader: LockCells.lock_readonly_cells: True to the .codio-jupyter file Lock all solution cells \uf0c1 To lock all solution cells (Default: True) where solution cells are locked (non-deletable and non-editable) nbgrader: LockCells.lock_solution_cells: True to the .codio-jupyter file Execute preprocessor on timeout \uf0c1 If execution of a cell times out, interrupt the kernel and continue executing other cells rather than throwing an error and stopping. nbgrader: ExecutePreprocessor.interrupt_on_timeout: True to the .codio-jupyter file To run custom grading with jupyter \uf0c1 To avoid execution of autograder with nbgrader and allow codio script autograder to be executed. When set this will not show jupyter files as assessments in codio and will not submit through nbrader after mark as completed, so not assessments and points set in the assignment. codio: grader: false ClearSolutions.code_stub \uf0c1 nbgrader: ClearSolutions.code_stub: R: | # BEGIN YOUR CODE # END YOUR CODE python: | # YOUR CODE HERE raise NotImplementedError() ruby: | # BEGIN YOUR CODE raise NotImplementedError.new() #END YOUR CODE If you require any assistance at all, or would like us to consider adding additional functions, please don't hesitate to contact us Grading project work \uf0c1 Codio's grading features address four important aspects when grading student projects. Assign grade - manually reviewing student projects and then assigning a grade. Grading moderation - having other lecturers review grades already assigned in order to monitor consistency of grading. Grading rubric - This provides a grading guideline framework for teachers. Please click here for details. LMS gradebook sycnhronization - This feature ensures that when teachers release grades, the data is passed automatically to any LTI enabled LMS platform such as Moodle, Blackboard and Canvas. The grading process \uf0c1 Once students have completed their assignments, they should notify the teacher of completion by going to the Education->Mark as Completed menu item within the IDE. The teacher is then able to see whose project is ready to be graded (see below image with completion status circled left). The teacher is also able to filter either finding specific students or to view students based on the status of the assignment. Students can be filtered by: Any Status Started Not Started Has Final Grade No Final Grade Completed Uncompleted Needs Grading Has Extra Credit You can access the student's project from the same screen by clicking on the 3 blue dots on the extreme right (see below image with dots circled right). You can then review the project. The teacher can also mark the assignment as complete going to the Education->Mark as Completed menu item within the IDE and if already marked as complete, can change the status to incomplete There are two ways to assign the grade. Either you can grade from within the IDE itself from the Education menu item. You need to have a student project open in the IDE. Or you can grade from the course dashboard. You must first have selected the assignment associated with the project and then press the grading icon. Also see Autograding To grade from the course dashboard, you should first select the assignment. You can see the check mark next to those students who have completed the assignment. To assign comments or a grade, Teachers Grading needs to be enabled. When it is click on the Grade icon (see image above with grading icons circled center) and select 'Add Grade' button. You can then modify the comments and grade fields for any individual student. Due to the weighting feature, we only allow numeric grades. If you are using a Rubric Template , this will present as you click on the grade field. If the students assignment has already been graded, any other teacher in the course can edit the grade with additional comments if required selecting the 'Override Grade' button. Extra Credit \uf0c1 Extra credit can be given to students if required. Extra credit points are not added to the grade, instead the student's score is shown as grade + extra in the interface. This is done because LTI does not allow a grade > 100. To make transferring extra credit points to your LMS easier, we have included a Has Extra Credit filter. Extra credit can be added manually by the teacher using the Extra Credit button shown above but can also be set within an autograde script. See Autograding Enhancements for more information. Anonymous Grading \uf0c1 If required, anonymous grading can be set for the course so that students will not see the names of the teachers who graded their work. For more information and how to enable this click here Code Commenting \uf0c1 Teachers can also comment on code within students files. To do this, open the students project and open the file. Hover over the left hand side of the gutter bar and click the + to open the comment window and enter the comments as required. This comment will be visible to the student when they next view the file Multiple lines of code can be selected and the teacher can also edit/delete or add additional comments (from the 3 dots to the right of the comment window when the comment is saved) if required. When actioned by the student, the comment will be marked as resolved but will still be available for review in the Education -> Code Comments menu item or from the Guides settings area. Students can also go to this to see all comments and click to open the neccessary file. Releasing Grades \uf0c1 Video: Releasing Grades to Students and LMS By default students are not shown the grades until you decide to release them to the course. This allows you to hold back until you have completed the entire grading process and then release them in one go. If you want the students to see the grades as you go you can: enable this for the course in the Course>Admin area set this at the organisation level so any courses created will have this enabled automatically. See organisation release grades for more information. You can also release grades from the main assignment view flipping the switch in the Release grades column for the assignment(s) you wish to release the grades for. Students are able to see their grades either from their Course view or by opening the assignment and going to Education->Feedback You can also set up Notification emails to be sent to the students when new feedback is available for them to view Grading free text questions \uf0c1 Free text questions will normally require a manual grading process. In order to grade these questions, you should first select the assignment. You will then be shown the student list, as you can see below. You can now select a student. You will then be shown the list of all assessments for that student within the assignment. Free text questions are denoted by the icon highlighted below. Note that if a student has started to answer a question but not submitted the answer, then you will see DRAFT written next to it. Once they submit, you will see GRADE indicating that the question has been submitted and is ready to be graded. Partial Point Rubric \uf0c1 Partial point assessments, where full points have not been awarded, will show the icon: Where an answer is set to allow partial points, a rubric is provided to allow graders to dynamically deduct points from the maximum score. A grader can add an item, change an item weight or remove an item at any time in grading. The change will be applied for all students in this assignment, and any changes in rubric will upgrade already graded students to implement changes. The rubric is dynamic for each assignment, and every new assignment starts with an empty rubric. Rubric \uf0c1 Every rubric item is 2 fields, first is the rubric item weight and the second one line item name. If an item is selected, then the weight is deducted from students score. The grader can select multiple items. The total score can't be negative even if sum of rubric items weights is more than maximum points. Editing \uf0c1 Editing is allowed while grading so the teacher can: add a new item into the form remove an item. As this action will effect all students already graded and their total score updated, a warning is shown for confirmation edit the weight or name. If weight is changed a warning will be shown for confirmation Cloning \uf0c1 A rubric can be cloned from another assignment if required in preference to creating manually. Select the gear icon (circled in image above) to select the assignment. Points adjust \uf0c1 The points adjust field allows the teacher/instructor to manually adjust (ie reduce) the students total score if required without having to edit/change the rubric Feedback \uf0c1 A comments field is provided to allow teacher/instructors manual feedback If a course deadline is reached, then you can grade questions that are set to DRAFT and where the student may have forgotten to submit the answer fully. You can also see the date and time for each submitted answer as well as the date that the assignment was marked as complete by the student.","title":"Grading and accessing student projects"},{"location":"courses/grading/#previewing-assignments","text":"You can open the assignments in teachmode. This allows you to see any content that is for teachers' eyes only. This includes hidden content and teacher solutions auto-graded assessments. From the Courses screen, click on your course to open and go to the Teach tab. If your teacher account is read only you will only have access to this tab. You will see the assignments you have assigned to your course. To open the assignment to preview it, click the Preview button Important : Each time you preview the assignment it opens as new. i.e. anything you may add as notes to your preview is not saved","title":"Previewing assignments"},{"location":"courses/grading/#overview-of-student-progress","text":"You can monitor student progress and time spent on individual assignments. Video: Viewing Student Work and Adjusting Individual Due Dates From the Courses screen, click on your course to open it. Click on the Students tab, top centre of your screen. You will see all students in your course displayed on this screen. You will see progress data for assignments started and assignments completed alongside their names. To see an individual student's progress in more detail click on their name. You will then see an individual breakdown of auto-graded assessment results, along with time spent on each assignment. To see a more detailed breakdown of each assignment the student has attempted, click on the assignment name. You will be able to view a breakdown of the challenges attempted along with corresponding results.","title":"Overview of student progress"},{"location":"courses/grading/#download-csv-summary","text":"You can also download a CSV file of your students progress. You can do this for individual assignments to see all your students by clicking on the blue triple dot icon to the right of the assignment name: or you can download a CSV file for the Course module to see all your students progress in all the assignments in a Module by selecting Download CSV : or you can export all the data from a course (including the students workspaces) by exporting course data. See export course data for more details","title":"Download CSV summary"},{"location":"courses/grading/#accessing-student-work","text":"As a teacher you have access to your students cloud area within Codio. This allows you to view and access any work your students have completed at any time. You can enable writable mode at any time to be able to make changes without them affecting the students work. Any changes you may make will be discarded when you exit the assignment. From the Courses area, click on your course to open it. Click on the Students tab, top centre of your screen. You will see all students in your course displayed on this screen. By default they will show sorted alphabetically by first name but you can also sort them by last name, number of started or number of completed assignments if preferred. To view/access an individual students work click on their name. On the far right of the screen, under the heading Open , click the blue arrow to open the students work.","title":"Accessing student work"},{"location":"courses/grading/#cursor-presence","text":"When accessing a students assignment, all active users in a project/assignment will be shown with a color in an icon showing in the menu bar when files are being accessed/edited Clicking on the icon will change focus to show what that user is currently editing highlighted in that color and will show the users cursor. Hovering over the icon will show the filename and line currently being edited. This can be very useful if a student needs assistance as you can see what they are doing, real time and if you need to demonstrate something to them, they can see what you are doing","title":"Cursor presence"},{"location":"courses/grading/#audiovideo-chat-support","text":"When accessing a students assignment, a Call button will show allowing Audio/Video calls and or real time chat with the student if they are also accessing the assignment at the same time","title":"Audio/Video Chat Support"},{"location":"courses/grading/#permissions","text":"Permission for your camera/microphone is required and your browser will prompt you to allow.Permission If permission has been denied, you can re enable in your browser Google Chrome: If you are using Google Chrome you can access your settings through the padlock icon in the top left of your screen, next to the URL of the page you are currently on. Click Site settings and make sure your camera and microphone both say Allow Firefox: If you are using Firefox as your internet browser you can access your settings by typing \"about:permissions\" into the location bar as if it were a website and hitting enter. This will take you to your settings page, click the following link to find out more about changing your settings: https://support.mozilla.org/en-US/kb/permissions-manager-give-ability-store-passwords-set-cookies-more?redirectlocale=en-US&redirectslug=how-do-i-manage-website-permissions Safari: If you are using Safari, you can access your browser settings by clicking Safari and then Preferences. You will see a pop up box and can update your settings. Learn more about how to update the settings through the following link: https://support.apple.com/en-nz/guide/safari/ibrwe2159f50/mac","title":"Permissions"},{"location":"courses/grading/#code-playback","text":"Teachers have access to all of the files that students produce on Codio. In order to see how these code files were built, teachers can use Code Playback . If your cursor is in the code file you want to see the playback of, simply select Tools->Code Playback menu. If you are looking into a multi-file program or did not have the file you want to investigate in-focus, search for the student\u2019s file by clicking on the folder icon. To watch the code be built, click the play button. You can change the speed using the Speed drop down which is in changes per second. To walk through the changes manually, you can use the \u201cPrevious change\u201d and \u201cNext change\u201d buttons. You can drag along the playback slider to find points of interest.","title":"Code Playback"},{"location":"courses/grading/#auto-graded-assessments","text":"Auto-graded assessments will appear in the teacher dashboard.","title":"Auto-graded assessments"},{"location":"courses/grading/#nbgrader-autograding","text":"Jupyter notebook has auto-grade functionality through nbgrader that Codio supports","title":"nbgrader autograding"},{"location":"courses/grading/#overview","text":"Assignment creators create the assignment with Jupyter notebook files for the assignment. nbgrader support doesn't require guides or any other assessments . Any user configurations required should be stored in a .codio-jupyter file. if a .codio-jupyter file exists in a project we assume it is jupyter based grader, and therefore only nbgrader can be selected for the assessment scripts in the assignment When the assignment is published to a course, either as an individual project or as part of a course module , the release version is created for the student. If the assignment is updated in the future, when published it will overwrite all tests and read only cells with the new version and the release version for the students will be updated. When the student submits the assignment by marking the assignment as complete, it will be autograded automatically. Manual grading is also available if required","title":"Overview"},{"location":"courses/grading/#configuration","text":"","title":"Configuration"},{"location":"courses/grading/#extend-timeout-period","text":"To extend the time required for completion (to 90 seconds in this example), you can add nbgrader: ExecutePreprocessor.timeout: 90 to the .codio-jupyter file","title":"Extend Timeout period"},{"location":"courses/grading/#lock-all-cells","text":"To lock all cells (Default: False) nbgrader: LockCells.lock_all_cells: True to the .codio-jupyter file","title":"Lock all cells"},{"location":"courses/grading/#lock-all-grade-cells","text":"To lock all grade cells (Default: True) where grade cells are locked (non-deletable) nbgrader: LockCells.lock_grade_cells: True to the .codio-jupyter file","title":"Lock all grade cells"},{"location":"courses/grading/#lock-all-read-only-cells","text":"To lock all grade cells (Default: True) where read only cells are locked (non-deletable and non-editable) nbgrader: LockCells.lock_readonly_cells: True to the .codio-jupyter file","title":"Lock all read-only cells"},{"location":"courses/grading/#lock-all-solution-cells","text":"To lock all solution cells (Default: True) where solution cells are locked (non-deletable and non-editable) nbgrader: LockCells.lock_solution_cells: True to the .codio-jupyter file","title":"Lock all solution cells"},{"location":"courses/grading/#execute-preprocessor-on-timeout","text":"If execution of a cell times out, interrupt the kernel and continue executing other cells rather than throwing an error and stopping. nbgrader: ExecutePreprocessor.interrupt_on_timeout: True to the .codio-jupyter file","title":"Execute preprocessor on timeout"},{"location":"courses/grading/#to-run-custom-grading-with-jupyter","text":"To avoid execution of autograder with nbgrader and allow codio script autograder to be executed. When set this will not show jupyter files as assessments in codio and will not submit through nbrader after mark as completed, so not assessments and points set in the assignment. codio: grader: false","title":"To run custom grading with jupyter"},{"location":"courses/grading/#clearsolutionscode_stub","text":"nbgrader: ClearSolutions.code_stub: R: | # BEGIN YOUR CODE # END YOUR CODE python: | # YOUR CODE HERE raise NotImplementedError() ruby: | # BEGIN YOUR CODE raise NotImplementedError.new() #END YOUR CODE If you require any assistance at all, or would like us to consider adding additional functions, please don't hesitate to contact us","title":"ClearSolutions.code_stub"},{"location":"courses/grading/#grading-project-work","text":"Codio's grading features address four important aspects when grading student projects. Assign grade - manually reviewing student projects and then assigning a grade. Grading moderation - having other lecturers review grades already assigned in order to monitor consistency of grading. Grading rubric - This provides a grading guideline framework for teachers. Please click here for details. LMS gradebook sycnhronization - This feature ensures that when teachers release grades, the data is passed automatically to any LTI enabled LMS platform such as Moodle, Blackboard and Canvas.","title":"Grading project work"},{"location":"courses/grading/#the-grading-process","text":"Once students have completed their assignments, they should notify the teacher of completion by going to the Education->Mark as Completed menu item within the IDE. The teacher is then able to see whose project is ready to be graded (see below image with completion status circled left). The teacher is also able to filter either finding specific students or to view students based on the status of the assignment. Students can be filtered by: Any Status Started Not Started Has Final Grade No Final Grade Completed Uncompleted Needs Grading Has Extra Credit You can access the student's project from the same screen by clicking on the 3 blue dots on the extreme right (see below image with dots circled right). You can then review the project. The teacher can also mark the assignment as complete going to the Education->Mark as Completed menu item within the IDE and if already marked as complete, can change the status to incomplete There are two ways to assign the grade. Either you can grade from within the IDE itself from the Education menu item. You need to have a student project open in the IDE. Or you can grade from the course dashboard. You must first have selected the assignment associated with the project and then press the grading icon. Also see Autograding To grade from the course dashboard, you should first select the assignment. You can see the check mark next to those students who have completed the assignment. To assign comments or a grade, Teachers Grading needs to be enabled. When it is click on the Grade icon (see image above with grading icons circled center) and select 'Add Grade' button. You can then modify the comments and grade fields for any individual student. Due to the weighting feature, we only allow numeric grades. If you are using a Rubric Template , this will present as you click on the grade field. If the students assignment has already been graded, any other teacher in the course can edit the grade with additional comments if required selecting the 'Override Grade' button.","title":"The grading process"},{"location":"courses/grading/#extra-credit","text":"Extra credit can be given to students if required. Extra credit points are not added to the grade, instead the student's score is shown as grade + extra in the interface. This is done because LTI does not allow a grade > 100. To make transferring extra credit points to your LMS easier, we have included a Has Extra Credit filter. Extra credit can be added manually by the teacher using the Extra Credit button shown above but can also be set within an autograde script. See Autograding Enhancements for more information.","title":"Extra Credit"},{"location":"courses/grading/#anonymous-grading","text":"If required, anonymous grading can be set for the course so that students will not see the names of the teachers who graded their work. For more information and how to enable this click here","title":"Anonymous Grading"},{"location":"courses/grading/#code-commenting","text":"Teachers can also comment on code within students files. To do this, open the students project and open the file. Hover over the left hand side of the gutter bar and click the + to open the comment window and enter the comments as required. This comment will be visible to the student when they next view the file Multiple lines of code can be selected and the teacher can also edit/delete or add additional comments (from the 3 dots to the right of the comment window when the comment is saved) if required. When actioned by the student, the comment will be marked as resolved but will still be available for review in the Education -> Code Comments menu item or from the Guides settings area. Students can also go to this to see all comments and click to open the neccessary file.","title":"Code Commenting"},{"location":"courses/grading/#releasing-grades","text":"Video: Releasing Grades to Students and LMS By default students are not shown the grades until you decide to release them to the course. This allows you to hold back until you have completed the entire grading process and then release them in one go. If you want the students to see the grades as you go you can: enable this for the course in the Course>Admin area set this at the organisation level so any courses created will have this enabled automatically. See organisation release grades for more information. You can also release grades from the main assignment view flipping the switch in the Release grades column for the assignment(s) you wish to release the grades for. Students are able to see their grades either from their Course view or by opening the assignment and going to Education->Feedback You can also set up Notification emails to be sent to the students when new feedback is available for them to view","title":"Releasing Grades"},{"location":"courses/grading/#grading-free-text-questions","text":"Free text questions will normally require a manual grading process. In order to grade these questions, you should first select the assignment. You will then be shown the student list, as you can see below. You can now select a student. You will then be shown the list of all assessments for that student within the assignment. Free text questions are denoted by the icon highlighted below. Note that if a student has started to answer a question but not submitted the answer, then you will see DRAFT written next to it. Once they submit, you will see GRADE indicating that the question has been submitted and is ready to be graded.","title":"Grading free text questions"},{"location":"courses/grading/#partial-point-rubric","text":"Partial point assessments, where full points have not been awarded, will show the icon: Where an answer is set to allow partial points, a rubric is provided to allow graders to dynamically deduct points from the maximum score. A grader can add an item, change an item weight or remove an item at any time in grading. The change will be applied for all students in this assignment, and any changes in rubric will upgrade already graded students to implement changes. The rubric is dynamic for each assignment, and every new assignment starts with an empty rubric.","title":"Partial Point Rubric"},{"location":"courses/grading/#rubric","text":"Every rubric item is 2 fields, first is the rubric item weight and the second one line item name. If an item is selected, then the weight is deducted from students score. The grader can select multiple items. The total score can't be negative even if sum of rubric items weights is more than maximum points.","title":"Rubric"},{"location":"courses/grading/#editing","text":"Editing is allowed while grading so the teacher can: add a new item into the form remove an item. As this action will effect all students already graded and their total score updated, a warning is shown for confirmation edit the weight or name. If weight is changed a warning will be shown for confirmation","title":"Editing"},{"location":"courses/grading/#cloning","text":"A rubric can be cloned from another assignment if required in preference to creating manually. Select the gear icon (circled in image above) to select the assignment.","title":"Cloning"},{"location":"courses/grading/#points-adjust","text":"The points adjust field allows the teacher/instructor to manually adjust (ie reduce) the students total score if required without having to edit/change the rubric","title":"Points adjust"},{"location":"courses/grading/#feedback","text":"A comments field is provided to allow teacher/instructors manual feedback If a course deadline is reached, then you can grade questions that are set to DRAFT and where the student may have forgotten to submit the answer fully. You can also see the date and time for each submitted answer as well as the date that the assignment was marked as complete by the student.","title":"Feedback"},{"location":"courses/lti1_0/","text":"Learning Tools Interoperability (LTI) is a standard for passing user, organization, and course information between learning management systems (tool consumers) and learning tools and tool providers, such as Codio. Video: LMS Integration Overview LTI Keys and URLs \uf0c1 LTI Keys are used to integrate your LMS to Codio. These keys are required by your LMS administrator one time only so that Codio can be added as an LTI provider. Once Codio has been added as an LTI provider, you will not need them again and the remaining actions can be completed by LMS users who have Teacher/Instructor permissions. Course and assignment URLs will be copied and pasted into your LMS system, once for the LMS course/course and once for each LMS assignment. We have platform specific integration documentation for the following LMS platforms, although for most LMS systems you should be able to utilise the Codio LTI App Canvas Blackboard Moodle LTI Keys \uf0c1 LTI keys are accessible to Codio Organization Owners only. To find these keys: Go to your organization account settings by clicking on your user name in the bottom left of your dashboard and then selecting your organization within My Organizations . Select the LTI Integrations tab. Scroll down to the LTI Integration 1.0 section. You should see the following fields. Course LMS URL \uf0c1 The Course LMS URL is used to map an LMS course to a Codio course. It ensures that Codio knows how to redirect students back to the correct course should they attempt to access the course through the Codio dashboard. The LMS user who carries out these steps does not need to be a system administrator but must have suitable privileges to edit courses and assignments. In Codio, go to the Admin tab near the top. Select Edit Details in the bottom of the page. Near the bottom is a switch Enable LTI which you should enable. Below this is an empty field Course LMS URL . Switch back to your LMS and make sure you are on the Home page of the course. Copy the url in the address bar of your browser to the clipboard and paste it into the above mentioned field in Codio. Assignment URL \uf0c1 Please be sure to check out the Codio LTI App which allows for an easy way to integrate and to map Codio course assignments to your LMS system. If you are unable to utilise the Codio LTI App, the Assignment URL is where you map each individual assignment within your Codio course to the corresponding assignment in your LMS. It directs a student to the correct Codio assignment and will automatically open the Codio assignment. On the main course screen, click the icon with 3 blue dots for each of the assignments you wish to map and select LTI Integration URL . You should copy the LTI integration url to the clipboard by clicking on the field (it will auto copy). Complete the mapping in your LMS. Exporting LTI settings \uf0c1 The LTI integration URLs for the assignments in a course can be exported. Select the course, go to the Admin area and then press the Export LTI Settings button. Codio LTI App \uf0c1 The Codio LTI App allows an easy way to integrate Codio with supported LMS systems. Video - Connect Codio to Canvas using the LTI App: Please note the steps below are for implementation in Canvas. For details of other supported systems see https://www.eduappcenter.com/tutorials . Preparation \uf0c1 The following steps need to be taken only one time per course. In Codio \uf0c1 Go to your organization account settings by clicking on your user name in the bottom left of your dashboard and then selecting your organization within My Organizations . Select the LTI Integrations tab. Scroll down to the LTI Integration 1.0 section. You should see the following fields. Remain on this screen for the time being. In Canvas \uf0c1 The Canvas user who carries out these steps must be a system administrator. Create a new Course in your LMS system. We suggest you create a test course called Codio Test Course before you do it with a production course. Select the Course. Click on Settings in the left set of options. In the top links, select Apps . Click the large button View App Configurations . Click on the View App Center button. Navigate (or filter) to find the Codio app, select and + Add App In Codio and Canvas \uf0c1 We will now copy the following global integration fields from Codio to Canvas. LTI Consumer -> Consumer Key LTI Secret -> Shared Secret and select the Add App button to confirm. You should then have something similar to this: Course LMS URL \uf0c1 The Course LMS URL is used to map an LMS course to a Codio course. It ensures that Codio knows how to redirect students back to the correct course should they attempt to access the course through the Codio dashboard. If not entered and students log into Codio to try to start new assignments there will be no link for them to click to be passed to your LMS Course. The LMS user who carries out these steps does not need to be a system administrator but must have suitable privileges to edit courses and assignments. Video - Course LMS URL: In Codio, go to the Admin tab near the top. Select Edit Details in the bottom of the page. Near the bottom is a switch Enable LTI which you should enable. Below this is an empty field Course LMS URL . Switch back to your LMS and make sure you are on the Home page of the course. Copy the url in the address bar of your browser to the clipboard and paste it into the above mentioned field in Codio. Mapping Codio assignment to Canvas assignment \uf0c1 The Assignment URL is where you map each individual assignment within your Codio course to the corresponding assignment in your LMS. Where you have enabled the Codio LTI App in your LMS system, you can easily integrate assignments from your Codio course. Go to your Canvas Course and to Pages to add a new page, Click the Codio icon that will be available A list of the Codio course contents will be shown, simply select the assignment(s) you wish to add to Canvas and Save The assignment(s) and course will need to be published before students will be able to access them For other methods to integrate Codio with LMS systems, check out the sections below. LTI Constant URLs \uf0c1 Enabling this setting enables constant URL for course assignments, course detection will be done based on the custom parameter your LMS should pass. Constant URL's allows the transfer of learning content without modifying LTI links and they are also required if you wish to copy Codio courses and LMS Courses. See LTI Course Copy for more on this. Video - LTI Constant URL: Please note the screenshots below are for implementation in Canvas but other LMS systems should be similar. Refer to their documentation for more assistance Create an External app in your LMS using the configuration type: By URL Enter in the Consumer Key and Shared Secret from your Codio organisation Copy the XML URL into the Config URL field Submit Return to your Codio course and enable the Enable LTI constant URL's button, and save your changes Copy the LTI constant URL's enabled link N.B. If your LMS supports it, lis_course_offering_sourcedid is also supported as a unique course identifier so you can replace codio_class_target_id if required Return to your LMS external app and 'edit' Paste the LTI constant URL's enabled link into the Custom Field Submit LTI Course copy \uf0c1 Enabling this setting allows existing Codio course content used in your LMS to be copied into a new Codio course and a new course in your LMS. This should be enabled for the courses connected with the \"Master\" course in your LMS. The parameter will be disabled by default for for all copied courses. Video - LTI Course Copy: Note: This video was created before a recent naming change from LTI Course Fork to LTI Course Copy Please note the screenshots below are for implementation in Canvas but other LMS systems should be similar. Refer to their documentation for more assistance First enable LTI Constant URLs for your course. In your existing Codio course, enable the Enable LTI course copy button, and save your changes In your LMS \"Copy this Course\" (or equivalent term for your LMS) and create your new course When completed go to External Apps and edit the existing app connecting Codio to your LMS Replace the existing custom field that was set from your original Codio course with an id of your own (e.g something like codio_class_target_id=my_class_id_10) N.B. If your LMS supports lis_course_offering_sourcedid you do not need to specify codio_class_target_id for the copied course, lis_course_offering_sourcedid will be used automatically to detect the course In your existing Codio course, copy the content of the LTI course copy enabled field into a new line in the 'Edit App' custom field Submit In the new course created in your LMS, open one of the new assignments and this will then create the new course in Codio containing the content from your original Codio course. Grading \uf0c1 When grades are released a URL is passed to the LMS where students/teachers can access the grading information for the assignment in the grading area of the LMS By default, only the course teachers and the individual student can access the grading preview URL but by enabling the LMS shared feedback option for the course, this will pass a different URL back to your LMS system where anyone who knows the URL can access the students grading information Canvas \uf0c1 Please be sure to check out the Codio LTI App which allows for an easy way to integrate and to map Codio course assignments to your Canvas system but if that can't be used you can manually integrate following these steps Preparation \uf0c1 The following steps need to be taken only one time per course. In Codio \uf0c1 Go to your organization account settings by clicking on your user name in the bottom left of your dashboard and then selecting your organization within My Organizations . Select the LTI Integrations tab. Scroll down to the LTI Integration 1.0 section. You should see the following fields. Remain on this screen for the time being. In Canvas, adding Codio as an App \uf0c1 The Canvas user who carries out these steps must be a system administrator. Create a new Course in Canvas. We suggest you create a test course called Codio Canvas before you do it with a production course. Select the Course. Click on Settings in the left set of options. In the top links, select Apps . Click the large button View App Configurations . Click on the blue + App button. In Codio and Canvas \uf0c1 We will now copy the following global integration fields from Codio to Canvas. LTI Consumer -> Consumer Key LTI Secret -> Shared Secret LTI URL -> Launch URL In Canvas you should then use one of the following steps Manual Entry \uf0c1 Enter a suitable name (Codio Canvas LTI) in the Name field. Enter apollo.codio.com into the Domain field. In the Privacy field, select Public If you do not wish your LMS to share your students name/email addresses to Codio you can select the Anonymous privacy setting but be aware if doing so, any notifications you may wish to set up will not reach those students. Paste in the 3 Codio fields to the appropriate fields You should end up with something like this. By URL \uf0c1 Enter a suitable name (Codio Canvas LTI) in the Name field. In Codio select the Copy Consumer button to copy in to the Consumer Key field. select the Copy Secret Key to copy in to the Shared Secret field. select the Copy XML URL to copy in the to the Config URL field. and Submit Paste XML \uf0c1 Enter a suitable name (Codio Canvas LTI) in the Name field. In Codio select the Copy Consumer button to copy in to the Consumer Key field. select the Copy Secret Key to copy in to the Shared Secret field. click on the XML Configuration link to open the XML and then copy in the to the XML Configuration field. and Submit Codio course setup \uf0c1 You need to perform the following actions one time only for a course. The Canvas user who carries out these steps does not need to be a system administrator but must have suitable privileges to edit courses and assignments. In Codio, create a new course and name it Canvas Demo . Click on the Admin tab near the top. Select Edit Details in the bottom of the page. Near the bottom is a switch Enable LTI which you should enable. Below this is an empty field Course LMS URL . Switch back to Canvas and make sure you are on the Home page of the course. Copy the url in the address bar of your browser to the clipboard and paste it into the above mentioned field in Codio. The url format should end with something like /courses/1121212 although the number will be different. This URL ensures that Codio knows how to redirect students back to the correct Canvas course should they attempt to access the course through their dashboard. Mapping an Assignment to a Canvas Assignment \uf0c1 The final mapping step needs to be taken for each individual assignment within Codio. It maps a Canvas assignment to a Codio assignment. In Codio \uf0c1 On the main course screen, make sure the Assignments tab is selected. Click the + button and select Add Project . Select a project that has some autograded assessments. The My First Project that you created earlier in the Onboarding Guide has some auto-graded assessments. You can also assign another project but you will need to manually grade the assignment so there are some scores to pass back to the Canvas gradebook. Once the assignment has been added to the course, you should click the icon with 3 blue dots and select LTI Integration URL . You should copy the LTI integration url to the clipboard by clicking on the field (it will auto copy). In Canvas \uf0c1 We now return to Canvas complete the mapping. Make sure you are in the Courses area. Click on the Assignments link in the left hand side. Provide a name for the Assignment. Set the points for the Assignment. When the grades get passed back later, the Codio percentage score will be scaled to the points value you specify here. Scroll down and look for the Submission Type field. You should now click on the dropdown list and select External Tool . In the new set of fields that appear, paste the Codio LTI Integration URL field into the url field in Canvas. Select Load This Tool In a New Tab . Click the Save and Publish button. Make sure the Canvas course is published. Adding faculty and students \uf0c1 The final step is to add students to your course. This is done from the People tab. We recommend that you add the same test students to Canvas that you have in Codio. The only field of data that needs to match is the email address. So, look up the Codio test student email addresses and add them to Canvas in the student role. When you add a student in Canvas you will need to confirm from the email you are sent. Important : make sure you log out of your teacher based Canvas session before doing this. Next, you should login to Canvas as a test student and start the assignment. Please read on to see what happens next, which is dependent. Important : when you access Codio from Canvas, this user will become the dominant Codio user in the browser. This means that if you have a Codio session open (say you are logged in as faculty) and you start an assignment from Canvas as a student, the old Codio session will be invalidated. To get around this, you should think about running your teacher account in a separate browser type or in an incognito window. Just be aware of this when testing. Single sign-in and account creation \uf0c1 It is important to understand how Codio maps Canvas users to Codio users. The following rules should be understood. If students or faculty access Codio via a Canvas assignment then Codio will initially use the Canvas email address to identify the user and create the Codio account. In all subsequent access, the Canvas userID will be used so in the event the user changes their email address in Canvas, the user will be mapped to the same Codio account. If the user is not known to Codio then we will sign up the user as a new Codio user in the background and take the user directly into the Codio content. The Canvas user role will be carried over as well. If the user is known to Codio then Codio will take them directly into the Codio content without any sign-in required. If they are a Codio user but are not a member of your organization then they will be required to complete a verification via email. Teacher Roles \uf0c1 Based on the LMS role, if teachers join Codio via the LMS, the following will apply: LMS Role Will be added to Codio with these rights Teaching Assistant TEACHER Content Developer TEACHER Mentor TEACHER (with read only access to the course} Generating scores \uf0c1 You should now generate some scores to pass back to Codio. You can do either of the following. If your assigned Codio assignment has some autograded assessments (simple MCQs will do fine) then access the Codio content as students as answer the questions to generate a score You can also manually grade the student assignment in Codio. You will need to enter a percentage value here as the LMS/LTI interface requires this. Releasing grades \uf0c1 By default, grades in Codio are neither passed back to the student nor to Canvas until they are Marked as complete by either the student or the teacher and the Release Grades switch is enabled (or if you have set the course to automatically release grades when completed) Once Release Grades is enabled, all completed student assignments are automatically sent through. There are various ways to mark a student's work as complete The student can do this from either the Course dashboard or from the Education->Mark as Complete menu in the assignment itself. The teacher can do the same in the assignment when viewing students code The teacher can do the same from the assignment in the Course dashboard by hovering in the left side of a student entry and then setting the completed switch. The teacher can mark all student assignments as completed in one action. This is done by selecting the assignment in the Course pressing the Action button pressing the Mark all as Completed button Blackboard \uf0c1 Please be sure to check out the Codio LTI App which allows for an easy way to integrate and to map Codio course assignments to your LMS system. The following page explains how to set up external apps in Blackboard Learn. Preparation \uf0c1 The following steps need to be taken only one time per course. In Codio \uf0c1 Go to your organization account settings by clicking on your user name in the bottom left of your dashboard and then selecting your organization within My Organizations . Select the LTI Integrations tab. Scroll down to the LTI Integration 1.0 section. You should see the following fields. Remain on this screen for the time being. In Blackboard \uf0c1 The Blackboard user who carries out these steps must be a Blackboard system administrator. Create a new Course in Blackboard. We suggest you create a test course called Codio Blackboard before you do it with a production course. Look for the System Admin tab near the top right of the page and select it. Look for the Building Blocks section and select it. Click on LTI tool providers . Click on Register Provider Domain in the menu bar. In the Provider Domain field, enter apollo.codio.com . In the Default Configuration section, set Default Configuration to be Set globally . In the Organization Policies section you should set Send User Data to Send user data only over SSL . in User Fields to Send you should set all 3 fields (Constituency in Course, Name, Email Address). If you do not wish your LMS to share your students name/email addresses to Codio you can deselect the Name, Email address but be aware if doing so, any notifications you may wish to set up will not reach those students. In Codio and Blackboard \uf0c1 Now return to the Default Configuration section in Blackboard. We will now copy the following global integration fields from Codio to Blackboard. LTI Consumer -> Tool Provider Key LTI Secret -> Tool Provider Secret Codio course setup \uf0c1 You need to perform the following actions one time only for a course. The Blackboard user who carries out these steps does not need to be a system administrator but must have suitable privileges to edit courses and assignments. Create a new course and name it Blackboard Demo . In the main course screen, click on the Admin tab near the top. Select Edit Details in the bottom of the page. Near the bottom is a switch Enable LTI which you should enable. Below this is an empty field Course LMS URL . Switch back to Blackboard and make sure you are on the main the Codio Blackboard course you created earlier. Copy the url in the address bar of your browser to the clipboard and paste it into the above mentioned field in Codio. This URL ensures that Codio knows how to redirect students back to the correct Blackboard course should they attempt to access the course through their dashboard. Mapping an assignment to Blackboard Content \uf0c1 The final mapping step needs to be taken for each individual assignment within Codio. It maps a piece of Blackboard content to a Codio assignment. In Codio \uf0c1 On the main course screen, make sure the Assignments tab is selected. Click the + button and select Add Project . Select a project that has some autograded assessments. The My First Project that you created earlier in the Onboarding Guide has some auto-graded assessments. You can also assign another project but you will need to manually grade the assignment so there are some scores to pass back to the Blackboard gradebook. Once the assignment has been added to the course, you should click the icon with 3 blue dots and select LTI Integration URL . You should copy the LTI integration url to the clipboard by clicking on the field (it will auto copy). In Blackboard \uf0c1 We now return to Blackboard complete the mapping. Make sure you have selected the Blackboard course. Click Content in the left hand menu. Select or hover over Build Content in the menu bar Select Web Link . In the Web Link Information section ... Enter a name for the content Paste in the LTI Integration URL that you just copied to the clipboard from Codio Check the box Ths is a link to a tool provider Select Yes for the field Enable Evaulation after which more fields will appear Set the points you want to award for this content (Codio will automatically scale the percentage value it uses to the points you specify here) Save the content settings. Adding faculty and students \uf0c1 The final step is to add students to your course. This is done from the People tab. We recommend that you add the same test students to Blackboard that you have in Codio. The only field of data that needs to match is the email address. So, look up the Codio test student email addresses and add them to Blackboard in the student role. Next, you should login to Blackboard as a test student and start the assignment. Please read on to see what happens next, which is dependent. IMPORTANT : when you access Codio from Blackboard, this user will become the dominant Codio user in the browser. This means that if you have a Codio session open (say you are logged in as faculty) and open some content from Blackboard as a student, the old Codio session will be invalidated. To get around this, you should think about running your teacher account in a separate browser type or in an incognito window. Just be aware of this when testing. Single sign-in and account creation \uf0c1 It is important to understand how Codio maps Blackboard users to Codio users. The following rules should be understood. If students or faculty access Codio via a Blackboard assignment then Codio will initially use the Blackboard email address to identify the user and create the Codio account. In all subsequent access, the Blackboard userID will be used so in the event the user changes their email address in Blackboard, the user will be mapped to the same Codio account. If the user is not known to Codio then we will sign up the user as a new Codio user in the background and take the user directly into the Codio content. The Blackboard user role will be carried over as well. If the user is known to Codio then Codio will take them directly into the Codio content without any sign-in required. If they are a Codio user but are not a member of your organization then they will be required to complete a verification via email. Teacher Roles \uf0c1 Based on the LMS role, if teachers join Codio via the LMS, the following will apply: LMS Role Will be added to Codio with these rights Teaching Assistant TEACHER Content Developer TEACHER Mentor TEACHER (with read only access to the course} Generating scores \uf0c1 You should now generate some scores to pass back to Codio. You can do either of the following. If your assigned Codio assignment has some autograded assessments (simple MCQs will do fine) then access the Codio content as students as answer the questions to generate a score You can also manually grade the student assignment in Codio. You will need to enter a percentage value here as the LMS/LTI interface requires this. Releasing grades \uf0c1 By default, grades in Codio are neither passed back to the student nor to Blackboard until they are Marked as complete by either the student or the teacher and the Release Grades switch is enabled. Once Release Grades is enabled, all completed student assignments are automatically sent through. There are various ways to mark a student's work as complete The student can do this from either the course dashboard or from the Education->Mark as Complete menu in the assignment itself. The teacher can do the same in the assignment when viewing students code The teacher can do the same from the assignment in the course dashboard by hovering in the left side of a student entry and then setting the completed switch. The teacher can mark all student assignments as completed in one action. This is done by selecting the assignment in the Course pressing the Action button pressing the Mark all as Completed button Important : If you are running a staging or test Blackboard environment then you must have a valid SSL certificate on your Blackboard server otherwise grades will not be pass back to Blackboard successfully. Moodle \uf0c1 Please be sure to check out the Codio LTI App which allows for an easy way to integrate and to map Codio course assignments to your LMS system. Moodle added support for LTI\u2122 apps in version 2.2. The following page explains how to set up external apps in Moodle. Setup and configuration \uf0c1 Important : Codio needs the User Role, Email Address and Name of the Moodle user in order to work. It is important that you access the LTI security settings and ensure that these three fields are always enabled. If they are not available, contact Moodle support who can help you enable this. If enabled after you have mapped Codio content to Moodle, you may need to re publish for the changes to be implemented Video: Connect Moodle to Codio using the LTI Integration URL Authentication and account creation \uf0c1 Once you have configured the LTI/LMS settings, Moodle manages all aspects of signing in to Codio as well as account creation. All your teachers and students need is a Moodle account. If a Moodle user has never used Codio before then an account will automatically be created from their email address when they access their first Codio course materials. If you do not wish your LMS to share your students name/email addresses to Codio you can select the Anonymous privacy setting but be aware if doing so, any notifications you may wish to set up will not reach those students. If a Moodle user already has a Codio account then provided the email address of their Moodle account is the same, the same Codio account will be used.","title":"Integrating with LTI 1.1 systems"},{"location":"courses/lti1_0/#lti-keys-and-urls","text":"LTI Keys are used to integrate your LMS to Codio. These keys are required by your LMS administrator one time only so that Codio can be added as an LTI provider. Once Codio has been added as an LTI provider, you will not need them again and the remaining actions can be completed by LMS users who have Teacher/Instructor permissions. Course and assignment URLs will be copied and pasted into your LMS system, once for the LMS course/course and once for each LMS assignment. We have platform specific integration documentation for the following LMS platforms, although for most LMS systems you should be able to utilise the Codio LTI App Canvas Blackboard Moodle","title":"LTI Keys and URLs"},{"location":"courses/lti1_0/#lti-keys","text":"LTI keys are accessible to Codio Organization Owners only. To find these keys: Go to your organization account settings by clicking on your user name in the bottom left of your dashboard and then selecting your organization within My Organizations . Select the LTI Integrations tab. Scroll down to the LTI Integration 1.0 section. You should see the following fields.","title":"LTI Keys"},{"location":"courses/lti1_0/#course-lms-url","text":"The Course LMS URL is used to map an LMS course to a Codio course. It ensures that Codio knows how to redirect students back to the correct course should they attempt to access the course through the Codio dashboard. The LMS user who carries out these steps does not need to be a system administrator but must have suitable privileges to edit courses and assignments. In Codio, go to the Admin tab near the top. Select Edit Details in the bottom of the page. Near the bottom is a switch Enable LTI which you should enable. Below this is an empty field Course LMS URL . Switch back to your LMS and make sure you are on the Home page of the course. Copy the url in the address bar of your browser to the clipboard and paste it into the above mentioned field in Codio.","title":"Course LMS URL"},{"location":"courses/lti1_0/#assignment-url","text":"Please be sure to check out the Codio LTI App which allows for an easy way to integrate and to map Codio course assignments to your LMS system. If you are unable to utilise the Codio LTI App, the Assignment URL is where you map each individual assignment within your Codio course to the corresponding assignment in your LMS. It directs a student to the correct Codio assignment and will automatically open the Codio assignment. On the main course screen, click the icon with 3 blue dots for each of the assignments you wish to map and select LTI Integration URL . You should copy the LTI integration url to the clipboard by clicking on the field (it will auto copy). Complete the mapping in your LMS.","title":"Assignment URL"},{"location":"courses/lti1_0/#exporting-lti-settings","text":"The LTI integration URLs for the assignments in a course can be exported. Select the course, go to the Admin area and then press the Export LTI Settings button.","title":"Exporting LTI settings"},{"location":"courses/lti1_0/#codio-lti-app","text":"The Codio LTI App allows an easy way to integrate Codio with supported LMS systems. Video - Connect Codio to Canvas using the LTI App: Please note the steps below are for implementation in Canvas. For details of other supported systems see https://www.eduappcenter.com/tutorials .","title":"Codio LTI App"},{"location":"courses/lti1_0/#preparation","text":"The following steps need to be taken only one time per course.","title":"Preparation"},{"location":"courses/lti1_0/#in-codio","text":"Go to your organization account settings by clicking on your user name in the bottom left of your dashboard and then selecting your organization within My Organizations . Select the LTI Integrations tab. Scroll down to the LTI Integration 1.0 section. You should see the following fields. Remain on this screen for the time being.","title":"In Codio"},{"location":"courses/lti1_0/#in-canvas","text":"The Canvas user who carries out these steps must be a system administrator. Create a new Course in your LMS system. We suggest you create a test course called Codio Test Course before you do it with a production course. Select the Course. Click on Settings in the left set of options. In the top links, select Apps . Click the large button View App Configurations . Click on the View App Center button. Navigate (or filter) to find the Codio app, select and + Add App","title":"In Canvas"},{"location":"courses/lti1_0/#in-codio-and-canvas","text":"We will now copy the following global integration fields from Codio to Canvas. LTI Consumer -> Consumer Key LTI Secret -> Shared Secret and select the Add App button to confirm. You should then have something similar to this:","title":"In Codio and Canvas"},{"location":"courses/lti1_0/#course-lms-url_1","text":"The Course LMS URL is used to map an LMS course to a Codio course. It ensures that Codio knows how to redirect students back to the correct course should they attempt to access the course through the Codio dashboard. If not entered and students log into Codio to try to start new assignments there will be no link for them to click to be passed to your LMS Course. The LMS user who carries out these steps does not need to be a system administrator but must have suitable privileges to edit courses and assignments. Video - Course LMS URL: In Codio, go to the Admin tab near the top. Select Edit Details in the bottom of the page. Near the bottom is a switch Enable LTI which you should enable. Below this is an empty field Course LMS URL . Switch back to your LMS and make sure you are on the Home page of the course. Copy the url in the address bar of your browser to the clipboard and paste it into the above mentioned field in Codio.","title":"Course LMS URL"},{"location":"courses/lti1_0/#mapping-codio-assignment-to-canvas-assignment","text":"The Assignment URL is where you map each individual assignment within your Codio course to the corresponding assignment in your LMS. Where you have enabled the Codio LTI App in your LMS system, you can easily integrate assignments from your Codio course. Go to your Canvas Course and to Pages to add a new page, Click the Codio icon that will be available A list of the Codio course contents will be shown, simply select the assignment(s) you wish to add to Canvas and Save The assignment(s) and course will need to be published before students will be able to access them For other methods to integrate Codio with LMS systems, check out the sections below.","title":"Mapping Codio assignment to Canvas assignment"},{"location":"courses/lti1_0/#lti-constant-urls","text":"Enabling this setting enables constant URL for course assignments, course detection will be done based on the custom parameter your LMS should pass. Constant URL's allows the transfer of learning content without modifying LTI links and they are also required if you wish to copy Codio courses and LMS Courses. See LTI Course Copy for more on this. Video - LTI Constant URL: Please note the screenshots below are for implementation in Canvas but other LMS systems should be similar. Refer to their documentation for more assistance Create an External app in your LMS using the configuration type: By URL Enter in the Consumer Key and Shared Secret from your Codio organisation Copy the XML URL into the Config URL field Submit Return to your Codio course and enable the Enable LTI constant URL's button, and save your changes Copy the LTI constant URL's enabled link N.B. If your LMS supports it, lis_course_offering_sourcedid is also supported as a unique course identifier so you can replace codio_class_target_id if required Return to your LMS external app and 'edit' Paste the LTI constant URL's enabled link into the Custom Field Submit","title":"LTI Constant URLs"},{"location":"courses/lti1_0/#lti-course-copy","text":"Enabling this setting allows existing Codio course content used in your LMS to be copied into a new Codio course and a new course in your LMS. This should be enabled for the courses connected with the \"Master\" course in your LMS. The parameter will be disabled by default for for all copied courses. Video - LTI Course Copy: Note: This video was created before a recent naming change from LTI Course Fork to LTI Course Copy Please note the screenshots below are for implementation in Canvas but other LMS systems should be similar. Refer to their documentation for more assistance First enable LTI Constant URLs for your course. In your existing Codio course, enable the Enable LTI course copy button, and save your changes In your LMS \"Copy this Course\" (or equivalent term for your LMS) and create your new course When completed go to External Apps and edit the existing app connecting Codio to your LMS Replace the existing custom field that was set from your original Codio course with an id of your own (e.g something like codio_class_target_id=my_class_id_10) N.B. If your LMS supports lis_course_offering_sourcedid you do not need to specify codio_class_target_id for the copied course, lis_course_offering_sourcedid will be used automatically to detect the course In your existing Codio course, copy the content of the LTI course copy enabled field into a new line in the 'Edit App' custom field Submit In the new course created in your LMS, open one of the new assignments and this will then create the new course in Codio containing the content from your original Codio course.","title":"LTI Course copy"},{"location":"courses/lti1_0/#grading","text":"When grades are released a URL is passed to the LMS where students/teachers can access the grading information for the assignment in the grading area of the LMS By default, only the course teachers and the individual student can access the grading preview URL but by enabling the LMS shared feedback option for the course, this will pass a different URL back to your LMS system where anyone who knows the URL can access the students grading information","title":"Grading"},{"location":"courses/lti1_0/#canvas","text":"Please be sure to check out the Codio LTI App which allows for an easy way to integrate and to map Codio course assignments to your Canvas system but if that can't be used you can manually integrate following these steps","title":"Canvas"},{"location":"courses/lti1_0/#preparation_1","text":"The following steps need to be taken only one time per course.","title":"Preparation"},{"location":"courses/lti1_0/#in-codio_1","text":"Go to your organization account settings by clicking on your user name in the bottom left of your dashboard and then selecting your organization within My Organizations . Select the LTI Integrations tab. Scroll down to the LTI Integration 1.0 section. You should see the following fields. Remain on this screen for the time being.","title":"In Codio"},{"location":"courses/lti1_0/#in-canvas-adding-codio-as-an-app","text":"The Canvas user who carries out these steps must be a system administrator. Create a new Course in Canvas. We suggest you create a test course called Codio Canvas before you do it with a production course. Select the Course. Click on Settings in the left set of options. In the top links, select Apps . Click the large button View App Configurations . Click on the blue + App button.","title":"In Canvas, adding Codio as an App"},{"location":"courses/lti1_0/#in-codio-and-canvas_1","text":"We will now copy the following global integration fields from Codio to Canvas. LTI Consumer -> Consumer Key LTI Secret -> Shared Secret LTI URL -> Launch URL In Canvas you should then use one of the following steps","title":"In Codio and Canvas"},{"location":"courses/lti1_0/#manual-entry","text":"Enter a suitable name (Codio Canvas LTI) in the Name field. Enter apollo.codio.com into the Domain field. In the Privacy field, select Public If you do not wish your LMS to share your students name/email addresses to Codio you can select the Anonymous privacy setting but be aware if doing so, any notifications you may wish to set up will not reach those students. Paste in the 3 Codio fields to the appropriate fields You should end up with something like this.","title":"Manual Entry"},{"location":"courses/lti1_0/#by-url","text":"Enter a suitable name (Codio Canvas LTI) in the Name field. In Codio select the Copy Consumer button to copy in to the Consumer Key field. select the Copy Secret Key to copy in to the Shared Secret field. select the Copy XML URL to copy in the to the Config URL field. and Submit","title":"By URL"},{"location":"courses/lti1_0/#paste-xml","text":"Enter a suitable name (Codio Canvas LTI) in the Name field. In Codio select the Copy Consumer button to copy in to the Consumer Key field. select the Copy Secret Key to copy in to the Shared Secret field. click on the XML Configuration link to open the XML and then copy in the to the XML Configuration field. and Submit","title":"Paste XML"},{"location":"courses/lti1_0/#codio-course-setup","text":"You need to perform the following actions one time only for a course. The Canvas user who carries out these steps does not need to be a system administrator but must have suitable privileges to edit courses and assignments. In Codio, create a new course and name it Canvas Demo . Click on the Admin tab near the top. Select Edit Details in the bottom of the page. Near the bottom is a switch Enable LTI which you should enable. Below this is an empty field Course LMS URL . Switch back to Canvas and make sure you are on the Home page of the course. Copy the url in the address bar of your browser to the clipboard and paste it into the above mentioned field in Codio. The url format should end with something like /courses/1121212 although the number will be different. This URL ensures that Codio knows how to redirect students back to the correct Canvas course should they attempt to access the course through their dashboard.","title":"Codio course setup"},{"location":"courses/lti1_0/#mapping-an-assignment-to-a-canvas-assignment","text":"The final mapping step needs to be taken for each individual assignment within Codio. It maps a Canvas assignment to a Codio assignment.","title":"Mapping an Assignment to a Canvas Assignment"},{"location":"courses/lti1_0/#in-codio_2","text":"On the main course screen, make sure the Assignments tab is selected. Click the + button and select Add Project . Select a project that has some autograded assessments. The My First Project that you created earlier in the Onboarding Guide has some auto-graded assessments. You can also assign another project but you will need to manually grade the assignment so there are some scores to pass back to the Canvas gradebook. Once the assignment has been added to the course, you should click the icon with 3 blue dots and select LTI Integration URL . You should copy the LTI integration url to the clipboard by clicking on the field (it will auto copy).","title":"In Codio"},{"location":"courses/lti1_0/#in-canvas_1","text":"We now return to Canvas complete the mapping. Make sure you are in the Courses area. Click on the Assignments link in the left hand side. Provide a name for the Assignment. Set the points for the Assignment. When the grades get passed back later, the Codio percentage score will be scaled to the points value you specify here. Scroll down and look for the Submission Type field. You should now click on the dropdown list and select External Tool . In the new set of fields that appear, paste the Codio LTI Integration URL field into the url field in Canvas. Select Load This Tool In a New Tab . Click the Save and Publish button. Make sure the Canvas course is published.","title":"In Canvas"},{"location":"courses/lti1_0/#adding-faculty-and-students","text":"The final step is to add students to your course. This is done from the People tab. We recommend that you add the same test students to Canvas that you have in Codio. The only field of data that needs to match is the email address. So, look up the Codio test student email addresses and add them to Canvas in the student role. When you add a student in Canvas you will need to confirm from the email you are sent. Important : make sure you log out of your teacher based Canvas session before doing this. Next, you should login to Canvas as a test student and start the assignment. Please read on to see what happens next, which is dependent. Important : when you access Codio from Canvas, this user will become the dominant Codio user in the browser. This means that if you have a Codio session open (say you are logged in as faculty) and you start an assignment from Canvas as a student, the old Codio session will be invalidated. To get around this, you should think about running your teacher account in a separate browser type or in an incognito window. Just be aware of this when testing.","title":"Adding faculty and students"},{"location":"courses/lti1_0/#single-sign-in-and-account-creation","text":"It is important to understand how Codio maps Canvas users to Codio users. The following rules should be understood. If students or faculty access Codio via a Canvas assignment then Codio will initially use the Canvas email address to identify the user and create the Codio account. In all subsequent access, the Canvas userID will be used so in the event the user changes their email address in Canvas, the user will be mapped to the same Codio account. If the user is not known to Codio then we will sign up the user as a new Codio user in the background and take the user directly into the Codio content. The Canvas user role will be carried over as well. If the user is known to Codio then Codio will take them directly into the Codio content without any sign-in required. If they are a Codio user but are not a member of your organization then they will be required to complete a verification via email.","title":"Single sign-in and account creation"},{"location":"courses/lti1_0/#teacher-roles","text":"Based on the LMS role, if teachers join Codio via the LMS, the following will apply: LMS Role Will be added to Codio with these rights Teaching Assistant TEACHER Content Developer TEACHER Mentor TEACHER (with read only access to the course}","title":"Teacher Roles"},{"location":"courses/lti1_0/#generating-scores","text":"You should now generate some scores to pass back to Codio. You can do either of the following. If your assigned Codio assignment has some autograded assessments (simple MCQs will do fine) then access the Codio content as students as answer the questions to generate a score You can also manually grade the student assignment in Codio. You will need to enter a percentage value here as the LMS/LTI interface requires this.","title":"Generating scores"},{"location":"courses/lti1_0/#releasing-grades","text":"By default, grades in Codio are neither passed back to the student nor to Canvas until they are Marked as complete by either the student or the teacher and the Release Grades switch is enabled (or if you have set the course to automatically release grades when completed) Once Release Grades is enabled, all completed student assignments are automatically sent through. There are various ways to mark a student's work as complete The student can do this from either the Course dashboard or from the Education->Mark as Complete menu in the assignment itself. The teacher can do the same in the assignment when viewing students code The teacher can do the same from the assignment in the Course dashboard by hovering in the left side of a student entry and then setting the completed switch. The teacher can mark all student assignments as completed in one action. This is done by selecting the assignment in the Course pressing the Action button pressing the Mark all as Completed button","title":"Releasing grades"},{"location":"courses/lti1_0/#blackboard","text":"Please be sure to check out the Codio LTI App which allows for an easy way to integrate and to map Codio course assignments to your LMS system. The following page explains how to set up external apps in Blackboard Learn.","title":"Blackboard"},{"location":"courses/lti1_0/#preparation_2","text":"The following steps need to be taken only one time per course.","title":"Preparation"},{"location":"courses/lti1_0/#in-codio_3","text":"Go to your organization account settings by clicking on your user name in the bottom left of your dashboard and then selecting your organization within My Organizations . Select the LTI Integrations tab. Scroll down to the LTI Integration 1.0 section. You should see the following fields. Remain on this screen for the time being.","title":"In Codio"},{"location":"courses/lti1_0/#in-blackboard","text":"The Blackboard user who carries out these steps must be a Blackboard system administrator. Create a new Course in Blackboard. We suggest you create a test course called Codio Blackboard before you do it with a production course. Look for the System Admin tab near the top right of the page and select it. Look for the Building Blocks section and select it. Click on LTI tool providers . Click on Register Provider Domain in the menu bar. In the Provider Domain field, enter apollo.codio.com . In the Default Configuration section, set Default Configuration to be Set globally . In the Organization Policies section you should set Send User Data to Send user data only over SSL . in User Fields to Send you should set all 3 fields (Constituency in Course, Name, Email Address). If you do not wish your LMS to share your students name/email addresses to Codio you can deselect the Name, Email address but be aware if doing so, any notifications you may wish to set up will not reach those students.","title":"In Blackboard"},{"location":"courses/lti1_0/#in-codio-and-blackboard","text":"Now return to the Default Configuration section in Blackboard. We will now copy the following global integration fields from Codio to Blackboard. LTI Consumer -> Tool Provider Key LTI Secret -> Tool Provider Secret","title":"In Codio and Blackboard"},{"location":"courses/lti1_0/#codio-course-setup_1","text":"You need to perform the following actions one time only for a course. The Blackboard user who carries out these steps does not need to be a system administrator but must have suitable privileges to edit courses and assignments. Create a new course and name it Blackboard Demo . In the main course screen, click on the Admin tab near the top. Select Edit Details in the bottom of the page. Near the bottom is a switch Enable LTI which you should enable. Below this is an empty field Course LMS URL . Switch back to Blackboard and make sure you are on the main the Codio Blackboard course you created earlier. Copy the url in the address bar of your browser to the clipboard and paste it into the above mentioned field in Codio. This URL ensures that Codio knows how to redirect students back to the correct Blackboard course should they attempt to access the course through their dashboard.","title":"Codio course setup"},{"location":"courses/lti1_0/#mapping-an-assignment-to-blackboard-content","text":"The final mapping step needs to be taken for each individual assignment within Codio. It maps a piece of Blackboard content to a Codio assignment.","title":"Mapping an assignment to Blackboard Content"},{"location":"courses/lti1_0/#in-codio_4","text":"On the main course screen, make sure the Assignments tab is selected. Click the + button and select Add Project . Select a project that has some autograded assessments. The My First Project that you created earlier in the Onboarding Guide has some auto-graded assessments. You can also assign another project but you will need to manually grade the assignment so there are some scores to pass back to the Blackboard gradebook. Once the assignment has been added to the course, you should click the icon with 3 blue dots and select LTI Integration URL . You should copy the LTI integration url to the clipboard by clicking on the field (it will auto copy).","title":"In Codio"},{"location":"courses/lti1_0/#in-blackboard_1","text":"We now return to Blackboard complete the mapping. Make sure you have selected the Blackboard course. Click Content in the left hand menu. Select or hover over Build Content in the menu bar Select Web Link . In the Web Link Information section ... Enter a name for the content Paste in the LTI Integration URL that you just copied to the clipboard from Codio Check the box Ths is a link to a tool provider Select Yes for the field Enable Evaulation after which more fields will appear Set the points you want to award for this content (Codio will automatically scale the percentage value it uses to the points you specify here) Save the content settings.","title":"In Blackboard"},{"location":"courses/lti1_0/#adding-faculty-and-students_1","text":"The final step is to add students to your course. This is done from the People tab. We recommend that you add the same test students to Blackboard that you have in Codio. The only field of data that needs to match is the email address. So, look up the Codio test student email addresses and add them to Blackboard in the student role. Next, you should login to Blackboard as a test student and start the assignment. Please read on to see what happens next, which is dependent. IMPORTANT : when you access Codio from Blackboard, this user will become the dominant Codio user in the browser. This means that if you have a Codio session open (say you are logged in as faculty) and open some content from Blackboard as a student, the old Codio session will be invalidated. To get around this, you should think about running your teacher account in a separate browser type or in an incognito window. Just be aware of this when testing.","title":"Adding faculty and students"},{"location":"courses/lti1_0/#single-sign-in-and-account-creation_1","text":"It is important to understand how Codio maps Blackboard users to Codio users. The following rules should be understood. If students or faculty access Codio via a Blackboard assignment then Codio will initially use the Blackboard email address to identify the user and create the Codio account. In all subsequent access, the Blackboard userID will be used so in the event the user changes their email address in Blackboard, the user will be mapped to the same Codio account. If the user is not known to Codio then we will sign up the user as a new Codio user in the background and take the user directly into the Codio content. The Blackboard user role will be carried over as well. If the user is known to Codio then Codio will take them directly into the Codio content without any sign-in required. If they are a Codio user but are not a member of your organization then they will be required to complete a verification via email.","title":"Single sign-in and account creation"},{"location":"courses/lti1_0/#teacher-roles_1","text":"Based on the LMS role, if teachers join Codio via the LMS, the following will apply: LMS Role Will be added to Codio with these rights Teaching Assistant TEACHER Content Developer TEACHER Mentor TEACHER (with read only access to the course}","title":"Teacher Roles"},{"location":"courses/lti1_0/#generating-scores_1","text":"You should now generate some scores to pass back to Codio. You can do either of the following. If your assigned Codio assignment has some autograded assessments (simple MCQs will do fine) then access the Codio content as students as answer the questions to generate a score You can also manually grade the student assignment in Codio. You will need to enter a percentage value here as the LMS/LTI interface requires this.","title":"Generating scores"},{"location":"courses/lti1_0/#releasing-grades_1","text":"By default, grades in Codio are neither passed back to the student nor to Blackboard until they are Marked as complete by either the student or the teacher and the Release Grades switch is enabled. Once Release Grades is enabled, all completed student assignments are automatically sent through. There are various ways to mark a student's work as complete The student can do this from either the course dashboard or from the Education->Mark as Complete menu in the assignment itself. The teacher can do the same in the assignment when viewing students code The teacher can do the same from the assignment in the course dashboard by hovering in the left side of a student entry and then setting the completed switch. The teacher can mark all student assignments as completed in one action. This is done by selecting the assignment in the Course pressing the Action button pressing the Mark all as Completed button Important : If you are running a staging or test Blackboard environment then you must have a valid SSL certificate on your Blackboard server otherwise grades will not be pass back to Blackboard successfully.","title":"Releasing grades"},{"location":"courses/lti1_0/#moodle","text":"Please be sure to check out the Codio LTI App which allows for an easy way to integrate and to map Codio course assignments to your LMS system. Moodle added support for LTI\u2122 apps in version 2.2. The following page explains how to set up external apps in Moodle.","title":"Moodle"},{"location":"courses/lti1_0/#setup-and-configuration","text":"Important : Codio needs the User Role, Email Address and Name of the Moodle user in order to work. It is important that you access the LTI security settings and ensure that these three fields are always enabled. If they are not available, contact Moodle support who can help you enable this. If enabled after you have mapped Codio content to Moodle, you may need to re publish for the changes to be implemented Video: Connect Moodle to Codio using the LTI Integration URL","title":"Setup and configuration"},{"location":"courses/lti1_0/#authentication-and-account-creation","text":"Once you have configured the LTI/LMS settings, Moodle manages all aspects of signing in to Codio as well as account creation. All your teachers and students need is a Moodle account. If a Moodle user has never used Codio before then an account will automatically be created from their email address when they access their first Codio course materials. If you do not wish your LMS to share your students name/email addresses to Codio you can select the Anonymous privacy setting but be aware if doing so, any notifications you may wish to set up will not reach those students. If a Moodle user already has a Codio account then provided the email address of their Moodle account is the same, the same Codio account will be used.","title":"Authentication and account creation"},{"location":"courses/lti1_3/","text":"LTI version 1.3 improves upon version [LTI-1.1] by moving away from the use of OAuth 1.0a-style signing for authentication and towards a new security model, using OpenID Connect, signed JWTs, and OAuth2.0 workflows for authentication. As we have implemented the majority of these improvements already in Codio, it can be better to work with Codio, LT1 1.1 integration especially considering the ease to set up using the Codio LTI app . For more information, see Learning Tools Interoperability Core Specification Canvas \uf0c1 There are a number of ways to integrate Codio with Canvas with LTI 1.3. Check out the following videos to see the option that best suits you. How to configure lti1.3 tool in Canvas manually - part 1 \uf0c1 How to configure lti1.3 tool in Canvas manually -part 2 \uf0c1 Tool configuration data for canvas lms in canvas.cod.io: \uf0c1 These paramaters cannot be found in canvas.cod.io (found by search only) platformid : https://canvas.instructure.com PUBLIC KEYSET URL : https://canvas.cod.io/api/lti/security/jwks ACCESS TOKEN URL : https://canvas.cod.io/login/oauth2/token AUTHENTICATION REQUEST URL : https://canvas.cod.io/api/lti/authorize_redirect clientId and deploymentId can be found in tool settings in canvas.cod.io after configuration is completed How to configure lti1.3 tool in Canvas by paste json object \uf0c1 How to configure lti1.3 tool in Canvas by paste json url \uf0c1 Connecting/mapping assignments \uf0c1 There are also a number of ways you can connect/map assignments. Check out the following videos to see the option that best suits you. How to connect assignment and unit by lti integration url of assignment \uf0c1 How to connect assignment and assignment by resource selection preview \uf0c1 How to connect assignment and assignment by endpoint url \uf0c1 How to connect assignment and assignment with custom param \uf0c1 If you require any assistance, please don't hesitate to contact us Moodle \uf0c1 How to configure lti1.3 tool in Moodle manually \uf0c1 Connecting/mapping assignments \uf0c1 There are a number of ways you can connect/map assignments. Check out the following videos to see the option that best suits you. How to connect assignment and assignment by lti integration url of assignment \uf0c1 How to connect assignment and assignment by resource selection preview \uf0c1 How to connect assignment and assignment by endpoint url \uf0c1 How to connect assignment and assignment with custom param \uf0c1 If you require any assistance, please don't hesitate to contact us","title":"Integrating with LTI 1.3 systems"},{"location":"courses/lti1_3/#canvas","text":"There are a number of ways to integrate Codio with Canvas with LTI 1.3. Check out the following videos to see the option that best suits you.","title":"Canvas"},{"location":"courses/lti1_3/#how-to-configure-lti13-tool-in-canvas-manually-part-1","text":"","title":"How to configure lti1.3 tool in Canvas manually - part 1"},{"location":"courses/lti1_3/#how-to-configure-lti13-tool-in-canvas-manually-part-2","text":"","title":"How to configure lti1.3 tool in Canvas manually -part 2"},{"location":"courses/lti1_3/#tool-configuration-data-for-canvas-lms-in-canvascodio","text":"These paramaters cannot be found in canvas.cod.io (found by search only) platformid : https://canvas.instructure.com PUBLIC KEYSET URL : https://canvas.cod.io/api/lti/security/jwks ACCESS TOKEN URL : https://canvas.cod.io/login/oauth2/token AUTHENTICATION REQUEST URL : https://canvas.cod.io/api/lti/authorize_redirect clientId and deploymentId can be found in tool settings in canvas.cod.io after configuration is completed","title":"Tool configuration data for canvas lms in canvas.cod.io:"},{"location":"courses/lti1_3/#how-to-configure-lti13-tool-in-canvas-by-paste-json-object","text":"","title":"How to configure lti1.3 tool in Canvas by paste json object"},{"location":"courses/lti1_3/#how-to-configure-lti13-tool-in-canvas-by-paste-json-url","text":"","title":"How to configure lti1.3 tool in Canvas by paste json url"},{"location":"courses/lti1_3/#connectingmapping-assignments","text":"There are also a number of ways you can connect/map assignments. Check out the following videos to see the option that best suits you.","title":"Connecting/mapping assignments"},{"location":"courses/lti1_3/#how-to-connect-assignment-and-unit-by-lti-integration-url-of-assignment","text":"","title":"How to connect assignment and unit by lti integration url of assignment"},{"location":"courses/lti1_3/#how-to-connect-assignment-and-assignment-by-resource-selection-preview","text":"","title":"How to connect assignment and assignment by resource selection preview"},{"location":"courses/lti1_3/#how-to-connect-assignment-and-assignment-by-endpoint-url","text":"","title":"How to connect assignment and assignment by endpoint url"},{"location":"courses/lti1_3/#how-to-connect-assignment-and-assignment-with-custom-param","text":"If you require any assistance, please don't hesitate to contact us","title":"How to connect assignment and assignment with custom param"},{"location":"courses/lti1_3/#moodle","text":"","title":"Moodle"},{"location":"courses/lti1_3/#how-to-configure-lti13-tool-in-moodle-manually","text":"","title":"How to configure lti1.3 tool in Moodle manually"},{"location":"courses/lti1_3/#connectingmapping-assignments_1","text":"There are a number of ways you can connect/map assignments. Check out the following videos to see the option that best suits you.","title":"Connecting/mapping assignments"},{"location":"courses/lti1_3/#how-to-connect-assignment-and-assignment-by-lti-integration-url-of-assignment","text":"","title":"How to connect assignment and assignment by lti integration url of assignment"},{"location":"courses/lti1_3/#how-to-connect-assignment-and-assignment-by-resource-selection-preview_1","text":"","title":"How to connect assignment and assignment by resource selection preview"},{"location":"courses/lti1_3/#how-to-connect-assignment-and-assignment-by-endpoint-url_1","text":"","title":"How to connect assignment and assignment by endpoint url"},{"location":"courses/lti1_3/#how-to-connect-assignment-and-assignment-with-custom-param_1","text":"If you require any assistance, please don't hesitate to contact us","title":"How to connect assignment and assignment with custom param"},{"location":"courses/plagiarism/","text":"Plagiarism detection allows you to check for code copying and potential cases of cheating between members of a course. With the current version, Codio will compare the code projects of all students within a course for a specific teaching assignment. If you want to include other reference code to include in the cross comparison, then you will need to create a dummy student account, add that dummy student to the course and upload the reference code as that student for that assignment. The Codio Test Student accounts could be used for this purpose Plagiarism detection is best used with programming project assignments rather than Codio authored projects. It will work in both cases but it is really designed to test general coding projects rather than lots of auto-graded assessments within a assignment. Codio does not determine whether cheating has or has not taken place and leaves the decision making up to you. To run the Plagiarism checker you need to first select the assignment within the course and then press press the actions button next to the assignment name. Courses \uf0c1 In order to use this feature you need to set up a course. If you are not using Codio as your main IDE and want to use only the plagiarism detection feature then you should still follow these instructions and ask your students to upload their code into the project using Git or by uploading files manually. Access Plagiarism features \uf0c1 When in your course, select your assignment and then click the Actions button (button to the top right of the screen) to show the available actions that includes Plagiarism Run \uf0c1 You can see the Plagiarism button near in the upper part of the screen. When you press this you are taken to the following screen. This screen will show you any plagiarism reports that were run in the past. You can open these if you wish. On the left you can: enter a relative path in the workspace to check. upload items to compare against (e.g. previous years information). restrict the file types that should be checked. It is possible to add multiple file types by pressing the Add Extension button. These filters can be useful to avoid generating unnecessary noise in your report. Once you are ready to run a new report, press the Start button, which will package up all the files and pass them to the detection engine. You are free to leave the screen at this point and return to it later to see whether the report has been generated. Codio will include all code from all students in the report, irrespective of whether the assignment is marked by the student as completed. The report \uf0c1 Once the report has been generated it can be opened by clicking the Open button. A typical report is shown below. The interpretation of the report is explained below. Drilling down \uf0c1 You can drill down in various ways. The two most common and useful ways are Edits \uf0c1 Shows the differences between the two or more students with similarities. Things that have been added by one student are shown in green, things removed in red and those that are identical are not shaded at all. Side-by-side \uf0c1 This shows the code of those students with similarities in their code in a side-by-side viewer. Downloading raw data \uf0c1 Should you wish to analyse the report data in other software tools, Codio allows you to download a CSV file of the report output. You will find a button Download CSV located at the top right of the main report screen. Main report results \uf0c1 The main report output is a ranking of the submissions. Several metrics are used, and then an overall rank is produced for each entry. The top line for each entry shows its overall rank as well as the score on each metric. Next to the score is the ranking within that metric. The metrics are Points - every incidence of matching text generates some number of points, and the points metric shows the cumulative score for these entries. Regions - counts how many distinct regions (of some maximum size) had matches. Coverage - on average, what fraction of the overall text consisted of matching regions. Tokens - how many words (in absolute numbers) were found in the matching regions. Placings - a weighted average of the other ranks, which is similar to the overall rank, but can sometimes reveal differences. The other items for each entry are: File names - links are provided to the individual files in a match. Next to each file is shown its individual coverage and the number of suspicious tokens out of its total token count. Edits - highlights the changes between the two files. This is mostly useful when large portions of the files are similar. Side-by-side - the matching files (limit 3) are shown side by side, to make comparison easier Individual Files \uf0c1 The plagiarism detection works by trying to identify \"rare matches,\" sequences of words that are similar only in a small number of files. In general, the more rare matches two files have in common, the more suspiciously they are viewed. To convey information about the rare matches, the reports use size, color, and hover text. When you view a file, either individually or side-by-side, you will see that some portions of it are colored, and that the font size changes. Anything colored is a rare match - words that matched between these two (or more) files, but were otherwise rare in the rest. So, to a first-order approximation, the more colored text, the more suspicious similarities. Clicking on a colored region in a side-by-side view should bring up the matching region for the other file. In the case that multiple matches exist, the first match may be shown. In rare cases, the corresponding match may be hidden by other matches, so alignment may not occur. The match still exists and is real, but because of presentation decisions, may have become hidden. Size is based on how many files had the rare text. The fewer files that had the rare text, the larger the font size. The largest font is used when only two files have a piece of matching text. If you hover the mouse over a word, you'll get a pop-up showing the type of match and how many files were involved. The red region typically tries to indicate the \"anchor\" text, the shortest sequence that was rare in a particular match. So, if two students had the same misspelling in an otherwise common sentence, the misspelled words would show up as red, indicating they were the core of the match. However, the entire sentence around them would also be unique because of the misspellings, so the rest of the sentence would be blue. If there are multiple, overlapping anchor regions, additional words may appear in purple next to the red region. Hovering over a word will show an actual match in which the word was involved. Words can be involved in many matches. There are actually many types of matches. If you hover over any text, you'll also see a parenthetical comment that indicates the type of match. Text/case/space match - the text in the region matched, including the case of the text and the spacing. The only differences may be in punctuation that is considered unimportant. Text/case match - like the text/case/space match, but without match on the spacing. Text match - the text matches (again, modulo punctuation), but the spacing and case may differ. No-comment match - once the comments have been removed, the text matches (again, modulo punctuation), but the spacing and case may differ. Text reordered - the same set of words appears in the files, but there's some change in the order of the words No-comment reordered - once the comments have been removed, the same set of words appears in the files, but there's some change in the order of the words Structure/space match - the same structure appears in the files, with matching spacing, but the variables/functions may have different names. Structural match - the same structure appears in the files, but the variables/functions may have different names. Structure reordered - the same structure appears in the files, in a different order, and the variables/functions may have different names. Codio also highlights trailing whitespace at the ends of lines. When two files match in trailing whitespace, it is often the case that they were copied electronically since trailing whitespace is not normally visible when reading text from a screen or in printouts. Interpreting Matches \uf0c1 Not all rare matches indicate plagiarism, and it is important to use good judgment to determine whether a result identified by Codio is actually suspicious. In general, it is a good idea to use the side-by-side examination and start at the top-ranked files, working downward until you encounter a series of files that you determine are not actually suspicious. When examining files, it is often good to find the corresponding places in two files and see if the differences appear to be coincidental or if it looks like the differences are more than chance. For example, sometimes, two students may have a large block of text highlighted, and this may stem from copying a project description from a course page but making similar grammatical changes. In other cases, students may have very few rare matches scattered in their code, but the matches may come from things like similar words in comments, which are much less constrained than code. In all cases, it is imperative that human judgment is used to determine whether a match from Codio represents plagiarism or not. Note that Codio will not necessarily find all plagiarized text. In particular, it focuses on only rare matches, so if two students have copied code that is very constrained and very similar to other solutions, it will not be detected. However, if there are very few ways to write a solution to the problem, any plagiarism detection will be difficult. In such cases, plagiarized code may show only a few rare matches, which is why human judgment is so important in interpreting the results.","title":"Plagiarism Checker"},{"location":"courses/plagiarism/#courses","text":"In order to use this feature you need to set up a course. If you are not using Codio as your main IDE and want to use only the plagiarism detection feature then you should still follow these instructions and ask your students to upload their code into the project using Git or by uploading files manually.","title":"Courses"},{"location":"courses/plagiarism/#access-plagiarism-features","text":"When in your course, select your assignment and then click the Actions button (button to the top right of the screen) to show the available actions that includes Plagiarism","title":"Access Plagiarism features"},{"location":"courses/plagiarism/#run","text":"You can see the Plagiarism button near in the upper part of the screen. When you press this you are taken to the following screen. This screen will show you any plagiarism reports that were run in the past. You can open these if you wish. On the left you can: enter a relative path in the workspace to check. upload items to compare against (e.g. previous years information). restrict the file types that should be checked. It is possible to add multiple file types by pressing the Add Extension button. These filters can be useful to avoid generating unnecessary noise in your report. Once you are ready to run a new report, press the Start button, which will package up all the files and pass them to the detection engine. You are free to leave the screen at this point and return to it later to see whether the report has been generated. Codio will include all code from all students in the report, irrespective of whether the assignment is marked by the student as completed.","title":"Run"},{"location":"courses/plagiarism/#the-report","text":"Once the report has been generated it can be opened by clicking the Open button. A typical report is shown below. The interpretation of the report is explained below.","title":"The report"},{"location":"courses/plagiarism/#drilling-down","text":"You can drill down in various ways. The two most common and useful ways are","title":"Drilling down"},{"location":"courses/plagiarism/#edits","text":"Shows the differences between the two or more students with similarities. Things that have been added by one student are shown in green, things removed in red and those that are identical are not shaded at all.","title":"Edits"},{"location":"courses/plagiarism/#side-by-side","text":"This shows the code of those students with similarities in their code in a side-by-side viewer.","title":"Side-by-side"},{"location":"courses/plagiarism/#downloading-raw-data","text":"Should you wish to analyse the report data in other software tools, Codio allows you to download a CSV file of the report output. You will find a button Download CSV located at the top right of the main report screen.","title":"Downloading raw data"},{"location":"courses/plagiarism/#main-report-results","text":"The main report output is a ranking of the submissions. Several metrics are used, and then an overall rank is produced for each entry. The top line for each entry shows its overall rank as well as the score on each metric. Next to the score is the ranking within that metric. The metrics are Points - every incidence of matching text generates some number of points, and the points metric shows the cumulative score for these entries. Regions - counts how many distinct regions (of some maximum size) had matches. Coverage - on average, what fraction of the overall text consisted of matching regions. Tokens - how many words (in absolute numbers) were found in the matching regions. Placings - a weighted average of the other ranks, which is similar to the overall rank, but can sometimes reveal differences. The other items for each entry are: File names - links are provided to the individual files in a match. Next to each file is shown its individual coverage and the number of suspicious tokens out of its total token count. Edits - highlights the changes between the two files. This is mostly useful when large portions of the files are similar. Side-by-side - the matching files (limit 3) are shown side by side, to make comparison easier","title":"Main report results"},{"location":"courses/plagiarism/#individual-files","text":"The plagiarism detection works by trying to identify \"rare matches,\" sequences of words that are similar only in a small number of files. In general, the more rare matches two files have in common, the more suspiciously they are viewed. To convey information about the rare matches, the reports use size, color, and hover text. When you view a file, either individually or side-by-side, you will see that some portions of it are colored, and that the font size changes. Anything colored is a rare match - words that matched between these two (or more) files, but were otherwise rare in the rest. So, to a first-order approximation, the more colored text, the more suspicious similarities. Clicking on a colored region in a side-by-side view should bring up the matching region for the other file. In the case that multiple matches exist, the first match may be shown. In rare cases, the corresponding match may be hidden by other matches, so alignment may not occur. The match still exists and is real, but because of presentation decisions, may have become hidden. Size is based on how many files had the rare text. The fewer files that had the rare text, the larger the font size. The largest font is used when only two files have a piece of matching text. If you hover the mouse over a word, you'll get a pop-up showing the type of match and how many files were involved. The red region typically tries to indicate the \"anchor\" text, the shortest sequence that was rare in a particular match. So, if two students had the same misspelling in an otherwise common sentence, the misspelled words would show up as red, indicating they were the core of the match. However, the entire sentence around them would also be unique because of the misspellings, so the rest of the sentence would be blue. If there are multiple, overlapping anchor regions, additional words may appear in purple next to the red region. Hovering over a word will show an actual match in which the word was involved. Words can be involved in many matches. There are actually many types of matches. If you hover over any text, you'll also see a parenthetical comment that indicates the type of match. Text/case/space match - the text in the region matched, including the case of the text and the spacing. The only differences may be in punctuation that is considered unimportant. Text/case match - like the text/case/space match, but without match on the spacing. Text match - the text matches (again, modulo punctuation), but the spacing and case may differ. No-comment match - once the comments have been removed, the text matches (again, modulo punctuation), but the spacing and case may differ. Text reordered - the same set of words appears in the files, but there's some change in the order of the words No-comment reordered - once the comments have been removed, the same set of words appears in the files, but there's some change in the order of the words Structure/space match - the same structure appears in the files, with matching spacing, but the variables/functions may have different names. Structural match - the same structure appears in the files, but the variables/functions may have different names. Structure reordered - the same structure appears in the files, in a different order, and the variables/functions may have different names. Codio also highlights trailing whitespace at the ends of lines. When two files match in trailing whitespace, it is often the case that they were copied electronically since trailing whitespace is not normally visible when reading text from a screen or in printouts.","title":"Individual Files"},{"location":"courses/plagiarism/#interpreting-matches","text":"Not all rare matches indicate plagiarism, and it is important to use good judgment to determine whether a result identified by Codio is actually suspicious. In general, it is a good idea to use the side-by-side examination and start at the top-ranked files, working downward until you encounter a series of files that you determine are not actually suspicious. When examining files, it is often good to find the corresponding places in two files and see if the differences appear to be coincidental or if it looks like the differences are more than chance. For example, sometimes, two students may have a large block of text highlighted, and this may stem from copying a project description from a course page but making similar grammatical changes. In other cases, students may have very few rare matches scattered in their code, but the matches may come from things like similar words in comments, which are much less constrained than code. In all cases, it is imperative that human judgment is used to determine whether a match from Codio represents plagiarism or not. Note that Codio will not necessarily find all plagiarized text. In particular, it focuses on only rare matches, so if two students have copied code that is very constrained and very similar to other solutions, it will not be detected. However, if there are very few ways to write a solution to the problem, any plagiarism detection will be difficult. In such cases, plagiarized code may show only a few rare matches, which is why human judgment is so important in interpreting the results.","title":"Interpreting Matches"},{"location":"courses/settings-actions/","text":"Page \uf0c1 Layout \uf0c1 You can choose from a variety of panel layouts for each page of content. The layouts we currently offer can be found in the dropdown list. Click here for information on how to reference these panels when auto opening code files, url previews or terminal windows. The top-most and default entry in the Layout dropdown is Previous . This means it will use the same panel layout as specified on the previous page. Show/Hide Folders \uf0c1 Your content will often want to show code samples. Codio's recommended approach is to put each set of code samples into a dedicated folder. Then, using the page settings, you can specify that folder. All non-specified folders are hidden from view in the file tree. The benefit of hiding folders is that the student is not distracted by a large list of folders and files that are not relevant to the topic your are explaining. Full File Tree: \uf0c1 Hiding of Folders: \uf0c1 Defining folders \uf0c1 To define which folders to show make sure your page is selected. Next, in the Show Folders field, specify the folder or folders which should be shown in the file tree. Use the ; character to separate multiple folders. If you have several pages that show the same folders, you only need define the folders on the first page of the set of pages. All subsequent pages will use the same Show Folders setting until a new one is encountered. Content Type \uf0c1 You can specify whether the page content type is markdown (strongly recommended) or HTML. If you choose HTML, then you will need to set the page HTML header and footer in Global Settings . Teacher only content \uf0c1 If this switch is enabled then the page contents will not be show to students. Teachers will be able to see it when they open an assignment in a course or when opening a students assignment. Learning Objectives \uf0c1 This is a tag field that can be useful for data analysis. Open tabs \uf0c1 You can automatically perform any of the following actions when a page is shown: Reconfigure the overall IDE panel layout. Open files. Open a url preview including external websites. Open a terminal window and optionally run a terminal command. Select lines you wish to highlight within each file. You should also be aware that you can achieve the same actions from Markdown directives on a page. Click here for details. Page - Close Tabs \uf0c1 Enable this to close all panels open from the previous page. Close Terminal Session when Close tabs enabled, allows you the option to retain terminal session from previous section. By default, terminal session will close Open Tabs \uf0c1 Files can be opened automatically to present the student with relevant files. The Add Tab button allows you to create multiple lines into your configuration to address most scenarios you are likely to encounter. You can also drag and drop files in from your project file tree to the page to add them to the Open Tabs section so that file will be opened in a tab for the reader as well as Drag and Drop on the Open Tabs area in the content. Please note: image files dragged in to a page will be automatically tagged to display within the content rather than in a new panel. If you wish to have an image file open in a panel, then you would need to add it directly in the Open Tabs area. You can also drag/drop from the file tree. The correct path to the file will be included. Opening Files \uf0c1 To open files, select the file type and enter the file name, including the path to the file if not in the root of the project workspace. To open multiple files in the same panel, enter in the following format: index.html, main.css Previewing \uf0c1 To preview your project, select the Preview Type. If you wish to show a workspace or external website page, use the Preview option and enter the appropriate URL. Please note: If the URL you are previewing does not allow embedding in an <iframe> , then you won't be able to use https addresses. You would have to use an http address instead, in which case it will automatically open in an new browser tab and not within Codio. Opening the terminal and running system commands \uf0c1 To open a terminal window, select the Terminal option. You can also specify a terminal command to run when a section is displayed. For example, your content may run bash scripts to copy files into the root of your project from the /.guides folder (which is hidden when content is running) at a certain point in your content. You can also specify system commands in a new terminal window like so: Highlighting lines in your code \uf0c1 To highlight one or more lines within an auto-opened file, select the Highlight option and then Enter a piece of reference text, contained within your target file, into the Reference ... field Specify the number of lines, from that reference point, you want to highlight Using reference text rather than a line number means that if you insert anything into your file in the future, Codio is able to adjust the highlighted block based on the reference text. If you insert or remove lines within the block then you would need to adjust the line count. If there is any potential ambiguity with this approach, simply insert a comment which is guaranteed unique and reference that. Any combinations are acceptable and they will be opened in the order specified. Visualiser \uf0c1 Codio supports Python Tutor , allowing students to overcome a fundamental barrier to learning programming: understanding what happens as the computer executes each line of a program's source code. Select Visualiser and enter the path to your file. Supported languages: Python Java JavaScript TypeScript Ruby C C++ Students can visualise what the computer is doing step-by-step as it executes those programs. Examples \uf0c1 Python nested = ['spam', 1, ['Brie', 'Roquefort', 'Pol l Veq'], [1, 2, 3]] for temp in nested: print(temp) Java public static void countdown(int n) { if (n == 0) { System.out.println(\"Blastoff!\"); } else { System.out.println(n); countdown(n - 1); } } For more information and examples see Python Tutor . Specifying the panel number \uf0c1 If your layout for this page involves multiple panels, then you can also specify the panel number to display the file in. If you leave the panel field empty, then the default panel will be chosen, which is the same as 0. The panel order is left to right and then top to bottom and the last of all, the filetree (which you would rarely want to use). Important: The first panel is 0, not 1. Assessments \uf0c1 This settings item is rarely used. It shows a complete reference of all assessments in the book or guide. The usual place from which you edit assessments is the assessments button at the top of the page. If there are any assessments that had been created but subsequently deleted, they will be highlighted in red. You can then delete them from the project. Media \uf0c1 This setting allows you to add a soundtrack to your page, that plays when the page is shown. It can trigger opening of files, terminal windows and preview windows at designated times within the track. Click here for details on how to use this feature. Global \uf0c1 The settings on this page apply to the entire guide or book. Scripts \uf0c1 This allows you to include the path and file name of a script file from a page using an HTML <src> tag. Provide one script path per line. HTML header and footer \uf0c1 This is used for any pages which are designated in the page settings as an HTML page. The header/footer will be placed before/after the HTML page content. Theme \uf0c1 There is currently only a single theme. Lexikon Topic \uf0c1 If you want a lexikon topic to appear you should place the name of the Lexikon topic here. Suppress page numbering \uf0c1 Removes any page numbers from the table of contents when the content is shown. Hide Menu \uf0c1 Hides the Codio menu. You should be aware that this will prohibit access to functions that are accessible via the menu. Allow Guide to be closed \uf0c1 Allows students to close the guide content. The content can be restarted by selecting the 'start guide' icon in the file tree: Use Mark as Complete \uf0c1 For a discussion on the use of the this feature, please click here . This setting is enabled by default and will show students a button at the end of the assignment, from their dashboard and from Education menu in the IDE they can select to mark as complete. If you have set the assignment duration 'On assignment End' action to mark as complete or disable and mark as complete, the assignment will automatically be marked as complete when the end date/time of the assignment is reached and you can elect to suppress the ability for students to have to mark their assignments as complete by disabling this setting. Use Submit Buttons \uf0c1 For a discussion on the use of the this feature, please click here . This is enabled by default and shows students a button for assessments for them to submit their answers. If you have set the assignment duration , when the end of assignment duration date/time is reached, all answers to the assessments will be automatically submitted Collapsed on Start \uf0c1 Enable this to collapse the guides pane in the assignment/project when the layout is not 1 Panel . Performs similar task to the collapse button in playmode. The guides can be reopened by clicking the hamburger icon: Hide Sections Toggle \uf0c1 Enable this to hide the option for students to switch sections using the Section list hamburger icon Hide Back to Dashboard button \uf0c1 Enable this to hide the 'Back to Dashboard' button that by default will show to the students at the end of the assignment Protect Layout \uf0c1 Enable this to prevent tabs being opened or closed by students in the assignment","title":"Guides Settings and Page actions"},{"location":"courses/settings-actions/#page","text":"","title":"Page"},{"location":"courses/settings-actions/#layout","text":"You can choose from a variety of panel layouts for each page of content. The layouts we currently offer can be found in the dropdown list. Click here for information on how to reference these panels when auto opening code files, url previews or terminal windows. The top-most and default entry in the Layout dropdown is Previous . This means it will use the same panel layout as specified on the previous page.","title":"Layout"},{"location":"courses/settings-actions/#showhide-folders","text":"Your content will often want to show code samples. Codio's recommended approach is to put each set of code samples into a dedicated folder. Then, using the page settings, you can specify that folder. All non-specified folders are hidden from view in the file tree. The benefit of hiding folders is that the student is not distracted by a large list of folders and files that are not relevant to the topic your are explaining.","title":"Show/Hide Folders"},{"location":"courses/settings-actions/#full-file-tree","text":"","title":"Full File Tree:"},{"location":"courses/settings-actions/#hiding-of-folders","text":"","title":"Hiding of Folders:"},{"location":"courses/settings-actions/#defining-folders","text":"To define which folders to show make sure your page is selected. Next, in the Show Folders field, specify the folder or folders which should be shown in the file tree. Use the ; character to separate multiple folders. If you have several pages that show the same folders, you only need define the folders on the first page of the set of pages. All subsequent pages will use the same Show Folders setting until a new one is encountered.","title":"Defining folders"},{"location":"courses/settings-actions/#content-type","text":"You can specify whether the page content type is markdown (strongly recommended) or HTML. If you choose HTML, then you will need to set the page HTML header and footer in Global Settings .","title":"Content Type"},{"location":"courses/settings-actions/#teacher-only-content","text":"If this switch is enabled then the page contents will not be show to students. Teachers will be able to see it when they open an assignment in a course or when opening a students assignment.","title":"Teacher only content"},{"location":"courses/settings-actions/#learning-objectives","text":"This is a tag field that can be useful for data analysis.","title":"Learning Objectives"},{"location":"courses/settings-actions/#open-tabs","text":"You can automatically perform any of the following actions when a page is shown: Reconfigure the overall IDE panel layout. Open files. Open a url preview including external websites. Open a terminal window and optionally run a terminal command. Select lines you wish to highlight within each file. You should also be aware that you can achieve the same actions from Markdown directives on a page. Click here for details.","title":"Open tabs"},{"location":"courses/settings-actions/#page-close-tabs","text":"Enable this to close all panels open from the previous page. Close Terminal Session when Close tabs enabled, allows you the option to retain terminal session from previous section. By default, terminal session will close","title":"Page - Close Tabs"},{"location":"courses/settings-actions/#open-tabs_1","text":"Files can be opened automatically to present the student with relevant files. The Add Tab button allows you to create multiple lines into your configuration to address most scenarios you are likely to encounter. You can also drag and drop files in from your project file tree to the page to add them to the Open Tabs section so that file will be opened in a tab for the reader as well as Drag and Drop on the Open Tabs area in the content. Please note: image files dragged in to a page will be automatically tagged to display within the content rather than in a new panel. If you wish to have an image file open in a panel, then you would need to add it directly in the Open Tabs area. You can also drag/drop from the file tree. The correct path to the file will be included.","title":"Open Tabs"},{"location":"courses/settings-actions/#opening-files","text":"To open files, select the file type and enter the file name, including the path to the file if not in the root of the project workspace. To open multiple files in the same panel, enter in the following format: index.html, main.css","title":"Opening Files"},{"location":"courses/settings-actions/#previewing","text":"To preview your project, select the Preview Type. If you wish to show a workspace or external website page, use the Preview option and enter the appropriate URL. Please note: If the URL you are previewing does not allow embedding in an <iframe> , then you won't be able to use https addresses. You would have to use an http address instead, in which case it will automatically open in an new browser tab and not within Codio.","title":"Previewing"},{"location":"courses/settings-actions/#opening-the-terminal-and-running-system-commands","text":"To open a terminal window, select the Terminal option. You can also specify a terminal command to run when a section is displayed. For example, your content may run bash scripts to copy files into the root of your project from the /.guides folder (which is hidden when content is running) at a certain point in your content. You can also specify system commands in a new terminal window like so:","title":"Opening the terminal and running system commands"},{"location":"courses/settings-actions/#highlighting-lines-in-your-code","text":"To highlight one or more lines within an auto-opened file, select the Highlight option and then Enter a piece of reference text, contained within your target file, into the Reference ... field Specify the number of lines, from that reference point, you want to highlight Using reference text rather than a line number means that if you insert anything into your file in the future, Codio is able to adjust the highlighted block based on the reference text. If you insert or remove lines within the block then you would need to adjust the line count. If there is any potential ambiguity with this approach, simply insert a comment which is guaranteed unique and reference that. Any combinations are acceptable and they will be opened in the order specified.","title":"Highlighting lines in your code"},{"location":"courses/settings-actions/#visualiser","text":"Codio supports Python Tutor , allowing students to overcome a fundamental barrier to learning programming: understanding what happens as the computer executes each line of a program's source code. Select Visualiser and enter the path to your file. Supported languages: Python Java JavaScript TypeScript Ruby C C++ Students can visualise what the computer is doing step-by-step as it executes those programs.","title":"Visualiser"},{"location":"courses/settings-actions/#examples","text":"Python nested = ['spam', 1, ['Brie', 'Roquefort', 'Pol l Veq'], [1, 2, 3]] for temp in nested: print(temp) Java public static void countdown(int n) { if (n == 0) { System.out.println(\"Blastoff!\"); } else { System.out.println(n); countdown(n - 1); } } For more information and examples see Python Tutor .","title":"Examples"},{"location":"courses/settings-actions/#specifying-the-panel-number","text":"If your layout for this page involves multiple panels, then you can also specify the panel number to display the file in. If you leave the panel field empty, then the default panel will be chosen, which is the same as 0. The panel order is left to right and then top to bottom and the last of all, the filetree (which you would rarely want to use). Important: The first panel is 0, not 1.","title":"Specifying the panel number"},{"location":"courses/settings-actions/#assessments","text":"This settings item is rarely used. It shows a complete reference of all assessments in the book or guide. The usual place from which you edit assessments is the assessments button at the top of the page. If there are any assessments that had been created but subsequently deleted, they will be highlighted in red. You can then delete them from the project.","title":"Assessments"},{"location":"courses/settings-actions/#media","text":"This setting allows you to add a soundtrack to your page, that plays when the page is shown. It can trigger opening of files, terminal windows and preview windows at designated times within the track. Click here for details on how to use this feature.","title":"Media"},{"location":"courses/settings-actions/#global","text":"The settings on this page apply to the entire guide or book.","title":"Global"},{"location":"courses/settings-actions/#scripts","text":"This allows you to include the path and file name of a script file from a page using an HTML <src> tag. Provide one script path per line.","title":"Scripts"},{"location":"courses/settings-actions/#html-header-and-footer","text":"This is used for any pages which are designated in the page settings as an HTML page. The header/footer will be placed before/after the HTML page content.","title":"HTML header and footer"},{"location":"courses/settings-actions/#theme","text":"There is currently only a single theme.","title":"Theme"},{"location":"courses/settings-actions/#lexikon-topic","text":"If you want a lexikon topic to appear you should place the name of the Lexikon topic here.","title":"Lexikon Topic"},{"location":"courses/settings-actions/#suppress-page-numbering","text":"Removes any page numbers from the table of contents when the content is shown.","title":"Suppress page numbering"},{"location":"courses/settings-actions/#hide-menu","text":"Hides the Codio menu. You should be aware that this will prohibit access to functions that are accessible via the menu.","title":"Hide Menu"},{"location":"courses/settings-actions/#allow-guide-to-be-closed","text":"Allows students to close the guide content. The content can be restarted by selecting the 'start guide' icon in the file tree:","title":"Allow Guide to be closed"},{"location":"courses/settings-actions/#use-mark-as-complete","text":"For a discussion on the use of the this feature, please click here . This setting is enabled by default and will show students a button at the end of the assignment, from their dashboard and from Education menu in the IDE they can select to mark as complete. If you have set the assignment duration 'On assignment End' action to mark as complete or disable and mark as complete, the assignment will automatically be marked as complete when the end date/time of the assignment is reached and you can elect to suppress the ability for students to have to mark their assignments as complete by disabling this setting.","title":"Use Mark as Complete"},{"location":"courses/settings-actions/#use-submit-buttons","text":"For a discussion on the use of the this feature, please click here . This is enabled by default and shows students a button for assessments for them to submit their answers. If you have set the assignment duration , when the end of assignment duration date/time is reached, all answers to the assessments will be automatically submitted","title":"Use Submit Buttons"},{"location":"courses/settings-actions/#collapsed-on-start","text":"Enable this to collapse the guides pane in the assignment/project when the layout is not 1 Panel . Performs similar task to the collapse button in playmode. The guides can be reopened by clicking the hamburger icon:","title":"Collapsed on Start"},{"location":"courses/settings-actions/#hide-sections-toggle","text":"Enable this to hide the option for students to switch sections using the Section list hamburger icon","title":"Hide Sections Toggle"},{"location":"courses/settings-actions/#hide-back-to-dashboard-button","text":"Enable this to hide the 'Back to Dashboard' button that by default will show to the students at the end of the assignment","title":"Hide Back to Dashboard button"},{"location":"courses/settings-actions/#protect-layout","text":"Enable this to prevent tabs being opened or closed by students in the assignment","title":"Protect Layout"},{"location":"dashboard/account/","text":"Account settings overview \uf0c1 A brief overview of interesting account settings. - Cookie Requirements \uf0c1 In order for Codio to work correctly you need to allow cookies. Check our Privacy Policy for more information about cookies. The following information explains how to enable cookies for all sites. You can also enable them only for certain sites, which is not explained below. To enable cookies in Chrome: \uf0c1 In your browser enter: chrome://settings/content/cookies and enable Allow sites to save and read cookie data (recommended) disable Block third party cookies Image from Chrome Version 59.0.3071.86 (Official Build) (64-bit) To enable cookies in Firefox: \uf0c1 In your browser enter: about:preferences#privacy Select User custom settings for history from the drop down in the History section and check Accept cookies from sites select 'Always' in the drop down for Accept third-party cookies Image from Firefox 55.0.2 (64-bit) To enable cookies in Safari: \uf0c1 In your browser go to Safari> Preferences Select the Privacy tab and ensure check Block all cookies and Prevent cross-site tracking are not checked. If using an earlier version of Safari, check Always Allow in the Cookies and website data section Image from Safari 12.0 on macOS Sierra 10.12.6 Firewall and network settings \uf0c1 Codio can usually run from anywhere in your browser without any special settings. However, some school or university firewall settings may require special configuration. This page contains information for School network system administrators Students and teachers who may be using Codio from home Firewall settings \uf0c1 The following is a list of ports and URLs that Codio access from time to time. We have put these in priority order. *.codio.com the main Codio site and application *.codio.io domains that are auto-generated for each user project api.keen.io statistics gathering to measure student time spent in units (stats) *.typekit.net web fonts fonts.gstatic.com web fonts fast.fonts.net web fonts *.cloudfront.net our CDN for speeding up static content .youtube.com & .vimeo.com for video's included in Course content gravatar.com used for user gravatars (pictures) .intercom.io__, cdnjs.cloudflare.com and __ .pubnub.com are highly recommended as they relate to the help and support application (Intercom) built into Codio. If your institution blocks access to YouTube as a general rule, your IT department can whitelist YouTube access that only allows access to content from registered and accredited educational content repositories. See here for more information on this. Ports \uf0c1 We recommend opening the following ports 80 and 443 for standard communications 3000 is a standard port for user projects 9500 is a standard SSL port for user projects Working from home \uf0c1 Sometimes the anti-virus/firewall settings on your personal devices may interfere with home usage and make the experience slow. You should check your settings and ensure that items in the above Firewall settings list are added to your exclusion list. Connectivity Test \uf0c1 If you continue to experience difficulties, visit the Connection Diagnostics page and send us back the generated output going to Help > Support/Contact Us and attach the output file using the paperclip icon) Browser support \uf0c1 Codio is best experienced on the very latest browsers, in particular Chrome, but should run fine on the following browsers: Chrome 21 or later Firefox - 22 or later IE - 10 or later Safari - 6 or later Opera - 15 or later If using Safari and accessing Codio via an LMS , disable \"Prevent cross-site tracking\" to ensure access. If you are experiencing any issue where Codio will not run as it should, please send an email to help@codio.com. Disable IE Compatibility View \uf0c1 It could happen that even if you have Internet Explorer 10 or a later version, we detect a older version of the browser. This is due to the Compatibility Mode of the Browser which enables old features we no longer support. To disable this option, please go to Tools \u2192 F12 developer tools and be sure that in Browser Mode is selected \u00abInternet Explorer 10\u00bb and in Document Mode is selected \u00abStandards (Page default)\u00bb . Resetting student passwords \uf0c1 You can change a student's password in the following way: From the Courses area, click on your course to open it. Click on the Students tab, top centre of your screen. You will see all students in your course displayed on this screen. Find the student whose password needs to be changed and click on the blue triple dot icon to the right of their name. Choose Change students password and follow the steps to reset. Forgot your password \uf0c1 If you have forgotten your password, you should use the lost password link on the log-in page or enter your email in the reset password area (see image below) to reset your password automatically via email. For School and University students only: If you do not have access to the email address you used in creating your Codio account and you are a student, please contact your teacher. He or she will be able to reset your password for you. If you wish to change your password (you should also do this if you forgot your password and it was reset) follow these steps: Click on your name and gravatar (bottom left of screen) From the options along the top of the page, choose Account About halfway down the Account page is the Change Password area. The student should enter their existing password and the new password, and then click Update password . Three attempts are allowed before your account will be temporarily suspended. You can try again in 15 minutes Public key \uf0c1 Codio automatically generates a public key for your account. This key can then be used whenever Codio attempts communication with an external server that requires public/private key based authentication such as SSH or SFTP access. Where is it used? \uf0c1 Codio makes use of the public key in the following places SFTP deployment target RSYNC deployment target SSH Terminal Git In both cases, you will need to install the public key onto the remote system. In the case of SFTP, you should know how to do this already. Adding your public key to a remote server \uf0c1 If you want to get your Codio public key onto a remote server, just press the Upload Public Key button. You enter your user credentials on the remote and Codio will get it installed in the ~/.ssh/authorized_keys file. Adding your public key to GitHub or BitBucket \uf0c1 If you are working with GitHub or BitBucket, then you need to install the public key. Codio makes this very easy for you. Goto Codio>Account and select GitHub or BitBucket tab and select 'Upload your public key to GitHub/BitBucket' You will be redirected to your GitHub/BitBucket account and asked to authorise the application On accepting this you will then be redirected back to your Codio account. GitHub \uf0c1 The GitHub tab lets you associate your account with your GitHub account and where you can upload your public key. See SSH Key You can sign in with GitHub as well. BitBucket \uf0c1 The BitBucket tab lets you associate your account with your BitBucket account and where you can upload your public key. See SSH Key You can sign in with BitBucket as well. Change account details \uf0c1 You can change the following settings Account name - changing this will not affect the URL associated with your account name. This name is for display and communication purposes only. Email address Delete your account \uf0c1 You can delete your account at any time from the Codio > Account menu item and going to the Account tab Please be warned that when you do finally close the account, it cannot be retrieved, nor can its contents, so please make sure you export any projects you want to keep or push the to a remote Git repo. Organisation Billing \uf0c1 For Schools and University organisations, the billing screen allows you to generate invoices for your account (for new accounts and renewal of existing accounts),for active subscriptions, view the details of the current plan, enter the email of the person who should receive billing notifications and also where you can switch your organisation to Student Pay where students are prompted to enter a credit card when they sign up. To access the organsisation billing screen: Click on your profile picture (bottom left of Courses ) 1. Click the name of your school (under My Organizations ) 1. You will see billing options listed across the top of the page. Select the country you are in and 'Save'. Then enter the number of student licenses required. The plans available will be shown , select the plan you require and if you require the invoice to be sent to someone else, you can change the recipient. If you have a promotion code, enter it in the appropriate field. Validation is case insensitive. If the promotion code is invalid, the message Invalid promotion code will be shown If the promotion code has expired, the message This promotion code has expired will be shown Promotion codes are only available for new users and not available for self pay plans. When you are ready, click the 'Generate Invoice' button and the invoice will be generated and sent to the email address. The option to switch to a Self Pay plan where students are prompted to enter a credit card when they sign up is also available but be aware if you have an annual plan and have already paid this might lead to a conflict. Important : This is accessed from the Organization screens and having clicked on your Organization. Please do not use the normal Billing area for individuals that you can access by clicking on your name/gravatar (bottom left of screen) and selecting the Billing tab unless you wish to subscribe as an Individual or already are subscribed as an Individual Individual Billing \uf0c1 The user billing screen can be found on the Billing tab of your Account Settings. You can find both your subscription details and billing history here. To access your individual billing area, follow these steps: Click on your name and gravatar (bottom left of screen) From the options along the top of the page, choose Billing Bookstores \uf0c1 Some institutions may provide Codio licenses via the bookstore. Your course instructor or course syllabus will specify if this is available at your particular school. A single license can be used for a specified timeframe - 1 semester (5 months), 2 semesters (10 months) or a year. Specific licenses options may depend on your local bookstore. Purchasing a license To purchase a license, you can request the following from your bookstore 1 Semester - Codio 1-Semester Subscription - ISBN: 978-1-7331872-5-1 2 Semesters - Codio 2 Semester Subscription ISBN 978-1-73331872-8-2 Annual - Codio Annual Subscription ISBN # 978-1-7331872-1-3 Your bookstore will provide you with a sheet that contains a code that can be used to activate your subscription for the specified timeframe. NOTE: A single subscription can be used for multiple courses using Codio during the specified timeframe. Activating a bookstore license \uf0c1 To log in to Codio, please follow your instructor's directions. This may be through your local LMS (Canvas, Blackboard, Desire2Learn, Moodle, etc) or through Codio.com using a course token. The first time you log in, there will be a small banner at the top requesting you go to \u201cBilling\u201d. Please click on it or navigate to it by clicking on your username in the bottom left and selecting the \u201cBilling\u201d tab and after selecting the \"Plan\" drop down field go to the Redeem Code option and click the Upgrade button where you can then enter the code provided to you. Please note the code is case sensitive so enter it exactly as given. If you have any problems contact us through your Codio account or email us at help@codio.com Educational Discounts \uf0c1 We offer substantial Whole School license discounts for Schools, Colleges and Universities as well as a full 30 day trial of all the Education Features Contact us \uf0c1 Customer Technical Support \uf0c1 We have an extensive documentation section where you can find out how to add students , add teachers and much more. To access the documentation Click Help in the top menu bar on our website. If you are logged into Codio, you can access the documentation section in 2 ways: if on the Dashboard, by selecting the Help button from the left-hand menu. or if you have a project/unit open, from the top menu bar using Help>Documentation To contact us: Video: Access In-Product Support There is a contact button on the bottom right hand corner of our website. If you are logged into Codio: if on the Dashboard, you can use the Support button from the left-hand menu (just below the Help button) or if you have a project/unit open, from the top menu bar using Help>Support/Contact Us . If it is out of our office hours, we will get back to you as soon as possible. Sales Inquiries \uf0c1 If you are interested in purchasing Codio, please see our pricing . If you have any questions about how Codio could be right for you, we offer demos and webinars for you and your colleagues. Or alternatively, please email us at help@codio.com, and we will get in touch as soon as possible.","title":"Account"},{"location":"dashboard/account/#account-settings-overview","text":"A brief overview of interesting account settings. -","title":"Account settings overview"},{"location":"dashboard/account/#cookie-requirements","text":"In order for Codio to work correctly you need to allow cookies. Check our Privacy Policy for more information about cookies. The following information explains how to enable cookies for all sites. You can also enable them only for certain sites, which is not explained below.","title":"Cookie Requirements"},{"location":"dashboard/account/#to-enable-cookies-in-chrome","text":"In your browser enter: chrome://settings/content/cookies and enable Allow sites to save and read cookie data (recommended) disable Block third party cookies Image from Chrome Version 59.0.3071.86 (Official Build) (64-bit)","title":"To enable cookies in Chrome:"},{"location":"dashboard/account/#to-enable-cookies-in-firefox","text":"In your browser enter: about:preferences#privacy Select User custom settings for history from the drop down in the History section and check Accept cookies from sites select 'Always' in the drop down for Accept third-party cookies Image from Firefox 55.0.2 (64-bit)","title":"To enable cookies in Firefox:"},{"location":"dashboard/account/#to-enable-cookies-in-safari","text":"In your browser go to Safari> Preferences Select the Privacy tab and ensure check Block all cookies and Prevent cross-site tracking are not checked. If using an earlier version of Safari, check Always Allow in the Cookies and website data section Image from Safari 12.0 on macOS Sierra 10.12.6","title":"To enable cookies in Safari:"},{"location":"dashboard/account/#firewall-and-network-settings","text":"Codio can usually run from anywhere in your browser without any special settings. However, some school or university firewall settings may require special configuration. This page contains information for School network system administrators Students and teachers who may be using Codio from home","title":"Firewall and network settings"},{"location":"dashboard/account/#firewall-settings","text":"The following is a list of ports and URLs that Codio access from time to time. We have put these in priority order. *.codio.com the main Codio site and application *.codio.io domains that are auto-generated for each user project api.keen.io statistics gathering to measure student time spent in units (stats) *.typekit.net web fonts fonts.gstatic.com web fonts fast.fonts.net web fonts *.cloudfront.net our CDN for speeding up static content .youtube.com & .vimeo.com for video's included in Course content gravatar.com used for user gravatars (pictures) .intercom.io__, cdnjs.cloudflare.com and __ .pubnub.com are highly recommended as they relate to the help and support application (Intercom) built into Codio. If your institution blocks access to YouTube as a general rule, your IT department can whitelist YouTube access that only allows access to content from registered and accredited educational content repositories. See here for more information on this.","title":"Firewall settings"},{"location":"dashboard/account/#ports","text":"We recommend opening the following ports 80 and 443 for standard communications 3000 is a standard port for user projects 9500 is a standard SSL port for user projects","title":"Ports"},{"location":"dashboard/account/#working-from-home","text":"Sometimes the anti-virus/firewall settings on your personal devices may interfere with home usage and make the experience slow. You should check your settings and ensure that items in the above Firewall settings list are added to your exclusion list.","title":"Working from home"},{"location":"dashboard/account/#connectivity-test","text":"If you continue to experience difficulties, visit the Connection Diagnostics page and send us back the generated output going to Help > Support/Contact Us and attach the output file using the paperclip icon)","title":"Connectivity Test"},{"location":"dashboard/account/#browser-support","text":"Codio is best experienced on the very latest browsers, in particular Chrome, but should run fine on the following browsers: Chrome 21 or later Firefox - 22 or later IE - 10 or later Safari - 6 or later Opera - 15 or later If using Safari and accessing Codio via an LMS , disable \"Prevent cross-site tracking\" to ensure access. If you are experiencing any issue where Codio will not run as it should, please send an email to help@codio.com.","title":"Browser support"},{"location":"dashboard/account/#disable-ie-compatibility-view","text":"It could happen that even if you have Internet Explorer 10 or a later version, we detect a older version of the browser. This is due to the Compatibility Mode of the Browser which enables old features we no longer support. To disable this option, please go to Tools \u2192 F12 developer tools and be sure that in Browser Mode is selected \u00abInternet Explorer 10\u00bb and in Document Mode is selected \u00abStandards (Page default)\u00bb .","title":"Disable IE Compatibility View"},{"location":"dashboard/account/#resetting-student-passwords","text":"You can change a student's password in the following way: From the Courses area, click on your course to open it. Click on the Students tab, top centre of your screen. You will see all students in your course displayed on this screen. Find the student whose password needs to be changed and click on the blue triple dot icon to the right of their name. Choose Change students password and follow the steps to reset.","title":"Resetting student passwords"},{"location":"dashboard/account/#forgot-your-password","text":"If you have forgotten your password, you should use the lost password link on the log-in page or enter your email in the reset password area (see image below) to reset your password automatically via email. For School and University students only: If you do not have access to the email address you used in creating your Codio account and you are a student, please contact your teacher. He or she will be able to reset your password for you. If you wish to change your password (you should also do this if you forgot your password and it was reset) follow these steps: Click on your name and gravatar (bottom left of screen) From the options along the top of the page, choose Account About halfway down the Account page is the Change Password area. The student should enter their existing password and the new password, and then click Update password . Three attempts are allowed before your account will be temporarily suspended. You can try again in 15 minutes","title":"Forgot your password"},{"location":"dashboard/account/#public-key","text":"Codio automatically generates a public key for your account. This key can then be used whenever Codio attempts communication with an external server that requires public/private key based authentication such as SSH or SFTP access.","title":"Public key"},{"location":"dashboard/account/#where-is-it-used","text":"Codio makes use of the public key in the following places SFTP deployment target RSYNC deployment target SSH Terminal Git In both cases, you will need to install the public key onto the remote system. In the case of SFTP, you should know how to do this already.","title":"Where is it used?"},{"location":"dashboard/account/#adding-your-public-key-to-a-remote-server","text":"If you want to get your Codio public key onto a remote server, just press the Upload Public Key button. You enter your user credentials on the remote and Codio will get it installed in the ~/.ssh/authorized_keys file.","title":"Adding your public key to a remote server"},{"location":"dashboard/account/#adding-your-public-key-to-github-or-bitbucket","text":"If you are working with GitHub or BitBucket, then you need to install the public key. Codio makes this very easy for you. Goto Codio>Account and select GitHub or BitBucket tab and select 'Upload your public key to GitHub/BitBucket' You will be redirected to your GitHub/BitBucket account and asked to authorise the application On accepting this you will then be redirected back to your Codio account.","title":"Adding your public key to GitHub or BitBucket"},{"location":"dashboard/account/#github","text":"The GitHub tab lets you associate your account with your GitHub account and where you can upload your public key. See SSH Key You can sign in with GitHub as well.","title":"GitHub"},{"location":"dashboard/account/#bitbucket","text":"The BitBucket tab lets you associate your account with your BitBucket account and where you can upload your public key. See SSH Key You can sign in with BitBucket as well.","title":"BitBucket"},{"location":"dashboard/account/#change-account-details","text":"You can change the following settings Account name - changing this will not affect the URL associated with your account name. This name is for display and communication purposes only. Email address","title":"Change account details"},{"location":"dashboard/account/#delete-your-account","text":"You can delete your account at any time from the Codio > Account menu item and going to the Account tab Please be warned that when you do finally close the account, it cannot be retrieved, nor can its contents, so please make sure you export any projects you want to keep or push the to a remote Git repo.","title":"Delete your account"},{"location":"dashboard/account/#organisation-billing","text":"For Schools and University organisations, the billing screen allows you to generate invoices for your account (for new accounts and renewal of existing accounts),for active subscriptions, view the details of the current plan, enter the email of the person who should receive billing notifications and also where you can switch your organisation to Student Pay where students are prompted to enter a credit card when they sign up. To access the organsisation billing screen: Click on your profile picture (bottom left of Courses ) 1. Click the name of your school (under My Organizations ) 1. You will see billing options listed across the top of the page. Select the country you are in and 'Save'. Then enter the number of student licenses required. The plans available will be shown , select the plan you require and if you require the invoice to be sent to someone else, you can change the recipient. If you have a promotion code, enter it in the appropriate field. Validation is case insensitive. If the promotion code is invalid, the message Invalid promotion code will be shown If the promotion code has expired, the message This promotion code has expired will be shown Promotion codes are only available for new users and not available for self pay plans. When you are ready, click the 'Generate Invoice' button and the invoice will be generated and sent to the email address. The option to switch to a Self Pay plan where students are prompted to enter a credit card when they sign up is also available but be aware if you have an annual plan and have already paid this might lead to a conflict. Important : This is accessed from the Organization screens and having clicked on your Organization. Please do not use the normal Billing area for individuals that you can access by clicking on your name/gravatar (bottom left of screen) and selecting the Billing tab unless you wish to subscribe as an Individual or already are subscribed as an Individual","title":"Organisation Billing"},{"location":"dashboard/account/#individual-billing","text":"The user billing screen can be found on the Billing tab of your Account Settings. You can find both your subscription details and billing history here. To access your individual billing area, follow these steps: Click on your name and gravatar (bottom left of screen) From the options along the top of the page, choose Billing","title":"Individual Billing"},{"location":"dashboard/account/#bookstores","text":"Some institutions may provide Codio licenses via the bookstore. Your course instructor or course syllabus will specify if this is available at your particular school. A single license can be used for a specified timeframe - 1 semester (5 months), 2 semesters (10 months) or a year. Specific licenses options may depend on your local bookstore. Purchasing a license To purchase a license, you can request the following from your bookstore 1 Semester - Codio 1-Semester Subscription - ISBN: 978-1-7331872-5-1 2 Semesters - Codio 2 Semester Subscription ISBN 978-1-73331872-8-2 Annual - Codio Annual Subscription ISBN # 978-1-7331872-1-3 Your bookstore will provide you with a sheet that contains a code that can be used to activate your subscription for the specified timeframe. NOTE: A single subscription can be used for multiple courses using Codio during the specified timeframe.","title":"Bookstores"},{"location":"dashboard/account/#activating-a-bookstore-license","text":"To log in to Codio, please follow your instructor's directions. This may be through your local LMS (Canvas, Blackboard, Desire2Learn, Moodle, etc) or through Codio.com using a course token. The first time you log in, there will be a small banner at the top requesting you go to \u201cBilling\u201d. Please click on it or navigate to it by clicking on your username in the bottom left and selecting the \u201cBilling\u201d tab and after selecting the \"Plan\" drop down field go to the Redeem Code option and click the Upgrade button where you can then enter the code provided to you. Please note the code is case sensitive so enter it exactly as given. If you have any problems contact us through your Codio account or email us at help@codio.com","title":"Activating a bookstore license"},{"location":"dashboard/account/#educational-discounts","text":"We offer substantial Whole School license discounts for Schools, Colleges and Universities as well as a full 30 day trial of all the Education Features","title":"Educational Discounts"},{"location":"dashboard/account/#contact-us","text":"","title":"Contact us"},{"location":"dashboard/account/#customer-technical-support","text":"We have an extensive documentation section where you can find out how to add students , add teachers and much more. To access the documentation Click Help in the top menu bar on our website. If you are logged into Codio, you can access the documentation section in 2 ways: if on the Dashboard, by selecting the Help button from the left-hand menu. or if you have a project/unit open, from the top menu bar using Help>Documentation To contact us: Video: Access In-Product Support There is a contact button on the bottom right hand corner of our website. If you are logged into Codio: if on the Dashboard, you can use the Support button from the left-hand menu (just below the Help button) or if you have a project/unit open, from the top menu bar using Help>Support/Contact Us . If it is out of our office hours, we will get back to you as soon as possible.","title":"Customer Technical Support"},{"location":"dashboard/account/#sales-inquiries","text":"If you are interested in purchasing Codio, please see our pricing . If you have any questions about how Codio could be right for you, we offer demos and webinars for you and your colleagues. Or alternatively, please email us at help@codio.com, and we will get in touch as soon as possible.","title":"Sales Inquiries"},{"location":"dashboard/desktopapp/","text":"A brief overview of the Codio desktop app. The desktop app is to allow a local code workspace to synchronize with a Codio box. Assignments/Projects from the Courses dashboard and My Projects area can be connected. A Codio account is required Excluding files \uf0c1 Files/folders can be excluded from synchronisation by using .codioignore file in the source project. Enter on a new line the file/folders to be excluded defining them relative to the location of the .codioignore file and defining folders with / For example if the .codioignore file is located in the project workspace and you wish to exclude bin & node_modules folder the file error.jade in the views folder the files app.js and README.md the .codioignore file will be /bin /node_modules /views/error.jade app.js README.md Please note that the .codioignore file is included in the desktop app files. If students wish to exclude files when pushing back to their Codio account they can do so, either by editing any existing .codioignore file or creating the file themselves. If the teacher creates the .codioignore file, adding a 'comment' line to the top of the file to make it clear to any students what they should not change could help avoid potential problems. A line starting with # serves as a comment Click here to go to the download page and install to your local machine Starting the app \uf0c1 When first starting the app you need to choose the server to connect to. In most cases this will be https://codio.com but if you are in the United Kingdom/Europe, it maybe https://codio.co.uk . You can check by logging into your Codio account in your browser and you will see the server domain noted there Having selected the server log in using your codio credentials. Note: that if you usually access Codio through an LMS , you may not have a Codio account password set. If that is the case, go to the online login screen where you can go through the lost password process to define a codio account password. We would then recommend you log into your account online and change this password to one you will remember in the future. Setting a Codio account password will not effect or change how you currently access Codio via your LMS Accessing and connecting to your online content \uf0c1 When logged in you first see a list of all courses you are a member of and can access your content either from Courses or My Projects area. To pull the code, click on your course or My Projects and then select either: connect - to pull all the code from the selected assignment to a folder on your PC that you define. . Open in Codio - to open the assignment in your Codio account When connecting, browse to a folder on your PC where you would like to store the code and pull the content Managing your offline content \uf0c1 When you have connected you can then push/pull/open the assignment in Codio and manage the local workspace folder settings. 1. Click the pull button to pull content in from your Codio account. Note Any files you already have stored locally will be overwritten 2. Click the push button to push the content from your local workspace folder back to your Codio account. Note This will overwrite the project/assignment in your Codio account 3. Click the Open in Codio button to open your assignment in a browser tab. This can be useful if you wish to compare what you have stored locally to what you last pulled from your Codio account 4. Click the folder icon to manage your local workspace folder settings Local workspace folder settings \uf0c1 1. Click the Open the folder button to open the folder containing your local files 2. Click the Change folder button to change the folder storing your local files. Note the content of the previous folder will not be automatically copied or transferred to the newly selected folder. If you wish to do this, you should return to the previous screen and pull to that new folder 3. Click the Disconnect button to disconnect the assignment from your Codio account. You will be returned to the previous screen where you can then connect the assignment again if you wish","title":"Desktop App"},{"location":"dashboard/desktopapp/#excluding-files","text":"Files/folders can be excluded from synchronisation by using .codioignore file in the source project. Enter on a new line the file/folders to be excluded defining them relative to the location of the .codioignore file and defining folders with / For example if the .codioignore file is located in the project workspace and you wish to exclude bin & node_modules folder the file error.jade in the views folder the files app.js and README.md the .codioignore file will be /bin /node_modules /views/error.jade app.js README.md Please note that the .codioignore file is included in the desktop app files. If students wish to exclude files when pushing back to their Codio account they can do so, either by editing any existing .codioignore file or creating the file themselves. If the teacher creates the .codioignore file, adding a 'comment' line to the top of the file to make it clear to any students what they should not change could help avoid potential problems. A line starting with # serves as a comment Click here to go to the download page and install to your local machine","title":"Excluding files"},{"location":"dashboard/desktopapp/#starting-the-app","text":"When first starting the app you need to choose the server to connect to. In most cases this will be https://codio.com but if you are in the United Kingdom/Europe, it maybe https://codio.co.uk . You can check by logging into your Codio account in your browser and you will see the server domain noted there Having selected the server log in using your codio credentials. Note: that if you usually access Codio through an LMS , you may not have a Codio account password set. If that is the case, go to the online login screen where you can go through the lost password process to define a codio account password. We would then recommend you log into your account online and change this password to one you will remember in the future. Setting a Codio account password will not effect or change how you currently access Codio via your LMS","title":"Starting the app"},{"location":"dashboard/desktopapp/#accessing-and-connecting-to-your-online-content","text":"When logged in you first see a list of all courses you are a member of and can access your content either from Courses or My Projects area. To pull the code, click on your course or My Projects and then select either: connect - to pull all the code from the selected assignment to a folder on your PC that you define. . Open in Codio - to open the assignment in your Codio account When connecting, browse to a folder on your PC where you would like to store the code and pull the content","title":"Accessing and connecting to your online content"},{"location":"dashboard/desktopapp/#managing-your-offline-content","text":"When you have connected you can then push/pull/open the assignment in Codio and manage the local workspace folder settings. 1. Click the pull button to pull content in from your Codio account. Note Any files you already have stored locally will be overwritten 2. Click the push button to push the content from your local workspace folder back to your Codio account. Note This will overwrite the project/assignment in your Codio account 3. Click the Open in Codio button to open your assignment in a browser tab. This can be useful if you wish to compare what you have stored locally to what you last pulled from your Codio account 4. Click the folder icon to manage your local workspace folder settings","title":"Managing your offline content"},{"location":"dashboard/desktopapp/#local-workspace-folder-settings","text":"1. Click the Open the folder button to open the folder containing your local files 2. Click the Change folder button to change the folder storing your local files. Note the content of the previous folder will not be automatically copied or transferred to the newly selected folder. If you wish to do this, you should return to the previous screen and pull to that new folder 3. Click the Disconnect button to disconnect the assignment from your Codio account. You will be returned to the previous screen where you can then connect the assignment again if you wish","title":"Local workspace folder settings"},{"location":"dashboard/navigation/","text":"The Codio dashboard is the main screen you arrive at after logging into Codio. From here you access all the main components of Codio. The appearance of the dashboard depends on whether you are a teacher/instructor or a student. The information below relates to teacher/instructors. Click here for information on the student dashboard. Dashboard options \uf0c1 Here are the main options from the dashboard. Courses : this is where you administer courses and assign projects and courses to students. About courses . And also where you can create your own content that are nicely organized for repeated teaching of content from semester to semester (or term to term, year to year). Course Assignments can be single Codio projects or a mapping to a part of a Codio book. About courses . My Projects : a project is a cloud based server with the Codio IDE attached. It is a great place to experiment. You can create as many as you like and configure your server (box) from the command line exactly as you would with any other server. About projects . My Books : books lets you build a complete book, with chapters, sections and pages that can be nested to any depth to form a table of contents and associated content that mirrors a normal book structure. Parts of a book can then be mapped to course units for course assignments. About books Stacks : Stacks are templated snapshots of a project's software configuration and are a very important and powerful feature of Codio. If you are assigning content to courses of students, it is very important you have a full understanding of stacks. About stacks . Starter Packs : a Starter Pack is a templated snapshot of a project's code workspace. Additionally a stack is specified. The result is an instantly startable snapshot of a fully configured environment. About starter packs . Documentation : a link to the general document. Support : this is our integrated support environment. If you need assistance from us, click here to leave us a detailed message and we will get back to you quickly.","title":"Navigation"},{"location":"dashboard/navigation/#dashboard-options","text":"Here are the main options from the dashboard. Courses : this is where you administer courses and assign projects and courses to students. About courses . And also where you can create your own content that are nicely organized for repeated teaching of content from semester to semester (or term to term, year to year). Course Assignments can be single Codio projects or a mapping to a part of a Codio book. About courses . My Projects : a project is a cloud based server with the Codio IDE attached. It is a great place to experiment. You can create as many as you like and configure your server (box) from the command line exactly as you would with any other server. About projects . My Books : books lets you build a complete book, with chapters, sections and pages that can be nested to any depth to form a table of contents and associated content that mirrors a normal book structure. Parts of a book can then be mapped to course units for course assignments. About books Stacks : Stacks are templated snapshots of a project's software configuration and are a very important and powerful feature of Codio. If you are assigning content to courses of students, it is very important you have a full understanding of stacks. About stacks . Starter Packs : a Starter Pack is a templated snapshot of a project's code workspace. Additionally a stack is specified. The result is an instantly startable snapshot of a fully configured environment. About starter packs . Documentation : a link to the general document. Support : this is our integrated support environment. If you need assistance from us, click here to leave us a detailed message and we will get back to you quickly.","title":"Dashboard options"},{"location":"dashboard/organisations/","text":"An organization is always required for institutional teaching. The organization area contains settings for managing accounts, LMS integration and many other organization related settings. Organization overview \uf0c1 Interesting organization settings. - Administrator role \uf0c1 As the creator of your educational organization in Codio, you have administrator rights. This means that you can add and remove teachers from your organization, edit your organization information, manage your students dashboard settings , create grading templates and delete your organization. To access the administration tools: Click on your profile picture (bottom left of Courses ) 1. Click the name of your school (under My Organizations ) 1. You will see admin options listed across the top of the page. Add teachers \uf0c1 Once you have set up your organization, the next step is to invite teachers to use Codio too. There are 2 ways you can do this: Invite Teacher to the Organization \uf0c1 Click your name/gravatar, bottom of the left hand pane Click the name of your organization (under My Organizations ) Click the Members tab In the Invite Teacher to the Organization area, enter in their email address. If you also wish them to have full access rights to the organization, check the Add this teacher to owners group . Check the Add this teacher as Read Only so that they cannot make changes to content in courses. In the course, they will not be able to switch into Edit mode. This can be done at the organisation level (see Organisation level read only teachers ) or at the course level (see Course level read only teacher ) An email will be sent to your colleague containing a link to sign up and on completion they will be added into your Organization automatically. N.B. They must use the email address the invitation was sent to or they will not be added to the Organization. Any invitations not completed will show in the area below and where you can also Resend or Revoke if you require. Once the invitee has joined the organization they will no longer show in this area but show in the All Members list below (and also Owners list if 'Add this teacher to owners group' was checked) Invitation Token \uf0c1 Click your name/gravatar, bottom of the left hand pane Click the name of your organization (under My Organizations ) Click the Organization Settings tab About half way down you will see an Invitation area, displaying an Invite URL and an Invite token . Give any teachers who are not already Codio users the invite URL. When they enter the URL in their browser, they will automatically be taken through the sign-up process and as they select that they are a Teacher, will then be added to your Organization. Alternatively, teachers can register themselves for a Codio account by following the sign-up process at www.codio.com. Once they have done this (selecting that they are a Teacher , they will be asked for an Invite token to join your educational organization. This is provided in step 4 above - give them the token (not the URL). If you already have courses set up you can add and invite teachers directly into your course(s). See Adding teachers to a ccourse You can then if you wish add them as an organization owner so they can then manage and create courses themselves and have full admin access to the organization Add organization owners \uf0c1 You are the Owner of your organization if you created it. You can add other owners (these will usually be other teachers who you wish to give admin rights to). There are 2 ways you can do this: Add a new user to your Organization Owners group \uf0c1 Click your name/gravatar, bottom of the left hand pane Click the name of your organization (under My Organizations ) Click the Members tab In the Invite Teacher to the Organization area, enter in their Email address and check the 'Add this teacher to owners group'. An email will be sent to your colleague containing a link to sign up and on completion they will be added into your Organization automatically and to the Owners group. N.B. They must use the email address the invitation was sent to or they will not be added to the Organization. Any invitations not completed will show in the area below and where you can also 'Resend' or 'Revoke' if you require. Once the invitee has joined the organization they will no longer show in this area but show in the All Members list below and also Owners list. Add an existing Codio user to your Organization Owners group \uf0c1 Click your name/gravatar, bottom of the left hand pane Click on the name of your educational organization - under My Organizations , which is about halfway down the screen. Click the Members tab Click Owners You should see yourself listed as an owner. To add another teacher, choose the Add User drop down and as you type their Codio Username, the listing will filter down so you can then select them. Add students \uf0c1 You do not add students to an organization directly. They are added by inviting them to join a course. Please click here for more information. Codio also creates test students so instructors are able to see how students interact with a course. This is described here . If you are using an LMS for a course then the LMS platform will handle the addition of students to the Codio course automatically. Student consent form \uf0c1 The student consent form is a feature for Codio organizations. It allows you to show an IP consent form, whose content you create yourself, to Codio users. To configure the consent form information, click on your user name from the dashboard. Next, select your organization. You will then see the IP Consent tab at the top of the screen. If you enable this feature, all students will be shown the form when they first create an account. If a student has already created an account then the next time they sign in, they will be shown the form. They will not be able to access Codio until they do consent. Creating content \uf0c1 You should first create the content that you wish to display to the student. You enter your text in the lower portion of the screen. You can use markdown or HTML to format your text. If you are not familiar with markdown, here is a reference for markdown: Daring Fireball - the author of markdown You can press the Save Draft button to save your changes and continue editing later. You can also Preview your changes to see how the rendered output appears. Publishing and revisions \uf0c1 You need to publish your changes so that they appear to the student. You can create new versions over time. Earlier versions of the form can be recalled by selecting the version from the drop down list. Once you are happy with your text, you press the Publish new version button. Exporting student consent data \uf0c1 If you would like to download a log of all students who have consented, press the Download CSV link in the upper section. The CSV file contains the following data User name Codio user ID Email address Revision of the consent form they consented to Date and time of the consent. View organization members \uf0c1 Sometimes you might need to check who is registered as a member of your educational organization. To view all members of your school organization follow these steps: Click your name/gravatar, bottom of the left hand pane Click on the name of your educational organization - under My Organizations , which is about halfway down the screen. Click the Members tab Click All Members You will be able to see all the members of your school organization. The Test Students group contains the demo student accounts created for you when the Organization was created. See Test Students for more information. The Users without course group contains all users that are not members of a course. See Delete Course for more information. This may be as a result of a course being deleted or it may be that a new user has joined your organization but is not yet either a Teacher or a Student in a course. Select this group and you can then remove these users from your organization if required. Please note that removing users from your Organization does not delete their Codio account. Only the account owner can delete their account . Organisation read only teachers \uf0c1 Click on the Teachers group where you can see all teachers in the organisation and where you can set them to Read Only . These teachers will only have access in courses to Teaching Mode and will not be able to add/edit/change any content in the course Student dashboard settings \uf0c1 Organization owners can manage the student dashboard view by setting their default page to 'My Projects' as an alternative to Courses as well as optionally hiding Courses menu item. To do this, access the administration tools: Click on your profile picture (bottom left of Courses ) 1. Click the name of your institution (under My Organizations ) 1. You will see admin options listed across the top of the page. 1. Select Dashboard Settings 1. Make the required changes and Update to save the changes N.B. Your students may need to reload Codio in their browser when they next log in for the changes to be visible to them Custom script \uf0c1 To integrate third-party systems to help/track students, custom scripts can be enabled. Enabling this will allow third-party systems (such as sense.network to help/track students. In all cases, the userid , email and the user type (Student/Teacher) will be passed. If required by the third-party system used, custom js code can be included in the Custom Script section. Any such code should be entered without script tags. e.g. var http = new XMLHttpRequest(); var url = 'https://userdomain/url'; //Change to valid URL for your third-party system var params = 'userId=' + codio.userId ; http.open('POST', url, true); http.setRequestHeader('Content-type', 'application/x-www-form-urlencoded'); http.onreadystatechange = function() {//Call a function when the state changes. if(http.readyState == 4 && http.status == 200) { alert(http.responseText); } } http.send(params); You can also add console.log entries to be able to test/view output e.g. console.log('params', codio); console.log('params', window); console.log('params', document) console.log(window.codio.currentPage) console.log(window.codio.totalNumberOfPages) If you require any assistance with this, please don't hesitate to contact us in the usual manner. Remove owners \uf0c1 You may want to remove one or more of the owners you have set for your organization. It is worth noting that you always need at least one owner. (If you want to know how to add owners, jump to add organization owners ). To remove owners: Click your name/gravatar, bottom of the left hand pane Click on the name of your educational organization - under My Organizations , which is about halfway down the screen. If you want to remove the owner rights of anyone in your organization, Click the Members tab Under Organization Teams , Click Owners Choose Remove on the right hand side of the name of the person whose rights you want to remove. (note: you must always have at least one person in this group to act as the owner) Remove members \uf0c1 There are some occasions where you may want to remove old members in order to make room for new members - for example if a course of students leaves and you want to use the account licences for other students. To remove members: Click your name/gravatar, bottom of the left hand pane Click on the name of your educational organization - under My Organizations , which is about halfway down the screen. Click the Members tab Under Organization Teams , Click All Members You will be able to see all the members of your school organization. Choose Remove on the right hand side of the name of the person who you want to remove from your organization. If a course was deleted and students removed, they will show in the Users without course section and may be easier for you to find the students to remove If you want to use the freed-up accounts with new students, follow the steps listed in Add students to a course Organization Assessments Library \uf0c1 In addition to Codio's global assessments library, you can create Organization assessments libraries. This allows your faculty to share assessment items with other instructors similar to how you can share Courses within an Organization. Create an Organization Assessments Library \uf0c1 Click your name/gravatar, bottom of the left hand pane Click the name of your organization (under My Organizations ) Click the Assessments Library tab Click \u201cCreate a New Library\u201d Enter the name of the assessments library you want to create and press \u201cCreate\u201d Read more about assessment libraries here . Add Collaborators to an Assessments Library \uf0c1 Under the Assessments Library tab, click on the library you want to add collaborators to * Click on the Permissions tab. Add Permission: Either type the user name or use the drop down arrow to select an organization member to give permission to. By default, the collaborators are given \u201cRead\u201d permission, meaning they cannot add to or edit assessments in the library. To give a user \u201cWrite\u201d permission, simply select the permission level next to their user name in the list. Read Permission for Teachers: Turning this on allows all Teachers in the organization to have \u201cRead\u201d permission, meaning they cannot add to or edit assessments in the library. Remove: To remove a collaborator, simply press the \u201cRemove\u201d button next to their user name. Please note that is \u201cRead permission for teachers\u201d is turned on, that user may still have read permission if they are still a teacher account and a member of the organization. Public/private settings \uf0c1 Organization owners can disable this feature to allow members of the Organization to create Public Projects/Stacks/Starter Packs/Courses and Modules. By default, these will be created as Private. Private projects can still be shared to other users in the normal manner. See Permissions N.B. Any existing Projects/Stacks/Starter Packs/Courses and Modules created by members of the organization prior to any changes being made will not be effected To enable the creation of Public Projects/Stacks/Starter Packs/Courses and Modules, access the administration tools: Click on your profile picture (bottom left of Courses ) 1. Click the name of your institution (under My Organizations ) 1. You will see admin options listed across the top of the page. 1. Select Organization Settings 1. Go to the Private/Public Settings area and click the slider to disable this, and Update to save the changes Organization owners can also block Codio support team from being able to access members accounts to provide platform support. See also: Creating and importing a project Creating a Stack Creating a Pack Creating a course Gigaboxes \uf0c1 Codio's default boxes are allocated 512MB of memory. If you need larger boxes then you can upgrade your subscription to give access to 1GB, 2GB, 8GB,16GB and GPU (for GPU-accelerated instances) boxes. You purchase a specific number of Gigaboxes that can be used by anyone within your organization. Codio tracks usage based on active projects rather than total projects. In other words, you can have 100 projects which use a Gigabox but as long as only one is active at a time, this requires only a single Gigabox unit to be purchased. To see the status of your current Gigabox usage, for all users Click on your user name in the dashboard Select your organization Click on the Organization Settings tab You can then scroll down to the Gigaboxes section. Delete organization \uf0c1 If, for any reason you want to completely delete your organization, you can do so in the following way: Click your name/gravatar, bottom of the left hand pane Click on the name of your educational organization - under My Organizations , which is about halfway down the screen. Click the Organization settings tab Go to the Delete section at the bottom of the page, and type the confirmation code. Note that once your Organization has been deleted, the action cannot be reverted. Organization contact URL \uf0c1 If you wish to set your own contact URL's for your students (e.g. you have a forum or LMS discussion area for them to use or you have your own resources available to assist students), you can do so in the following way: Click your name/gravatar, bottom of the left hand pane Click on the name of your educational organization - under My Organizations , which is about halfway down the screen. Click the Organization settings tab Go to the Education Settings section toward the bottom of the page, and enter the text you wish to show along with the URL you wish to direct your students to. You can set as many options as you require and also define the default option that will be checked automatically for the students. If these are set, when a student uses any of the ways to contact us, they will be shown all the options in addition to contacting Codio directly if they have a problem accessing the Codio platform, or loading a specific assignment. These can also be set at the course level so if you have specific areas/forums for your courses for students to raise questions, you can set the contact URL there and it will override the Organization setting N.B. \"Teacher\" accounts will not be effected by this setting and they will still be able to contact Codio in the usual manner. See Support for more on this Organization release grades \uf0c1 By default Students are not shown the grades until you decide to release them to the course but if you wish to automatically Release Grades when students complete an assignment, you can enable this feature so when you create new courses this option is automatically enabled. Enabling this feature will not effect existing courses Click your name/gravatar, bottom of the left hand pane Click on the name of your educational organization - under My Organizations , which is about halfway down the screen. Click the Organization settings tab Go to the Education Settings section toward the bottom of the page, and enable the feature The status of this feature can be changed in individual courses if required. See here for more information","title":"Organizations"},{"location":"dashboard/organisations/#organization-overview","text":"Interesting organization settings. -","title":"Organization overview"},{"location":"dashboard/organisations/#administrator-role","text":"As the creator of your educational organization in Codio, you have administrator rights. This means that you can add and remove teachers from your organization, edit your organization information, manage your students dashboard settings , create grading templates and delete your organization. To access the administration tools: Click on your profile picture (bottom left of Courses ) 1. Click the name of your school (under My Organizations ) 1. You will see admin options listed across the top of the page.","title":"Administrator role"},{"location":"dashboard/organisations/#add-teachers","text":"Once you have set up your organization, the next step is to invite teachers to use Codio too. There are 2 ways you can do this:","title":"Add teachers"},{"location":"dashboard/organisations/#invite-teacher-to-the-organization","text":"Click your name/gravatar, bottom of the left hand pane Click the name of your organization (under My Organizations ) Click the Members tab In the Invite Teacher to the Organization area, enter in their email address. If you also wish them to have full access rights to the organization, check the Add this teacher to owners group . Check the Add this teacher as Read Only so that they cannot make changes to content in courses. In the course, they will not be able to switch into Edit mode. This can be done at the organisation level (see Organisation level read only teachers ) or at the course level (see Course level read only teacher ) An email will be sent to your colleague containing a link to sign up and on completion they will be added into your Organization automatically. N.B. They must use the email address the invitation was sent to or they will not be added to the Organization. Any invitations not completed will show in the area below and where you can also Resend or Revoke if you require. Once the invitee has joined the organization they will no longer show in this area but show in the All Members list below (and also Owners list if 'Add this teacher to owners group' was checked)","title":"Invite Teacher to the Organization"},{"location":"dashboard/organisations/#invitation-token","text":"Click your name/gravatar, bottom of the left hand pane Click the name of your organization (under My Organizations ) Click the Organization Settings tab About half way down you will see an Invitation area, displaying an Invite URL and an Invite token . Give any teachers who are not already Codio users the invite URL. When they enter the URL in their browser, they will automatically be taken through the sign-up process and as they select that they are a Teacher, will then be added to your Organization. Alternatively, teachers can register themselves for a Codio account by following the sign-up process at www.codio.com. Once they have done this (selecting that they are a Teacher , they will be asked for an Invite token to join your educational organization. This is provided in step 4 above - give them the token (not the URL). If you already have courses set up you can add and invite teachers directly into your course(s). See Adding teachers to a ccourse You can then if you wish add them as an organization owner so they can then manage and create courses themselves and have full admin access to the organization","title":"Invitation Token"},{"location":"dashboard/organisations/#add-organization-owners","text":"You are the Owner of your organization if you created it. You can add other owners (these will usually be other teachers who you wish to give admin rights to). There are 2 ways you can do this:","title":"Add organization owners"},{"location":"dashboard/organisations/#add-a-new-user-to-your-organization-owners-group","text":"Click your name/gravatar, bottom of the left hand pane Click the name of your organization (under My Organizations ) Click the Members tab In the Invite Teacher to the Organization area, enter in their Email address and check the 'Add this teacher to owners group'. An email will be sent to your colleague containing a link to sign up and on completion they will be added into your Organization automatically and to the Owners group. N.B. They must use the email address the invitation was sent to or they will not be added to the Organization. Any invitations not completed will show in the area below and where you can also 'Resend' or 'Revoke' if you require. Once the invitee has joined the organization they will no longer show in this area but show in the All Members list below and also Owners list.","title":"Add a new user to your Organization Owners group"},{"location":"dashboard/organisations/#add-an-existing-codio-user-to-your-organization-owners-group","text":"Click your name/gravatar, bottom of the left hand pane Click on the name of your educational organization - under My Organizations , which is about halfway down the screen. Click the Members tab Click Owners You should see yourself listed as an owner. To add another teacher, choose the Add User drop down and as you type their Codio Username, the listing will filter down so you can then select them.","title":"Add an existing Codio user to your Organization Owners group"},{"location":"dashboard/organisations/#add-students","text":"You do not add students to an organization directly. They are added by inviting them to join a course. Please click here for more information. Codio also creates test students so instructors are able to see how students interact with a course. This is described here . If you are using an LMS for a course then the LMS platform will handle the addition of students to the Codio course automatically.","title":"Add students"},{"location":"dashboard/organisations/#student-consent-form","text":"The student consent form is a feature for Codio organizations. It allows you to show an IP consent form, whose content you create yourself, to Codio users. To configure the consent form information, click on your user name from the dashboard. Next, select your organization. You will then see the IP Consent tab at the top of the screen. If you enable this feature, all students will be shown the form when they first create an account. If a student has already created an account then the next time they sign in, they will be shown the form. They will not be able to access Codio until they do consent.","title":"Student consent form"},{"location":"dashboard/organisations/#creating-content","text":"You should first create the content that you wish to display to the student. You enter your text in the lower portion of the screen. You can use markdown or HTML to format your text. If you are not familiar with markdown, here is a reference for markdown: Daring Fireball - the author of markdown You can press the Save Draft button to save your changes and continue editing later. You can also Preview your changes to see how the rendered output appears.","title":"Creating content"},{"location":"dashboard/organisations/#publishing-and-revisions","text":"You need to publish your changes so that they appear to the student. You can create new versions over time. Earlier versions of the form can be recalled by selecting the version from the drop down list. Once you are happy with your text, you press the Publish new version button.","title":"Publishing and revisions"},{"location":"dashboard/organisations/#exporting-student-consent-data","text":"If you would like to download a log of all students who have consented, press the Download CSV link in the upper section. The CSV file contains the following data User name Codio user ID Email address Revision of the consent form they consented to Date and time of the consent.","title":"Exporting student consent data"},{"location":"dashboard/organisations/#view-organization-members","text":"Sometimes you might need to check who is registered as a member of your educational organization. To view all members of your school organization follow these steps: Click your name/gravatar, bottom of the left hand pane Click on the name of your educational organization - under My Organizations , which is about halfway down the screen. Click the Members tab Click All Members You will be able to see all the members of your school organization. The Test Students group contains the demo student accounts created for you when the Organization was created. See Test Students for more information. The Users without course group contains all users that are not members of a course. See Delete Course for more information. This may be as a result of a course being deleted or it may be that a new user has joined your organization but is not yet either a Teacher or a Student in a course. Select this group and you can then remove these users from your organization if required. Please note that removing users from your Organization does not delete their Codio account. Only the account owner can delete their account .","title":"View organization members"},{"location":"dashboard/organisations/#organisation-read-only-teachers","text":"Click on the Teachers group where you can see all teachers in the organisation and where you can set them to Read Only . These teachers will only have access in courses to Teaching Mode and will not be able to add/edit/change any content in the course","title":"Organisation read only teachers"},{"location":"dashboard/organisations/#student-dashboard-settings","text":"Organization owners can manage the student dashboard view by setting their default page to 'My Projects' as an alternative to Courses as well as optionally hiding Courses menu item. To do this, access the administration tools: Click on your profile picture (bottom left of Courses ) 1. Click the name of your institution (under My Organizations ) 1. You will see admin options listed across the top of the page. 1. Select Dashboard Settings 1. Make the required changes and Update to save the changes N.B. Your students may need to reload Codio in their browser when they next log in for the changes to be visible to them","title":"Student dashboard settings"},{"location":"dashboard/organisations/#custom-script","text":"To integrate third-party systems to help/track students, custom scripts can be enabled. Enabling this will allow third-party systems (such as sense.network to help/track students. In all cases, the userid , email and the user type (Student/Teacher) will be passed. If required by the third-party system used, custom js code can be included in the Custom Script section. Any such code should be entered without script tags. e.g. var http = new XMLHttpRequest(); var url = 'https://userdomain/url'; //Change to valid URL for your third-party system var params = 'userId=' + codio.userId ; http.open('POST', url, true); http.setRequestHeader('Content-type', 'application/x-www-form-urlencoded'); http.onreadystatechange = function() {//Call a function when the state changes. if(http.readyState == 4 && http.status == 200) { alert(http.responseText); } } http.send(params); You can also add console.log entries to be able to test/view output e.g. console.log('params', codio); console.log('params', window); console.log('params', document) console.log(window.codio.currentPage) console.log(window.codio.totalNumberOfPages) If you require any assistance with this, please don't hesitate to contact us in the usual manner.","title":"Custom script"},{"location":"dashboard/organisations/#remove-owners","text":"You may want to remove one or more of the owners you have set for your organization. It is worth noting that you always need at least one owner. (If you want to know how to add owners, jump to add organization owners ). To remove owners: Click your name/gravatar, bottom of the left hand pane Click on the name of your educational organization - under My Organizations , which is about halfway down the screen. If you want to remove the owner rights of anyone in your organization, Click the Members tab Under Organization Teams , Click Owners Choose Remove on the right hand side of the name of the person whose rights you want to remove. (note: you must always have at least one person in this group to act as the owner)","title":"Remove owners"},{"location":"dashboard/organisations/#remove-members","text":"There are some occasions where you may want to remove old members in order to make room for new members - for example if a course of students leaves and you want to use the account licences for other students. To remove members: Click your name/gravatar, bottom of the left hand pane Click on the name of your educational organization - under My Organizations , which is about halfway down the screen. Click the Members tab Under Organization Teams , Click All Members You will be able to see all the members of your school organization. Choose Remove on the right hand side of the name of the person who you want to remove from your organization. If a course was deleted and students removed, they will show in the Users without course section and may be easier for you to find the students to remove If you want to use the freed-up accounts with new students, follow the steps listed in Add students to a course","title":"Remove members"},{"location":"dashboard/organisations/#organization-assessments-library","text":"In addition to Codio's global assessments library, you can create Organization assessments libraries. This allows your faculty to share assessment items with other instructors similar to how you can share Courses within an Organization.","title":"Organization Assessments Library"},{"location":"dashboard/organisations/#create-an-organization-assessments-library","text":"Click your name/gravatar, bottom of the left hand pane Click the name of your organization (under My Organizations ) Click the Assessments Library tab Click \u201cCreate a New Library\u201d Enter the name of the assessments library you want to create and press \u201cCreate\u201d Read more about assessment libraries here .","title":"Create an Organization Assessments Library"},{"location":"dashboard/organisations/#add-collaborators-to-an-assessments-library","text":"Under the Assessments Library tab, click on the library you want to add collaborators to * Click on the Permissions tab. Add Permission: Either type the user name or use the drop down arrow to select an organization member to give permission to. By default, the collaborators are given \u201cRead\u201d permission, meaning they cannot add to or edit assessments in the library. To give a user \u201cWrite\u201d permission, simply select the permission level next to their user name in the list. Read Permission for Teachers: Turning this on allows all Teachers in the organization to have \u201cRead\u201d permission, meaning they cannot add to or edit assessments in the library. Remove: To remove a collaborator, simply press the \u201cRemove\u201d button next to their user name. Please note that is \u201cRead permission for teachers\u201d is turned on, that user may still have read permission if they are still a teacher account and a member of the organization.","title":"Add Collaborators to an Assessments Library"},{"location":"dashboard/organisations/#publicprivate-settings","text":"Organization owners can disable this feature to allow members of the Organization to create Public Projects/Stacks/Starter Packs/Courses and Modules. By default, these will be created as Private. Private projects can still be shared to other users in the normal manner. See Permissions N.B. Any existing Projects/Stacks/Starter Packs/Courses and Modules created by members of the organization prior to any changes being made will not be effected To enable the creation of Public Projects/Stacks/Starter Packs/Courses and Modules, access the administration tools: Click on your profile picture (bottom left of Courses ) 1. Click the name of your institution (under My Organizations ) 1. You will see admin options listed across the top of the page. 1. Select Organization Settings 1. Go to the Private/Public Settings area and click the slider to disable this, and Update to save the changes Organization owners can also block Codio support team from being able to access members accounts to provide platform support. See also: Creating and importing a project Creating a Stack Creating a Pack Creating a course","title":"Public/private settings"},{"location":"dashboard/organisations/#gigaboxes","text":"Codio's default boxes are allocated 512MB of memory. If you need larger boxes then you can upgrade your subscription to give access to 1GB, 2GB, 8GB,16GB and GPU (for GPU-accelerated instances) boxes. You purchase a specific number of Gigaboxes that can be used by anyone within your organization. Codio tracks usage based on active projects rather than total projects. In other words, you can have 100 projects which use a Gigabox but as long as only one is active at a time, this requires only a single Gigabox unit to be purchased. To see the status of your current Gigabox usage, for all users Click on your user name in the dashboard Select your organization Click on the Organization Settings tab You can then scroll down to the Gigaboxes section.","title":"Gigaboxes"},{"location":"dashboard/organisations/#delete-organization","text":"If, for any reason you want to completely delete your organization, you can do so in the following way: Click your name/gravatar, bottom of the left hand pane Click on the name of your educational organization - under My Organizations , which is about halfway down the screen. Click the Organization settings tab Go to the Delete section at the bottom of the page, and type the confirmation code. Note that once your Organization has been deleted, the action cannot be reverted.","title":"Delete organization"},{"location":"dashboard/organisations/#organization-contact-url","text":"If you wish to set your own contact URL's for your students (e.g. you have a forum or LMS discussion area for them to use or you have your own resources available to assist students), you can do so in the following way: Click your name/gravatar, bottom of the left hand pane Click on the name of your educational organization - under My Organizations , which is about halfway down the screen. Click the Organization settings tab Go to the Education Settings section toward the bottom of the page, and enter the text you wish to show along with the URL you wish to direct your students to. You can set as many options as you require and also define the default option that will be checked automatically for the students. If these are set, when a student uses any of the ways to contact us, they will be shown all the options in addition to contacting Codio directly if they have a problem accessing the Codio platform, or loading a specific assignment. These can also be set at the course level so if you have specific areas/forums for your courses for students to raise questions, you can set the contact URL there and it will override the Organization setting N.B. \"Teacher\" accounts will not be effected by this setting and they will still be able to contact Codio in the usual manner. See Support for more on this","title":"Organization contact URL"},{"location":"dashboard/organisations/#organization-release-grades","text":"By default Students are not shown the grades until you decide to release them to the course but if you wish to automatically Release Grades when students complete an assignment, you can enable this feature so when you create new courses this option is automatically enabled. Enabling this feature will not effect existing courses Click your name/gravatar, bottom of the left hand pane Click on the name of your educational organization - under My Organizations , which is about halfway down the screen. Click the Organization settings tab Go to the Education Settings section toward the bottom of the page, and enable the feature The status of this feature can be changed in individual courses if required. See here for more information","title":"Organization release grades"},{"location":"dashboard/overview/","text":"Codio Overview \uf0c1 Video: Flexible Student Learning Experience Video: Teacher Dashboard Overview Video: Access In-Product Support","title":"Overview"},{"location":"dashboard/overview/#codio-overview","text":"Video: Flexible Student Learning Experience Video: Teacher Dashboard Overview Video: Access In-Product Support","title":"Codio Overview"},{"location":"dashboard/support/","text":"If you need support, then the most effective way is to use our integrated support system. You will find this in the dashboard and the IDE. Dashboard \uf0c1 Support is available in the dashboard from the Chat link on the left. IDE \uf0c1 Support is available within the IDE from the Help menu item, then Support . Support Dialog \uf0c1 There is a support dialog that appears when you invoke the support option. This tracks all conversations and threads you have had with Codio and where you can also start a new conversation. If you are in Codio, you can see when a reply to your query arrives even if you have closed the support dialog box An email will also be sent to you if you do not see the reply within 2 minutes. Feedback \uf0c1 We are always interested to hear from our users about their thoughts/ideas for future improvements. To raise an idea or vote on other ideas already raised, either click on Feedback in your dashboard area or go to Codio Feedback directly. Student Support \uf0c1 You can set a Contact URL for your students at the organisation level, see Organisation Contact URL and/or at the course level, see Course Contact URL so they can raise any questions they may have directly to your preferred area If you set the contact URL for a course, this will override any contact URL you may have set at the organisation level. Students will then be given the option to report a problem, ask a question related to their course work or if they have a problem accessing the Codio platform, or loading a specific assignment. N.B. \"Teacher\" accounts will not be effected by this setting and they will still be able to contact Codio in the usual manner.","title":"Support"},{"location":"dashboard/support/#dashboard","text":"Support is available in the dashboard from the Chat link on the left.","title":"Dashboard"},{"location":"dashboard/support/#ide","text":"Support is available within the IDE from the Help menu item, then Support .","title":"IDE"},{"location":"dashboard/support/#support-dialog","text":"There is a support dialog that appears when you invoke the support option. This tracks all conversations and threads you have had with Codio and where you can also start a new conversation. If you are in Codio, you can see when a reply to your query arrives even if you have closed the support dialog box An email will also be sent to you if you do not see the reply within 2 minutes.","title":"Support Dialog"},{"location":"dashboard/support/#feedback","text":"We are always interested to hear from our users about their thoughts/ideas for future improvements. To raise an idea or vote on other ideas already raised, either click on Feedback in your dashboard area or go to Codio Feedback directly.","title":"Feedback"},{"location":"dashboard/support/#student-support","text":"You can set a Contact URL for your students at the organisation level, see Organisation Contact URL and/or at the course level, see Course Contact URL so they can raise any questions they may have directly to your preferred area If you set the contact URL for a course, this will override any contact URL you may have set at the organisation level. Students will then be given the option to report a problem, ask a question related to their course work or if they have a problem accessing the Codio platform, or loading a specific assignment. N.B. \"Teacher\" accounts will not be effected by this setting and they will still be able to contact Codio in the usual manner.","title":"Student Support"},{"location":"project/books/","text":"Introduction \uf0c1 Codio Books lets you build a complete book, with chapters, sections and pages that can be nested to any depth to form a table of contents and associated content that mirrors a normal book structure. Parts of a book can then be mapped to assignments in courses. A Codio book still sits on top of a Codio box so you have the same capabilities that projects and assignments have. Before we introduced books, switching assignments wasted time as a new assignment needed to load, which took several seconds. If you frequently switch assignments (for instance during student revision) this delay becomes irritating. With a book, there is no delay and the student can freely access all parts of the book irrespective of which assignment they are accessing. Recommendations \uf0c1 We strongly recommend you have a thorough understanding of the following before embarking on large scale books. Content authoring Courses , especially how courses map to books Assigning content to courses Limitations (see below) Limitations, restrictions and when not to use a book \uf0c1 There are cases where authoring your content in a book is not appropriate. For more information on this, please refer to limitations and restrictions below. Courses \uf0c1 Rather than assign a Book to a course, you can map any sections of the Book to the usual course and module structure. So you can still divide a course into modules and assignments and assign these to a course. Assessments \uf0c1 Although it is entirely up to the book author, a book will usually contains a number of assessments. When you map a course assignment to a section of the book, any assessments that fall within that assignment are shown in the course dashboard. You should make a decision as to when assessments should be in the book and when they are better suited to a project assignment. Generally speaking, standard assessments that are used to monitor student engagement with content belong in the book. Questions that are assigned to a course for homework or lab assessments could also go in a book but are usually better in a course project assignment. Please refer to limitations and restrictions below for a discussion on cheating related risks to putting assessments in a book. Limitations and restrictions \uf0c1 When you map book content to a course assignment, you should be aware that certain features may not work as expected. Because a book sits on a single Codio box, if the student is able to access the terminal window or is able to see the file tree, they can effectively access parts of the book that are outside the scope of the assignment. In many cases, this does not matter, but you should be aware of it. Here are some specific things to be aware of. Auto grade script : in assignment settings , you can specify an auto grade script to execute when the student makes the assignment as complete. You can still use this but if the script you are executing needs to be assignment specific, then you should include an argument that is passed to your script so it knows the assignment context. Plagiarism - plagiarism detection makes little sense in books. If you have are doing coding assignments, then you should use a project assignment within a course. Mark as complete : this works as expected but, unlike course project assignments and projects, it cannot set the project to be read-only as the book project can be mapped to other assignments which will require access to the box. Secure assessments : if you want to minimize the risk of student cheating, then you should understand that students may be able to access the terminal window and access all parts of the underlying box. As a result, we would recommend that more secure assessments are placed in project assignments rather than book based assignments. This also allows full disabling of the box by setting a project to read-only after being marked as complete. Creating and managing books \uf0c1 Creating a new book \uf0c1 Creating a new book is done from the main books screen. Press the large blue New Book button. You will get the same options for creating a book as for a project, so you can start from scratch or import from a project or a Git repo. You also have control over visibility as with projects and courses. Editing a book in the IDE \uf0c1 Once the book has been created, you can edit the book in the IDE by clicking on the book. Editing a book's settings \uf0c1 Modify a book's settings by clicking on the gear icon. Deleting a book \uf0c1 You can delete a book by clicking on the gear icon and then pressing the Delete button. Table of contents \uf0c1 The table of contents is edited using the Codio Guide authoring capability. This is the same functionality as available for authoring project and project assignment content. Please click here for full details. Editing page content \uf0c1 The page content is edited using the Codio Guide authoring capability. This is the same functionality as available for authoring project and project assignment content. Please click here for full details. Publishing and the stack \uf0c1 It is important to understand how and why a book is published. Until you publish a book, it behaves exactly as a project does. You can open it up and work with it but it cannot be accessed by anyone or mapped to a course until it has been published. After a book is published, you can continue to work on the book without the published version being affected. Please note the following. Publishing creates a snapshot of the book and creates a new version. You can continue work on the book without affecting the published version. When you map a course assignment to a book, it will only pull from a published version. When you press the Publish button, the following screen will appear where you can add details of the changes made. This will then be available to see from the versions tab Later book modifications \uf0c1 If, after publishing, you make further changes to your book then you will need to re-publish when you want those changes to be available to courses. This will not happen automatically. You will need to update the project assignment within your course to pull the published version. See Editing a book assignment for more information. Course mapping \uf0c1 A book cannot be assigned to a course without mapping it through a course. The advantage of this approach is that you can break your book into smaller chunks that map to lessons or lectures. You can map the entire book through a single course assignment if you are not concerned about detailed assignment mappings. Please refer to Creating book based course assignments page for details on how to do this. Permissions and collaboration \uf0c1 By default, a book is only available to you for editing purposes and only you can create courses from a Book. You can change permissions to allow others to edit your book to create courses from your book. To modify the permissions, goto Books from the dashboard. Then select the settings icon. Private / Public visibility \uf0c1 If the book is set to Private , unless you override the permissions, only you can modify a book contents and create course assignments from it. Private books cannot be assigned to public courses. If the book is set to Public , then any Codio user inside or outside your organization can create courses from your book but they will not be able to edit it. The default organization setting restricts the ability to create Public books. To allow this, see Public/Private Settings . Permissions and collaboration \uf0c1 If you want 2 or more people to collaborate on a book, you need to understand how Codio manages this process. It is recommended that you connect your assignments to a remote repo (GitHub/BitBucket etc) where you can push your work. As well as giving you full versioning control it also allows you to easily update assignments where you may use the same content in different courses as you can make the changes in one assignment, push to the repo and then pull in the changes to the other assignments to publish. collaborate with colleagues who can create their own 'project' by importing from the repo and push their changes to the repo for review before they are pulled into the course assignment and published. If you wish to do this within Codio however, you need to give explicit permission to other users or to an organization and apply write permissions. The permissions can be changed by selecting the Permissions tab on the book settings screen. You should first specify which user or organization you want to grant permissions to. You need to know the precise organization or user name and this is case sensitive. We do not support lookups as the potential for incorrect assignment is too great. You can grant the following permissions. Read : this allows the user or organization specified to create course assignments from your book. Write : this allows the user or organization to create course assignments and to edit your book. If you want to co-author/collaborate with another user on a book, then you an either follow the process described below or you can use git and a remote git repo. It is important to understand that each user editing a book is not actually editing the same physical project. Codio uses snapshotting of the latest published version. If using the basic collaboration approach described below and not git, then you should remember that only one user should make changes at a time . If User A and User B want to collaborate, then they each need to inform the other when they are working on the content. If they fail to do so, then one person will have to surrender their changes at some point. Let's say User A has created a book and authored some content. User A now wants User B to be able to work on the content. User A should first publish the book. Be aware that if User A does not publish the book, then User B will start with an empty book. When User B accesses the book (from the Shared with me tab on the main books listing), Codio will take a snapshot of the published book and User B can start work on it. In other words, User B is not editing User A's book, User B is now working on a clone of the published book. User B now makes changes to the book. When done, User B should publish the book and inform User A that the changes are complete and published. At this point, when User A opens the project, a dialog will appear showing that User B has published new changes. User A can now update her own version of the book from this published version. And so the cycle continues. You can do this with as many users as you like, provided that only one user is making changes at a time. Creating course assignments \uf0c1 Books cannot be accessed directly by students. Once your book is published , you need to map parts of it to one or more course assignments , which can then be assigned to a course .","title":"Books"},{"location":"project/books/#introduction","text":"Codio Books lets you build a complete book, with chapters, sections and pages that can be nested to any depth to form a table of contents and associated content that mirrors a normal book structure. Parts of a book can then be mapped to assignments in courses. A Codio book still sits on top of a Codio box so you have the same capabilities that projects and assignments have. Before we introduced books, switching assignments wasted time as a new assignment needed to load, which took several seconds. If you frequently switch assignments (for instance during student revision) this delay becomes irritating. With a book, there is no delay and the student can freely access all parts of the book irrespective of which assignment they are accessing.","title":"Introduction"},{"location":"project/books/#recommendations","text":"We strongly recommend you have a thorough understanding of the following before embarking on large scale books. Content authoring Courses , especially how courses map to books Assigning content to courses Limitations (see below)","title":"Recommendations"},{"location":"project/books/#limitations-restrictions-and-when-not-to-use-a-book","text":"There are cases where authoring your content in a book is not appropriate. For more information on this, please refer to limitations and restrictions below.","title":"Limitations, restrictions and when not to use a book"},{"location":"project/books/#courses","text":"Rather than assign a Book to a course, you can map any sections of the Book to the usual course and module structure. So you can still divide a course into modules and assignments and assign these to a course.","title":"Courses"},{"location":"project/books/#assessments","text":"Although it is entirely up to the book author, a book will usually contains a number of assessments. When you map a course assignment to a section of the book, any assessments that fall within that assignment are shown in the course dashboard. You should make a decision as to when assessments should be in the book and when they are better suited to a project assignment. Generally speaking, standard assessments that are used to monitor student engagement with content belong in the book. Questions that are assigned to a course for homework or lab assessments could also go in a book but are usually better in a course project assignment. Please refer to limitations and restrictions below for a discussion on cheating related risks to putting assessments in a book.","title":"Assessments"},{"location":"project/books/#limitations-and-restrictions","text":"When you map book content to a course assignment, you should be aware that certain features may not work as expected. Because a book sits on a single Codio box, if the student is able to access the terminal window or is able to see the file tree, they can effectively access parts of the book that are outside the scope of the assignment. In many cases, this does not matter, but you should be aware of it. Here are some specific things to be aware of. Auto grade script : in assignment settings , you can specify an auto grade script to execute when the student makes the assignment as complete. You can still use this but if the script you are executing needs to be assignment specific, then you should include an argument that is passed to your script so it knows the assignment context. Plagiarism - plagiarism detection makes little sense in books. If you have are doing coding assignments, then you should use a project assignment within a course. Mark as complete : this works as expected but, unlike course project assignments and projects, it cannot set the project to be read-only as the book project can be mapped to other assignments which will require access to the box. Secure assessments : if you want to minimize the risk of student cheating, then you should understand that students may be able to access the terminal window and access all parts of the underlying box. As a result, we would recommend that more secure assessments are placed in project assignments rather than book based assignments. This also allows full disabling of the box by setting a project to read-only after being marked as complete.","title":"Limitations and restrictions"},{"location":"project/books/#creating-and-managing-books","text":"","title":"Creating and managing books"},{"location":"project/books/#creating-a-new-book","text":"Creating a new book is done from the main books screen. Press the large blue New Book button. You will get the same options for creating a book as for a project, so you can start from scratch or import from a project or a Git repo. You also have control over visibility as with projects and courses.","title":"Creating a new book"},{"location":"project/books/#editing-a-book-in-the-ide","text":"Once the book has been created, you can edit the book in the IDE by clicking on the book.","title":"Editing a book in the IDE"},{"location":"project/books/#editing-a-books-settings","text":"Modify a book's settings by clicking on the gear icon.","title":"Editing a book's settings"},{"location":"project/books/#deleting-a-book","text":"You can delete a book by clicking on the gear icon and then pressing the Delete button.","title":"Deleting a book"},{"location":"project/books/#table-of-contents","text":"The table of contents is edited using the Codio Guide authoring capability. This is the same functionality as available for authoring project and project assignment content. Please click here for full details.","title":"Table of contents"},{"location":"project/books/#editing-page-content","text":"The page content is edited using the Codio Guide authoring capability. This is the same functionality as available for authoring project and project assignment content. Please click here for full details.","title":"Editing page content"},{"location":"project/books/#publishing-and-the-stack","text":"It is important to understand how and why a book is published. Until you publish a book, it behaves exactly as a project does. You can open it up and work with it but it cannot be accessed by anyone or mapped to a course until it has been published. After a book is published, you can continue to work on the book without the published version being affected. Please note the following. Publishing creates a snapshot of the book and creates a new version. You can continue work on the book without affecting the published version. When you map a course assignment to a book, it will only pull from a published version. When you press the Publish button, the following screen will appear where you can add details of the changes made. This will then be available to see from the versions tab","title":"Publishing and the stack"},{"location":"project/books/#later-book-modifications","text":"If, after publishing, you make further changes to your book then you will need to re-publish when you want those changes to be available to courses. This will not happen automatically. You will need to update the project assignment within your course to pull the published version. See Editing a book assignment for more information.","title":"Later book modifications"},{"location":"project/books/#course-mapping","text":"A book cannot be assigned to a course without mapping it through a course. The advantage of this approach is that you can break your book into smaller chunks that map to lessons or lectures. You can map the entire book through a single course assignment if you are not concerned about detailed assignment mappings. Please refer to Creating book based course assignments page for details on how to do this.","title":"Course mapping"},{"location":"project/books/#permissions-and-collaboration","text":"By default, a book is only available to you for editing purposes and only you can create courses from a Book. You can change permissions to allow others to edit your book to create courses from your book. To modify the permissions, goto Books from the dashboard. Then select the settings icon.","title":"Permissions and collaboration"},{"location":"project/books/#private-public-visibility","text":"If the book is set to Private , unless you override the permissions, only you can modify a book contents and create course assignments from it. Private books cannot be assigned to public courses. If the book is set to Public , then any Codio user inside or outside your organization can create courses from your book but they will not be able to edit it. The default organization setting restricts the ability to create Public books. To allow this, see Public/Private Settings .","title":"Private / Public visibility"},{"location":"project/books/#permissions-and-collaboration_1","text":"If you want 2 or more people to collaborate on a book, you need to understand how Codio manages this process. It is recommended that you connect your assignments to a remote repo (GitHub/BitBucket etc) where you can push your work. As well as giving you full versioning control it also allows you to easily update assignments where you may use the same content in different courses as you can make the changes in one assignment, push to the repo and then pull in the changes to the other assignments to publish. collaborate with colleagues who can create their own 'project' by importing from the repo and push their changes to the repo for review before they are pulled into the course assignment and published. If you wish to do this within Codio however, you need to give explicit permission to other users or to an organization and apply write permissions. The permissions can be changed by selecting the Permissions tab on the book settings screen. You should first specify which user or organization you want to grant permissions to. You need to know the precise organization or user name and this is case sensitive. We do not support lookups as the potential for incorrect assignment is too great. You can grant the following permissions. Read : this allows the user or organization specified to create course assignments from your book. Write : this allows the user or organization to create course assignments and to edit your book. If you want to co-author/collaborate with another user on a book, then you an either follow the process described below or you can use git and a remote git repo. It is important to understand that each user editing a book is not actually editing the same physical project. Codio uses snapshotting of the latest published version. If using the basic collaboration approach described below and not git, then you should remember that only one user should make changes at a time . If User A and User B want to collaborate, then they each need to inform the other when they are working on the content. If they fail to do so, then one person will have to surrender their changes at some point. Let's say User A has created a book and authored some content. User A now wants User B to be able to work on the content. User A should first publish the book. Be aware that if User A does not publish the book, then User B will start with an empty book. When User B accesses the book (from the Shared with me tab on the main books listing), Codio will take a snapshot of the published book and User B can start work on it. In other words, User B is not editing User A's book, User B is now working on a clone of the published book. User B now makes changes to the book. When done, User B should publish the book and inform User A that the changes are complete and published. At this point, when User A opens the project, a dialog will appear showing that User B has published new changes. User A can now update her own version of the book from this published version. And so the cycle continues. You can do this with as many users as you like, provided that only one user is making changes at a time.","title":"Permissions and collaboration"},{"location":"project/books/#creating-course-assignments","text":"Books cannot be accessed directly by students. Once your book is published , you need to map parts of it to one or more course assignments , which can then be assigned to a course .","title":"Creating course assignments"},{"location":"project/packs/","text":"Starter Packs are a very powerful way to create and manage templated projects. Please read the following sections for full details. What is a starter pack? \uf0c1 Starter Packs are a very powerful way to create and manage templated projects that include The base Ubuntu operating system. This is always present so you don't need to think about this really. A Stack (base software dependencies such as databases, languages and other system components). This is entirely optional, but Codio's Stack features ensure that you don't have to laboriously configure the Stack. Any code present in your Project. It's entirely up to you what you include. It could be a Wordpress site, or a front-end framework or some working code examples. With Starter Packs, you can organize and share your own Starter Packs as well as find Codio Certified Packs and even Packs published by others. Certified packs \uf0c1 To save you as much time as possible, we include a range of Codio certified Starter Packs. These have been tried and tested by the Codio team. We are adding to these all the time. To access these, click on the Certified header. You can then use the search field to look for technologies. Requesting additional packs \uf0c1 If you want additional Starter Packs, you can easily create your own. However, if you feel that we should add a new Codio Certified Pack, then please email us at help@codio.com with full details and we'll try to get it added for you. Selecting a pack \uf0c1 Once you have found the Starter Pack you want to use, you can create a new Project based on this in either of these ways Click on the name of the pack to see full details about this Pack before pressing the Use Pack button in the top right of the information panel. You will then be transferred to the Create Project dialog, so Codio can create a new Project for you based on the selected Starter Pack. Creating a pack \uf0c1 You can create a new Starter Pack by pressing the New Pack button. Please refer to the Pack Guidelines for details in how to approach Starter Pack creation. Selecting the Source \uf0c1 You need to tell Codio where to get its source code from. There are two options Codio : you have a Codio project where your code is located Git/Mercurial : you can specify a Git or Mercurial repo that gets pulled in afresh each time someone creates a new Project based on your Starter Pack. Please Note : We strongly advise that you use the HTTPS URL to the repository. If you use the SSH URL any users that do not have their Codio SSH Key uploaded to the remote will not be able to create a project from this Starter Pack. Selecting a Stack \uf0c1 Each Starter Pack requires a Stack . If you only need a base Ubuntu Box, then you do not need to specify a Stack. Please be aware that a Starter Pack is simply a Codio Stack plus a code workspace. If you based your Starter Pack on a Project that has had the Box modified (additional Box components installed, npm global install etc.), then these will not be present in a Project created from the Starter Pack. Description Details \uf0c1 You can add short and long descriptions as well as an image and tags. Tags are important and will allow you and others to find Packs in a more targeted fashion. Visibilty \uf0c1 By default, Starter Packs are kept private to your account until you make them public, at which point they will appear in the Popular and All Packs listings for all Codio Users. If you are a member of an Organization, the Organization owner can disable the ability for you to create public starter packs. See Public/Private Settings . If you want to keep your Starter Pack private to your Organization, you can select the Private option and set the Owner option to your Organization. Important : please do not make your Packs public unless they are tried, tested and fit for public consumption so as not to fill the All listing with junk. Ownership \uf0c1 You can specify whether other Codio Users within your Organization are able to access and Administer your Packs. If you are not a member of an Organization, this cannot be used. Write a tutorial \uf0c1 Codio guide is a very powerful content authoring feature that lets you write course content that is fully integrated into the IDE. So if you are creating a starter pack for tuition purposes, this is extremely useful and easy to use. Pack guidelines \uf0c1 When creating a Starter Pack, here are some ideas on strategy and how to make them as useful as possible. Starting Stack \uf0c1 When you create a Pack, you should first create a new Project from the closest Stack that meets your requirements. You can also use the Base Stack and then install your own components . .codio file \uf0c1 It is often helpful to create a .codio file in the root of your project so that running common terminal commands and previewing can be accessed quickly and easily. Information on this can be found here . To enable your project to preview inside a Codio tab, you will need to configure the preview to run over https. We recommend this as being the default behavior as it will run both inside Codio and in a new browser tab this way. This will require you to configure any services to run on any port between 9500 and 9000. The following .codio file is typical: { // Configure your Run and Preview buttons here. // Run button configuration \"commands\": { \"Start Express Server\": \"npm start\" }, // Preview button configuration \"preview\": { \"Preview\": \"https://{{domain}}:9500/\" } } Configuring the correct port in the range of 9500 to 9999 depends on the server side technology you are using. Create a new Stack \uf0c1 If you have installed or configured any components that are not a part of the code workspace, then you may want to create a special Stack that your Starter Pack uses. If you don't do this, then Projects that are created from the Starter Pack will need to have these modifications performed after Project creation. This might be an npm install if you are using Node. Use GitHub \uf0c1 Although you can use Codio as the source for your Starter Pack, we recommend pushing your Project to a Git remote. This gives better version control over time. The creation process is also somewhat faster. When you create the Starter Pack, you can specify the Git url. Long Description \uf0c1 You should include a full description of your Starter Pack that appears when someone clicks on it within the Starter Packs listing. Check out some of Codio Certified Pack long descriptions. Write a Codio Guide \uf0c1 Codio Guides is a very powerful content authoring feature that lets you write course content that is fully integrated into the IDE. So if you are creating a Starter Pack for tuition purposes, a Guide is extremely useful and easy to use. README.md file \uf0c1 You should create a README.md file in the root of your project that displays helpful information the user can see when they open the project. Below is a template you could use. # Title Put the name of your Pack here containing the primary technology or technologies with a version number, along with a short description. ## Using the Pack Describe how the user should get started. Point to your `.codio` menu options if you have created any. ## How the Pack was prepared It can be helpful to others or even to you later on to describe how you built the Pack. What we often do is to include a set of instructions that can be pasted into a Bash script to recreate the Pack with a single command. **Example** : This Starter Pack was built on the Node+Grunt+MongoDB Stack. We than ran the following commands before creating the Pack. npm install -g express npm install -g express-generator express . npm install ## Useful Links - [Express site](http://expressjs.com/) - [Node](http://nodejs.org/) - [npm](https://www.npmjs.org/) - [Grunt](http://gruntjs.com/) - [MongoDB](https://www.mongodb.org) Updating a pack \uf0c1 The best way to update an existing Starter Pack is to follow these steps Either a) create a new Project from your Starter Pack or b) locate an existing Project that you wish to use for your Starter Pack. Locate the Starter Pack again the main listing. Press Edit. In the SOURCE field, locate the correctly configured Project. Press CREATE at the bottom of the form. Codio does not support versioning for Starter Packs. Changing the source in the Starter Pack Edit screen \uf0c1 When you edit your Starter Pack, the Source field is enabled if You are the owner of the source Project The Project is present and has not been deleted. If someone else owns the Project or if you have deleted the underlying Project, then you can still edit the Project data fields below the Source field and the original Project that was used will be retained. Deleting a pack \uf0c1 To delete a Starter Pack, first locate and select the pack. You can then press the red 'Delete' icon at the bottom right of the information screen. You will be required to enter a confirmation code before it is finally deleted. Any projects that were created from a Starter Pack will not be impacted.","title":"How to use starter packs"},{"location":"project/packs/#what-is-a-starter-pack","text":"Starter Packs are a very powerful way to create and manage templated projects that include The base Ubuntu operating system. This is always present so you don't need to think about this really. A Stack (base software dependencies such as databases, languages and other system components). This is entirely optional, but Codio's Stack features ensure that you don't have to laboriously configure the Stack. Any code present in your Project. It's entirely up to you what you include. It could be a Wordpress site, or a front-end framework or some working code examples. With Starter Packs, you can organize and share your own Starter Packs as well as find Codio Certified Packs and even Packs published by others.","title":"What is a starter pack?"},{"location":"project/packs/#certified-packs","text":"To save you as much time as possible, we include a range of Codio certified Starter Packs. These have been tried and tested by the Codio team. We are adding to these all the time. To access these, click on the Certified header. You can then use the search field to look for technologies.","title":"Certified packs"},{"location":"project/packs/#requesting-additional-packs","text":"If you want additional Starter Packs, you can easily create your own. However, if you feel that we should add a new Codio Certified Pack, then please email us at help@codio.com with full details and we'll try to get it added for you.","title":"Requesting additional packs"},{"location":"project/packs/#selecting-a-pack","text":"Once you have found the Starter Pack you want to use, you can create a new Project based on this in either of these ways Click on the name of the pack to see full details about this Pack before pressing the Use Pack button in the top right of the information panel. You will then be transferred to the Create Project dialog, so Codio can create a new Project for you based on the selected Starter Pack.","title":"Selecting a pack"},{"location":"project/packs/#creating-a-pack","text":"You can create a new Starter Pack by pressing the New Pack button. Please refer to the Pack Guidelines for details in how to approach Starter Pack creation.","title":"Creating a pack"},{"location":"project/packs/#selecting-the-source","text":"You need to tell Codio where to get its source code from. There are two options Codio : you have a Codio project where your code is located Git/Mercurial : you can specify a Git or Mercurial repo that gets pulled in afresh each time someone creates a new Project based on your Starter Pack. Please Note : We strongly advise that you use the HTTPS URL to the repository. If you use the SSH URL any users that do not have their Codio SSH Key uploaded to the remote will not be able to create a project from this Starter Pack.","title":"Selecting the Source"},{"location":"project/packs/#selecting-a-stack","text":"Each Starter Pack requires a Stack . If you only need a base Ubuntu Box, then you do not need to specify a Stack. Please be aware that a Starter Pack is simply a Codio Stack plus a code workspace. If you based your Starter Pack on a Project that has had the Box modified (additional Box components installed, npm global install etc.), then these will not be present in a Project created from the Starter Pack.","title":"Selecting a Stack"},{"location":"project/packs/#description-details","text":"You can add short and long descriptions as well as an image and tags. Tags are important and will allow you and others to find Packs in a more targeted fashion.","title":"Description Details"},{"location":"project/packs/#visibilty","text":"By default, Starter Packs are kept private to your account until you make them public, at which point they will appear in the Popular and All Packs listings for all Codio Users. If you are a member of an Organization, the Organization owner can disable the ability for you to create public starter packs. See Public/Private Settings . If you want to keep your Starter Pack private to your Organization, you can select the Private option and set the Owner option to your Organization. Important : please do not make your Packs public unless they are tried, tested and fit for public consumption so as not to fill the All listing with junk.","title":"Visibilty"},{"location":"project/packs/#ownership","text":"You can specify whether other Codio Users within your Organization are able to access and Administer your Packs. If you are not a member of an Organization, this cannot be used.","title":"Ownership"},{"location":"project/packs/#write-a-tutorial","text":"Codio guide is a very powerful content authoring feature that lets you write course content that is fully integrated into the IDE. So if you are creating a starter pack for tuition purposes, this is extremely useful and easy to use.","title":"Write a tutorial"},{"location":"project/packs/#pack-guidelines","text":"When creating a Starter Pack, here are some ideas on strategy and how to make them as useful as possible.","title":"Pack guidelines"},{"location":"project/packs/#starting-stack","text":"When you create a Pack, you should first create a new Project from the closest Stack that meets your requirements. You can also use the Base Stack and then install your own components .","title":"Starting Stack"},{"location":"project/packs/#codio-file","text":"It is often helpful to create a .codio file in the root of your project so that running common terminal commands and previewing can be accessed quickly and easily. Information on this can be found here . To enable your project to preview inside a Codio tab, you will need to configure the preview to run over https. We recommend this as being the default behavior as it will run both inside Codio and in a new browser tab this way. This will require you to configure any services to run on any port between 9500 and 9000. The following .codio file is typical: { // Configure your Run and Preview buttons here. // Run button configuration \"commands\": { \"Start Express Server\": \"npm start\" }, // Preview button configuration \"preview\": { \"Preview\": \"https://{{domain}}:9500/\" } } Configuring the correct port in the range of 9500 to 9999 depends on the server side technology you are using.","title":".codio file"},{"location":"project/packs/#create-a-new-stack","text":"If you have installed or configured any components that are not a part of the code workspace, then you may want to create a special Stack that your Starter Pack uses. If you don't do this, then Projects that are created from the Starter Pack will need to have these modifications performed after Project creation. This might be an npm install if you are using Node.","title":"Create a new Stack"},{"location":"project/packs/#use-github","text":"Although you can use Codio as the source for your Starter Pack, we recommend pushing your Project to a Git remote. This gives better version control over time. The creation process is also somewhat faster. When you create the Starter Pack, you can specify the Git url.","title":"Use GitHub"},{"location":"project/packs/#long-description","text":"You should include a full description of your Starter Pack that appears when someone clicks on it within the Starter Packs listing. Check out some of Codio Certified Pack long descriptions.","title":"Long Description"},{"location":"project/packs/#write-a-codio-guide","text":"Codio Guides is a very powerful content authoring feature that lets you write course content that is fully integrated into the IDE. So if you are creating a Starter Pack for tuition purposes, a Guide is extremely useful and easy to use.","title":"Write a Codio Guide"},{"location":"project/packs/#readmemd-file","text":"You should create a README.md file in the root of your project that displays helpful information the user can see when they open the project. Below is a template you could use. # Title Put the name of your Pack here containing the primary technology or technologies with a version number, along with a short description. ## Using the Pack Describe how the user should get started. Point to your `.codio` menu options if you have created any. ## How the Pack was prepared It can be helpful to others or even to you later on to describe how you built the Pack. What we often do is to include a set of instructions that can be pasted into a Bash script to recreate the Pack with a single command. **Example** : This Starter Pack was built on the Node+Grunt+MongoDB Stack. We than ran the following commands before creating the Pack. npm install -g express npm install -g express-generator express . npm install ## Useful Links - [Express site](http://expressjs.com/) - [Node](http://nodejs.org/) - [npm](https://www.npmjs.org/) - [Grunt](http://gruntjs.com/) - [MongoDB](https://www.mongodb.org)","title":"README.md file"},{"location":"project/packs/#updating-a-pack","text":"The best way to update an existing Starter Pack is to follow these steps Either a) create a new Project from your Starter Pack or b) locate an existing Project that you wish to use for your Starter Pack. Locate the Starter Pack again the main listing. Press Edit. In the SOURCE field, locate the correctly configured Project. Press CREATE at the bottom of the form. Codio does not support versioning for Starter Packs.","title":"Updating a pack"},{"location":"project/packs/#changing-the-source-in-the-starter-pack-edit-screen","text":"When you edit your Starter Pack, the Source field is enabled if You are the owner of the source Project The Project is present and has not been deleted. If someone else owns the Project or if you have deleted the underlying Project, then you can still edit the Project data fields below the Source field and the original Project that was used will be retained.","title":"Changing the source in the Starter Pack Edit screen"},{"location":"project/packs/#deleting-a-pack","text":"To delete a Starter Pack, first locate and select the pack. You can then press the red 'Delete' icon at the bottom right of the information screen. You will be required to enter a confirmation code before it is finally deleted. Any projects that were created from a Starter Pack will not be impacted.","title":"Deleting a pack"},{"location":"project/projects/","text":"Codio works with a series of templates, or Codio stacks. You can use our pre-configured stacks or create your own. This template approach makes Codio easy to use, configure and adapt. Codio's templates deliver fully preconfigured servers in less than 5 seconds, no matter how complex the configuration.. You can use our pre-configured stacks or create your own. What is a project? \uf0c1 Here are the key things you need to know about projects. A project is an Ubuntu server. We commonly refer to your project server as a box . You can create as many projects as you need. Each project box is fully isolated from every other one. When you open a project you are taken into the box and are shown the Codio IDE. You have access to the command line via a terminal window. You have sudo level privileges to your server, so you can install and configure any box exactly as you please. You can snapshot the software configuration, commonly referred to as a stack , of any box and add it to the Stacks template library. You can snapshot the combination of a Stack and the project code workspace and add it to the Starter Packs template library. Strong recommendations \uf0c1 We strongly recommend that you are familiar with the following concepts if you plan to assign projects to classes of students. Even if you don't, knowledge of the following project related features will stand you in good stead. Boxes and the IDE section, available on the main index page of the documentation Stacks Starter Packs Authoring tutorial content with Codio Guides and Books Creating Course Content Courses Creating and importing a project \uf0c1 Create a new project, or import one by, clicking on the New Project button on the Dashboard. You can then choose which of the following Project creation methods you want to use. Creating an empty project \uf0c1 Select a commonly used template from the available list: Java 11: Python: Nodejs C C++ Empty Stack: Projects created from a template will include an explanatory README.md file providing useful information to help you get started and with the exception of the Empty Stack will also include a pre-configured .codio menu set up with basic actions such a project would require. If you wish to re configure the .codio menu file, you can. See Customizable Run Menu for more information The list of stack templates is only a starting point. You can take any stack and then customize it from the command line. Users have sudo level privileges and so can install and configure exactly as they please. Refer to the section on Stacks to learn how to create and manage your own software configuration templates. Importing code into a project \uf0c1 Click on the 'Click here....' link to import or select an alternative software configuration: Empty with Stack will create a new project with a stack you select from the full stack options, rather than the limited options available on the main New Project screen. Copy project lets you create a new project from another of your projects. Starter Pack which is the combination of a Stack and a pre-configured code workspace. Import lets you import from Git or from a Zip file of a Codio project. Selecting a Stack \uf0c1 If you have clicked on the click here link, you can then specify the Stack your new Project will be assigned. Details \uf0c1 You should give your project a name and a description, which will appear in the projects listing. Visibility \uf0c1 Projects that are public can be found by any Codio user. Organization owners can enable the ability for you to create public projects. See Public/Private Settings . By default, projects are created as private. In My Projects you will see a padlock icon for any Projects that are private. You can assign access read, write and full admin rights (ability for others to access the Box from the terminal) to other users for private projects from within the IDE from the Project->Permissions menu. Accessing your projects \uf0c1 The My Projects area shows all your coding Projects. Opening a Project \uf0c1 To view a project in the IDE, simply click on one of your projects. Sorting \uf0c1 Your Projects can be sorted by name or by date last accessed. Filtering \uf0c1 You can search for a specific project by typing into the Search field. The file list will dynamically filter for you as you type. Project Settings \uf0c1 You can access your project settings by opening the project and going to Project>Settings or clicking the gear icon in the right side of the listing. Searching projects \uf0c1 Codio lets you locate projects in a number of different ways from your project dashboard. Normal Searching \uf0c1 The simplest and most powerful way to use search is to simply start typing, whereupon Codio will search within all project names, project description and owner fields and filter your project list accordingly. Advanced Searching \uf0c1 If you want to search in different ways, you can use search tokens to narrow your search. Codio supports the following tokens: Tokens with parameters \uf0c1 The following tokens allow you to type something after the colon delimiter name: search the project name desc: search the project description owner: search the project owner org: search for an organization name begin: search for a class start date (Education feature) end: search for a class end date (Education feature) Tokens without parameters \uf0c1 These tokens do not take any parameters so add a space after them if you have anything else to enter in the search line. my: show only projects owned by me. shared: show only projects that are shared with me. public: show only my public projects. private: show only my private projects. Examples \uf0c1 public: desc:javascript searches your public projects where 'javascript' appears in the project description. owner:superman javascript searches projects owned by the user 'superman'' where 'javascript' appears in the project name or description. Accessing another user's project \uf0c1 If you know the user name of another Codio user, you can enter the URL for their account which is of the format: https://codio.com/username You will then see that user's Dashboard and all public projects will be displayed. You can then load any of those projects into the IDE by clicking on it. You will not be able to edit the project but you can copy it into your own account. If a project has been shared to you, you will be able to view this from your My Projects > Shared with me area.","title":"Project Templates"},{"location":"project/projects/#what-is-a-project","text":"Here are the key things you need to know about projects. A project is an Ubuntu server. We commonly refer to your project server as a box . You can create as many projects as you need. Each project box is fully isolated from every other one. When you open a project you are taken into the box and are shown the Codio IDE. You have access to the command line via a terminal window. You have sudo level privileges to your server, so you can install and configure any box exactly as you please. You can snapshot the software configuration, commonly referred to as a stack , of any box and add it to the Stacks template library. You can snapshot the combination of a Stack and the project code workspace and add it to the Starter Packs template library.","title":"What is a project?"},{"location":"project/projects/#strong-recommendations","text":"We strongly recommend that you are familiar with the following concepts if you plan to assign projects to classes of students. Even if you don't, knowledge of the following project related features will stand you in good stead. Boxes and the IDE section, available on the main index page of the documentation Stacks Starter Packs Authoring tutorial content with Codio Guides and Books Creating Course Content Courses","title":"Strong recommendations"},{"location":"project/projects/#creating-and-importing-a-project","text":"Create a new project, or import one by, clicking on the New Project button on the Dashboard. You can then choose which of the following Project creation methods you want to use.","title":"Creating and importing a project"},{"location":"project/projects/#creating-an-empty-project","text":"Select a commonly used template from the available list: Java 11: Python: Nodejs C C++ Empty Stack: Projects created from a template will include an explanatory README.md file providing useful information to help you get started and with the exception of the Empty Stack will also include a pre-configured .codio menu set up with basic actions such a project would require. If you wish to re configure the .codio menu file, you can. See Customizable Run Menu for more information The list of stack templates is only a starting point. You can take any stack and then customize it from the command line. Users have sudo level privileges and so can install and configure exactly as they please. Refer to the section on Stacks to learn how to create and manage your own software configuration templates.","title":"Creating an empty project"},{"location":"project/projects/#importing-code-into-a-project","text":"Click on the 'Click here....' link to import or select an alternative software configuration: Empty with Stack will create a new project with a stack you select from the full stack options, rather than the limited options available on the main New Project screen. Copy project lets you create a new project from another of your projects. Starter Pack which is the combination of a Stack and a pre-configured code workspace. Import lets you import from Git or from a Zip file of a Codio project.","title":"Importing code into a project"},{"location":"project/projects/#selecting-a-stack","text":"If you have clicked on the click here link, you can then specify the Stack your new Project will be assigned.","title":"Selecting a Stack"},{"location":"project/projects/#details","text":"You should give your project a name and a description, which will appear in the projects listing.","title":"Details"},{"location":"project/projects/#visibility","text":"Projects that are public can be found by any Codio user. Organization owners can enable the ability for you to create public projects. See Public/Private Settings . By default, projects are created as private. In My Projects you will see a padlock icon for any Projects that are private. You can assign access read, write and full admin rights (ability for others to access the Box from the terminal) to other users for private projects from within the IDE from the Project->Permissions menu.","title":"Visibility"},{"location":"project/projects/#accessing-your-projects","text":"The My Projects area shows all your coding Projects.","title":"Accessing your projects"},{"location":"project/projects/#opening-a-project","text":"To view a project in the IDE, simply click on one of your projects.","title":"Opening a Project"},{"location":"project/projects/#sorting","text":"Your Projects can be sorted by name or by date last accessed.","title":"Sorting"},{"location":"project/projects/#filtering","text":"You can search for a specific project by typing into the Search field. The file list will dynamically filter for you as you type.","title":"Filtering"},{"location":"project/projects/#project-settings","text":"You can access your project settings by opening the project and going to Project>Settings or clicking the gear icon in the right side of the listing.","title":"Project Settings"},{"location":"project/projects/#searching-projects","text":"Codio lets you locate projects in a number of different ways from your project dashboard.","title":"Searching projects"},{"location":"project/projects/#normal-searching","text":"The simplest and most powerful way to use search is to simply start typing, whereupon Codio will search within all project names, project description and owner fields and filter your project list accordingly.","title":"Normal Searching"},{"location":"project/projects/#advanced-searching","text":"If you want to search in different ways, you can use search tokens to narrow your search. Codio supports the following tokens:","title":"Advanced Searching"},{"location":"project/projects/#tokens-with-parameters","text":"The following tokens allow you to type something after the colon delimiter name: search the project name desc: search the project description owner: search the project owner org: search for an organization name begin: search for a class start date (Education feature) end: search for a class end date (Education feature)","title":"Tokens with parameters"},{"location":"project/projects/#tokens-without-parameters","text":"These tokens do not take any parameters so add a space after them if you have anything else to enter in the search line. my: show only projects owned by me. shared: show only projects that are shared with me. public: show only my public projects. private: show only my private projects.","title":"Tokens without parameters"},{"location":"project/projects/#examples","text":"public: desc:javascript searches your public projects where 'javascript' appears in the project description. owner:superman javascript searches projects owned by the user 'superman'' where 'javascript' appears in the project name or description.","title":"Examples"},{"location":"project/projects/#accessing-another-users-project","text":"If you know the user name of another Codio user, you can enter the URL for their account which is of the format: https://codio.com/username You will then see that user's Dashboard and all public projects will be displayed. You can then load any of those projects into the IDE by clicking on it. You will not be able to edit the project but you can copy it into your own account. If a project has been shared to you, you will be able to view this from your My Projects > Shared with me area.","title":"Accessing another user's project"},{"location":"project/stacks/","text":"Codio projects are mounted to software configuration templates, known as Codio stacks. You can use our pre-configured stacks or create your own. This template approach makes Codio easy to use, configure and adapt. Codio\u2019s templates deliver fully preconfigured servers in less than 5 seconds, no matter how complex the configuration. What is a stack? \uf0c1 It is very important to understand how Stacks work in Codio, especially when working with courses. Incorrect usage can result in a project working when being edited but failing when run by students. A stack refers to the software configuration of a project server (Box). This incorporates everything on the server outside the code workspace ( /home/codio/workspace ) that you see in the IDE's file tree. You can snapshot a box's stack at any point and add it to the Stacks template library as we explain later. How a Codio project works. \uf0c1 When you create a new Codio project, course assignment or book, you always specify a stack. The specified stack will contain the operating system (always) and other components such as languages, databases and tools. Stack modifications \uf0c1 You will often want to make changes to the software on your server. Any such changes you, or an application, makes outside the workspace folder represents a stack change. Whether such changes are made using sudo apt-get install , manually editing a config file, changes to a database due to application usage etc., these changes all represent stack modifications. Any modifications you make will work fine on the project you are working on as the owner, but as soon as run by students, the modifications will not be transferred. In order to address this, you need to ensure that any project with a modified stack first has a clean stack created that includes your modifications and that the project points to that clean stack. The process for creating a stack and switching the project to point to the new stack is straightforward. Use Case \uf0c1 Let\u2019s consider a MySQL database use case. If the database data location is in the usual place within the stack ( /var/lib/mysql/ ) then when the project is assigned to the course, each student gets their own database, independent of others students, as you would expect. However, if the stack is changed for any reason (you, as project owner, change the stack or stack version of stack for an already assigned assignment) then all database data would be reset to the state of the new stack as the database data folder is not a part of the workspace. If you want to keep the database independent of the stack, then you would need to locate the database file in the workspace folder itself (by editing /etc/mysql/mysql.conf.d/mysqld.cnf . This way, you could update the database software via a stack change but the database data remains intact when you switch stacks. In summary, you should remember the following \u2026 Assignment = Selected Stack + Stack Changes + Workspace Folder When run by students in the course then at the point of the assignment: Assignment = Selected Stack + Workspace (no stack modifications) Stack modifications in the source project or assignment are not transferred when launched by students Once the project or assignment is run by students, if they happen to make changes to their stacks, then each one is individually handled so there are no issues unless you or they select a new stack from Project->Stacks->Settings . Stacks and Stack Versions \uf0c1 When you create a brand new stack or a new stack version, in both cases you are creating a new stack internally. The only difference between a stack and a stack version is that the stack versions are nicely organized under an already named stack. This makes them easy to find and prevents your stack list getting unnecessarily long. So, when referring to a stack in the documentation, we mean either a single stack or a stack version. Assigning a different stack version will also reset all project contents outside the workspace folder to those of the new stack version. What to do prior to assigning to a course \uf0c1 If you have modified the stack in any way, then there are a few use-cases that commonly occur when working with modified stacks prior to assigning to a course. Projects : generally speaking, if you have made any modifications then you should create a new stack and switch your project to the new stack once it is created. This ensures maximum efficiency and speed. If you have not yet created a new stack to incorporate the modifications then you can create a new one by going to Project->Stack->Create New before you publish the assignment. It is good practice to go to your project and set it to point to this stack as soon as possible. It is however, much better practice to update the stack before you publish the assignment in the course module. Course assignments : you should always first create a custom stack and then switch the assignment\u2019s stack , and any other assignments that use the same configuration, to the newly created stack. You can then assign a course module (which assigns all its assignments) to the course. Books : if you are working with a book then the Book points to a stack. If you make any modifications, you have to create a new stack version (or new stack if appropriate) and then switch your stack settings to point to the new stack version. Once this has been done, you should publish a new version of your book. The final step is to update the course to update all assignments that point to a book. Switching Stacks \uf0c1 Remember, when you switch a project\u2019s stack from Project->Stack->Settings , all stack modifications that you may have made relative to the original stack will be replaced by the new stack. Usually this is fine as you would have first created the new stack from the project before switching. Books \uf0c1 Codio Books are somewhat different. There is an explanation above on handling stack modifications for Books. You can refer to the main Books section . Modifying a stack \uf0c1 A Codio project, course assignment or book always has a stack associated with it. When you create a new project you specify the stack. You can also switch a project's stack at any time. You can modify the stack at any time. You do not do this directly. Instead, you open up a project, course assignment or book and make the stack changes from the command line . The concepts behind this are explained in detail on the What is a stack? section. To modify a stack you should be aware of the following rules. You are the owner or have write access \uf0c1 If you are the stack owner or have write access to the stack then you are able to create new versions of an existing stack. See visibility settings for information on ownership. You are not the owner and do not have write access \uf0c1 If you do not have write access to the stack, which is the case for the Codio certified stacks, then you will first need to create a new stack. After this you can create your own versions from that stack as you will be the owner. If the stack is Private and the owner is set to an organization of which you are a member, then you will have write access and will be able to create new versions of that stack. See visibility settings for information on ownership. Creating a stack \uf0c1 Please make sure you have read What is a stack? as this contains important concepts and information. This page explains how to create a new stack or a new stack version from a project or assignment in a course. Create new stack from the IDE \uf0c1 With the project open in the IDE, select the menu option Project->Stack->Create New . This will allow you to create a new stack or a new version of an existing stack you have the rights to update. By default it will be private to you. If you wish to make it available to others, please refer to the Visibility information below. We would recommend you set the owner to your organization. Create new stack from the dashboard \uf0c1 From the dashboard, click on the Stacks item on the left hand side. On the stacks listing page, press the large blue New Stack button to create a new stack. You then point to your project. When you have completed the required fields and pressed the Create button, we will generate a Stack image for you. This can take a few minutes, depending on the size of the Stack image. You do not need to remain on this screen while the Stack is created, so feel free to continue to other parts of Codio. The source project will not be accessible until the stack has been created. Stack Blueprint : you should specify is the Codio project that you want to use for your Stack blueprint. Enter any part of your Project name and you will see them listed in a dropdown. Name and Description : next, add a short name for your Stack and a longer description. You can also add a more detailed overview of your Stack by selecting the \"add a long description\" link. You can write this long description in Markdown. Image : you can also add an image to make your Stack more instantly recognizable in the listing. This should be a square image, which will be reduced in size and will appear in a circle as shown below. Tags : you can also add tags to your Stack. The tags should be component names ideally. There is an autocomplete function that will help you to use already defined tags to avoid tag duplication and ensure maximum efficiency when searching. Stack Guidelines \uf0c1 When creating a Stack, here are some ideas on strategy and how to make them as useful as possible. Starting Stack \uf0c1 When you create a Stack, you should first create a new Project from the closest Stack that meets your requirements. You can also use the Base Stack and then install your own components . Long Description \uf0c1 You should include a full description of your Stack that appears when someone clicks on it within the Stacks listing. This information will also be available to users in Projects by going to Project->Stack->Info in their Project, which should open automatically. Check out some of Codio Certified Pack long descriptions. Below is a template you could use. # Title Put the name of your Stack here. ## Using the Stack Describe how the user should get started. ## Starter Pack If there are related Starter Packs you have created from this Stack that include code files, detail them here. ## Components Installed It can be helpful to others or even to you later on to describe the installed Components and versions. ## Configuration Files Detail where any component configuration files can be found. As you install components from `Tools>Install Software` a log file of all this information will be opened. ## General Information Include any general information on the use and operation of any installed components. ## Codio Documentation We recommend you include useful links to the Codio Documentation. ##Stack Specific Links Provide useful links on the Stack components. Example (from Codio Certified LAMP Stack) \uf0c1 # LAMP ## Using this Stack This Codio Stack gives you a complete **LAMP** stack ready to use and with all services up and running. ## Related Stacks & Starter Packs There are various other Stacks and Starter Packs that may be of interest. Please search the listing for - Stack : **LEMP** - Stack : **LAPP** - Stack : **LAMP** + Composer - Starter Pack : **Laravel** (LAMP + Composer + Laravel) ## Components Installed This Stack contains the following major component versions - **PHP** 5.5.9 - **Apache** 2.4.7 - **MySQL** 14.14 Distrib 5.5.46 ## Configuration Files You can find configuration files in the following locations - **PHP config file** : `/etc/php5/apache2/php.ini` - **Apache config** : `/etc/apache2/apache2.conf` - **MySQL default config file** : `/etc/mysql/my.cnf` ## General Information # Apache Server Apache should be started by default. You can manually start, stop and restart it using the following terminal commands: $ sudo service apache2 start $ sudo service apache2 stop $ sudo service apache2 restart # MySQL ## Start, Stop, Restart the MySQL server MySQL should be started by default. You can manually start, stop and restart the MySQL server using the following terminal commands: $ sudo service mysql start $ sudo service mysql stop $ sudo service mysql restart ## Connecting to the MySQL monitor Assuming the MySQL server is started, you can connect to it using `mysql` from the terminal. Exit using `ctrl+c`. ## Root Password If you want to set the root password, use the following command from the terminal mysqladmin -u root password NEWPASSWORD` ## Codio Documentation Please be aware of the following useful links - [How to Access your Box](/prpject/ide/boxes/) - [If your firewall only allows access to port 80](/project/ide/boxes/ext-access/) - [Creating Codio menu items to avoid repetitive terminal commands](/project/ide/boxes/runmenu/) - [Using Git in Codio](/project/ide/editing/git/) - [Customizing the IDE settings](/project/ide/customization/) - [Restarting your Box](/project/ide/boxes/restart-reset/) - [Creating multiple code editing panels in the IDE](/project/ide/panels/) ## Stack Specific Links - [PHP](http://php.net) - [Apache](http://httpd.apache.org) - [MySQL](http://dev.mysql.com) ## Updating Components If this Stack is not using any of the latest components, please email support@codio.com and we will update it. Visibility and Ownership \uf0c1 By default, Stacks are kept private to your account. They can be made public, at which point they will appear in All Stacks listings for all Codio Users. If you set the owner of the Stack to your Organization, they will appear in the My Stacks listing for members of your Organization shown as owned by the organization. If you are an owner in the Oranization, you can enable the ability for you to create public Stacks. See Public/Private Settings . If you want to keep your Stack private to your Organization, select the Private option and set the Owner option to your Organization. We would recommend this option especially if you may want to collaborate with other teachers in authoring/editing content. Owner \uf0c1 By default, you will be the owner of this Stack and only you can edit it and create new versions of the Stack. If you want to allow others to see and administer your Stack, you can assign it to another organization. Switching a project's stack \uf0c1 There are various reasons why you might want to switch your project's stack to a new one. Created new stack : this is the most important and common use case. If you have modified your stack and then created a new stack (or a new version) from it then it makes sense to point your project to it once it has been created. Mistake : you specified the wrong stack when you created the project. New stack version : a new version of a stack has been created and you want to point to the latest one. Important \uf0c1 You should remember that when you switch a stack, everything outside the workspace folder you see in the tree ( /home/codio/workspace ) will be replaced by the new stack. This is discussed at length in the What is a stack? section. From the projects listing \uf0c1 Select the gear icon for the project from the main projects listing. You will then be able to change the stack or the stack version. Updating a stack (version) \uf0c1 Having created a new stack, you may later want to update the Stack properties or take another stack snapshot from a Codio project. You can update your stack from the Stacks area of the Codio dashboard from the IDE Updating from the dashboard \uf0c1 To update the Stack, first select it from the stack list. You can then update the stack name or description fields by pressing the Edit button. To create a new version of a stack, press the New Version button. Then choose the project from which the stack should be generated from the Source field. Add a comment describing what has changed since the last version. At that point, a new version will be generated. This can take a few minutes. Updating from the IDE \uf0c1 It is often simpler to update a stack from within the IDE and the project that you are currently working on. After you have finished making changes to your box (installing new components etc.) you can create a new stack version from the Projects->Stack->Create New menu. You should now press the New Version button and enter some text to describe the stack changes since the last version. It will take a few minutes to build the new version. If your stack is pointing to the latest version then you need not do anything more. If it is pointing to a specific stack version, then you will need to change the stack to point to either the 'latest version' or to the version of the stack that was just built. You do this from the the Project->Stack->Settings menu item. Viewing version history \uf0c1 You can view the version history of a stack by from the Stacks area of the Codio dashbaord. Select the stack from the listing and then click on the Versions link at the top of the page. Using a stack \uf0c1 You can select a stack when a new project is created or by switching the stack if the project is already created or directly from the stacks listing, as explained below. To create a new project from the Stack listing, you should first locate your Stack. You can select from My Stacks, Certified or All. To search for a Stack, enter appropriate search text in the search field. This will typically be the name of the main Stack component(s) you are searching for. This will search the Stack name and description as well as any tags used. Having located a Stack, you can click on the item to get more detailed information. If you want to create a new Project immediately without seeing any further detailed information, click on the icon on the right hand side of the Stack item. If there are multiple versions of this Stack, it will use the latest. Once you select a Stack, you will be taken to the Create Project dialog and your chosen Stack will be pre-selected. The latest version of the stack will always be used. If you want to choose a specific version of the stack, then read the following section. Stack Versions \uf0c1 By default, Codio will use the latest version of the selected Stack. Codio Stacks also supports versioning. There are a number if ways to use a version but setting to Use the latest version is recommended. Click on the body of a Stack item, which takes you to the information screen for the selected stack. On the top right of the information panel, you can drop down the Use Stack button and select a Stack version. You can also select the Versions link above the main listing and see information about each version. If used in an assignment in a course, go to the Stack button when in Edit mode and you can set the version to use there. Stack listings \uf0c1 Codio Stacks lets you create and manage the combination of a Codio Box and installed system level components (languages, databases, web servers etc.) so that you can instantly create new Projects and Boxes from Stack libraries. Stacks are divided up into the following searchable areas within the Stacks listing My Stacks are Stacks that were created by you or set to be owned by the organisation. Certified are Stacks that are approved by Codio and cover a wide range of common stack configurations. All gives you a searchable repository of all Stacks, whether created by you, others as well as Codio Certified Stacks. If you cannot find a Stack that meets your needs, then you can configure your own Stack and add it to your Stack library as described here . Excluding files & folders \uf0c1 When you create a Stack, it will base the Stack on the contents of the /home/codio folder but omit your code workspace. If you want to exclude other files or folders then you should follow these steps Create a file ~/.codio/stack_exclusions in the Project you will be basing the Stack on. add the paths to any file or folder you wish to be excluded from the Stack add the full path to the file (when in the folder, run readlink -f <filename> to get the full path) currently, globbing and wildcards are not supported one path per line","title":"Stacks"},{"location":"project/stacks/#what-is-a-stack","text":"It is very important to understand how Stacks work in Codio, especially when working with courses. Incorrect usage can result in a project working when being edited but failing when run by students. A stack refers to the software configuration of a project server (Box). This incorporates everything on the server outside the code workspace ( /home/codio/workspace ) that you see in the IDE's file tree. You can snapshot a box's stack at any point and add it to the Stacks template library as we explain later.","title":"What is a stack?"},{"location":"project/stacks/#how-a-codio-project-works","text":"When you create a new Codio project, course assignment or book, you always specify a stack. The specified stack will contain the operating system (always) and other components such as languages, databases and tools.","title":"How a Codio project works."},{"location":"project/stacks/#stack-modifications","text":"You will often want to make changes to the software on your server. Any such changes you, or an application, makes outside the workspace folder represents a stack change. Whether such changes are made using sudo apt-get install , manually editing a config file, changes to a database due to application usage etc., these changes all represent stack modifications. Any modifications you make will work fine on the project you are working on as the owner, but as soon as run by students, the modifications will not be transferred. In order to address this, you need to ensure that any project with a modified stack first has a clean stack created that includes your modifications and that the project points to that clean stack. The process for creating a stack and switching the project to point to the new stack is straightforward.","title":"Stack modifications"},{"location":"project/stacks/#use-case","text":"Let\u2019s consider a MySQL database use case. If the database data location is in the usual place within the stack ( /var/lib/mysql/ ) then when the project is assigned to the course, each student gets their own database, independent of others students, as you would expect. However, if the stack is changed for any reason (you, as project owner, change the stack or stack version of stack for an already assigned assignment) then all database data would be reset to the state of the new stack as the database data folder is not a part of the workspace. If you want to keep the database independent of the stack, then you would need to locate the database file in the workspace folder itself (by editing /etc/mysql/mysql.conf.d/mysqld.cnf . This way, you could update the database software via a stack change but the database data remains intact when you switch stacks. In summary, you should remember the following \u2026 Assignment = Selected Stack + Stack Changes + Workspace Folder When run by students in the course then at the point of the assignment: Assignment = Selected Stack + Workspace (no stack modifications) Stack modifications in the source project or assignment are not transferred when launched by students Once the project or assignment is run by students, if they happen to make changes to their stacks, then each one is individually handled so there are no issues unless you or they select a new stack from Project->Stacks->Settings .","title":"Use Case"},{"location":"project/stacks/#stacks-and-stack-versions","text":"When you create a brand new stack or a new stack version, in both cases you are creating a new stack internally. The only difference between a stack and a stack version is that the stack versions are nicely organized under an already named stack. This makes them easy to find and prevents your stack list getting unnecessarily long. So, when referring to a stack in the documentation, we mean either a single stack or a stack version. Assigning a different stack version will also reset all project contents outside the workspace folder to those of the new stack version.","title":"Stacks and Stack Versions"},{"location":"project/stacks/#what-to-do-prior-to-assigning-to-a-course","text":"If you have modified the stack in any way, then there are a few use-cases that commonly occur when working with modified stacks prior to assigning to a course. Projects : generally speaking, if you have made any modifications then you should create a new stack and switch your project to the new stack once it is created. This ensures maximum efficiency and speed. If you have not yet created a new stack to incorporate the modifications then you can create a new one by going to Project->Stack->Create New before you publish the assignment. It is good practice to go to your project and set it to point to this stack as soon as possible. It is however, much better practice to update the stack before you publish the assignment in the course module. Course assignments : you should always first create a custom stack and then switch the assignment\u2019s stack , and any other assignments that use the same configuration, to the newly created stack. You can then assign a course module (which assigns all its assignments) to the course. Books : if you are working with a book then the Book points to a stack. If you make any modifications, you have to create a new stack version (or new stack if appropriate) and then switch your stack settings to point to the new stack version. Once this has been done, you should publish a new version of your book. The final step is to update the course to update all assignments that point to a book.","title":"What to do prior to assigning to a course"},{"location":"project/stacks/#switching-stacks","text":"Remember, when you switch a project\u2019s stack from Project->Stack->Settings , all stack modifications that you may have made relative to the original stack will be replaced by the new stack. Usually this is fine as you would have first created the new stack from the project before switching.","title":"Switching Stacks"},{"location":"project/stacks/#books","text":"Codio Books are somewhat different. There is an explanation above on handling stack modifications for Books. You can refer to the main Books section .","title":"Books"},{"location":"project/stacks/#modifying-a-stack","text":"A Codio project, course assignment or book always has a stack associated with it. When you create a new project you specify the stack. You can also switch a project's stack at any time. You can modify the stack at any time. You do not do this directly. Instead, you open up a project, course assignment or book and make the stack changes from the command line . The concepts behind this are explained in detail on the What is a stack? section. To modify a stack you should be aware of the following rules.","title":"Modifying a stack"},{"location":"project/stacks/#you-are-the-owner-or-have-write-access","text":"If you are the stack owner or have write access to the stack then you are able to create new versions of an existing stack. See visibility settings for information on ownership.","title":"You are the owner or have write access"},{"location":"project/stacks/#you-are-not-the-owner-and-do-not-have-write-access","text":"If you do not have write access to the stack, which is the case for the Codio certified stacks, then you will first need to create a new stack. After this you can create your own versions from that stack as you will be the owner. If the stack is Private and the owner is set to an organization of which you are a member, then you will have write access and will be able to create new versions of that stack. See visibility settings for information on ownership.","title":"You are not the owner and do not have write access"},{"location":"project/stacks/#creating-a-stack","text":"Please make sure you have read What is a stack? as this contains important concepts and information. This page explains how to create a new stack or a new stack version from a project or assignment in a course.","title":"Creating a stack"},{"location":"project/stacks/#create-new-stack-from-the-ide","text":"With the project open in the IDE, select the menu option Project->Stack->Create New . This will allow you to create a new stack or a new version of an existing stack you have the rights to update. By default it will be private to you. If you wish to make it available to others, please refer to the Visibility information below. We would recommend you set the owner to your organization.","title":"Create new stack from the IDE"},{"location":"project/stacks/#create-new-stack-from-the-dashboard","text":"From the dashboard, click on the Stacks item on the left hand side. On the stacks listing page, press the large blue New Stack button to create a new stack. You then point to your project. When you have completed the required fields and pressed the Create button, we will generate a Stack image for you. This can take a few minutes, depending on the size of the Stack image. You do not need to remain on this screen while the Stack is created, so feel free to continue to other parts of Codio. The source project will not be accessible until the stack has been created. Stack Blueprint : you should specify is the Codio project that you want to use for your Stack blueprint. Enter any part of your Project name and you will see them listed in a dropdown. Name and Description : next, add a short name for your Stack and a longer description. You can also add a more detailed overview of your Stack by selecting the \"add a long description\" link. You can write this long description in Markdown. Image : you can also add an image to make your Stack more instantly recognizable in the listing. This should be a square image, which will be reduced in size and will appear in a circle as shown below. Tags : you can also add tags to your Stack. The tags should be component names ideally. There is an autocomplete function that will help you to use already defined tags to avoid tag duplication and ensure maximum efficiency when searching.","title":"Create new stack from the dashboard"},{"location":"project/stacks/#stack-guidelines","text":"When creating a Stack, here are some ideas on strategy and how to make them as useful as possible.","title":"Stack Guidelines"},{"location":"project/stacks/#starting-stack","text":"When you create a Stack, you should first create a new Project from the closest Stack that meets your requirements. You can also use the Base Stack and then install your own components .","title":"Starting Stack"},{"location":"project/stacks/#long-description","text":"You should include a full description of your Stack that appears when someone clicks on it within the Stacks listing. This information will also be available to users in Projects by going to Project->Stack->Info in their Project, which should open automatically. Check out some of Codio Certified Pack long descriptions. Below is a template you could use. # Title Put the name of your Stack here. ## Using the Stack Describe how the user should get started. ## Starter Pack If there are related Starter Packs you have created from this Stack that include code files, detail them here. ## Components Installed It can be helpful to others or even to you later on to describe the installed Components and versions. ## Configuration Files Detail where any component configuration files can be found. As you install components from `Tools>Install Software` a log file of all this information will be opened. ## General Information Include any general information on the use and operation of any installed components. ## Codio Documentation We recommend you include useful links to the Codio Documentation. ##Stack Specific Links Provide useful links on the Stack components.","title":"Long Description"},{"location":"project/stacks/#example-from-codio-certified-lamp-stack","text":"# LAMP ## Using this Stack This Codio Stack gives you a complete **LAMP** stack ready to use and with all services up and running. ## Related Stacks & Starter Packs There are various other Stacks and Starter Packs that may be of interest. Please search the listing for - Stack : **LEMP** - Stack : **LAPP** - Stack : **LAMP** + Composer - Starter Pack : **Laravel** (LAMP + Composer + Laravel) ## Components Installed This Stack contains the following major component versions - **PHP** 5.5.9 - **Apache** 2.4.7 - **MySQL** 14.14 Distrib 5.5.46 ## Configuration Files You can find configuration files in the following locations - **PHP config file** : `/etc/php5/apache2/php.ini` - **Apache config** : `/etc/apache2/apache2.conf` - **MySQL default config file** : `/etc/mysql/my.cnf` ## General Information # Apache Server Apache should be started by default. You can manually start, stop and restart it using the following terminal commands: $ sudo service apache2 start $ sudo service apache2 stop $ sudo service apache2 restart # MySQL ## Start, Stop, Restart the MySQL server MySQL should be started by default. You can manually start, stop and restart the MySQL server using the following terminal commands: $ sudo service mysql start $ sudo service mysql stop $ sudo service mysql restart ## Connecting to the MySQL monitor Assuming the MySQL server is started, you can connect to it using `mysql` from the terminal. Exit using `ctrl+c`. ## Root Password If you want to set the root password, use the following command from the terminal mysqladmin -u root password NEWPASSWORD` ## Codio Documentation Please be aware of the following useful links - [How to Access your Box](/prpject/ide/boxes/) - [If your firewall only allows access to port 80](/project/ide/boxes/ext-access/) - [Creating Codio menu items to avoid repetitive terminal commands](/project/ide/boxes/runmenu/) - [Using Git in Codio](/project/ide/editing/git/) - [Customizing the IDE settings](/project/ide/customization/) - [Restarting your Box](/project/ide/boxes/restart-reset/) - [Creating multiple code editing panels in the IDE](/project/ide/panels/) ## Stack Specific Links - [PHP](http://php.net) - [Apache](http://httpd.apache.org) - [MySQL](http://dev.mysql.com) ## Updating Components If this Stack is not using any of the latest components, please email support@codio.com and we will update it.","title":"Example (from Codio Certified LAMP Stack)"},{"location":"project/stacks/#visibility-and-ownership","text":"By default, Stacks are kept private to your account. They can be made public, at which point they will appear in All Stacks listings for all Codio Users. If you set the owner of the Stack to your Organization, they will appear in the My Stacks listing for members of your Organization shown as owned by the organization. If you are an owner in the Oranization, you can enable the ability for you to create public Stacks. See Public/Private Settings . If you want to keep your Stack private to your Organization, select the Private option and set the Owner option to your Organization. We would recommend this option especially if you may want to collaborate with other teachers in authoring/editing content.","title":"Visibility and Ownership"},{"location":"project/stacks/#owner","text":"By default, you will be the owner of this Stack and only you can edit it and create new versions of the Stack. If you want to allow others to see and administer your Stack, you can assign it to another organization.","title":"Owner"},{"location":"project/stacks/#switching-a-projects-stack","text":"There are various reasons why you might want to switch your project's stack to a new one. Created new stack : this is the most important and common use case. If you have modified your stack and then created a new stack (or a new version) from it then it makes sense to point your project to it once it has been created. Mistake : you specified the wrong stack when you created the project. New stack version : a new version of a stack has been created and you want to point to the latest one.","title":"Switching a project's stack"},{"location":"project/stacks/#important","text":"You should remember that when you switch a stack, everything outside the workspace folder you see in the tree ( /home/codio/workspace ) will be replaced by the new stack. This is discussed at length in the What is a stack? section.","title":"Important"},{"location":"project/stacks/#from-the-projects-listing","text":"Select the gear icon for the project from the main projects listing. You will then be able to change the stack or the stack version.","title":"From the projects listing"},{"location":"project/stacks/#updating-a-stack-version","text":"Having created a new stack, you may later want to update the Stack properties or take another stack snapshot from a Codio project. You can update your stack from the Stacks area of the Codio dashboard from the IDE","title":"Updating a stack (version)"},{"location":"project/stacks/#updating-from-the-dashboard","text":"To update the Stack, first select it from the stack list. You can then update the stack name or description fields by pressing the Edit button. To create a new version of a stack, press the New Version button. Then choose the project from which the stack should be generated from the Source field. Add a comment describing what has changed since the last version. At that point, a new version will be generated. This can take a few minutes.","title":"Updating from the dashboard"},{"location":"project/stacks/#updating-from-the-ide","text":"It is often simpler to update a stack from within the IDE and the project that you are currently working on. After you have finished making changes to your box (installing new components etc.) you can create a new stack version from the Projects->Stack->Create New menu. You should now press the New Version button and enter some text to describe the stack changes since the last version. It will take a few minutes to build the new version. If your stack is pointing to the latest version then you need not do anything more. If it is pointing to a specific stack version, then you will need to change the stack to point to either the 'latest version' or to the version of the stack that was just built. You do this from the the Project->Stack->Settings menu item.","title":"Updating from the IDE"},{"location":"project/stacks/#viewing-version-history","text":"You can view the version history of a stack by from the Stacks area of the Codio dashbaord. Select the stack from the listing and then click on the Versions link at the top of the page.","title":"Viewing version history"},{"location":"project/stacks/#using-a-stack","text":"You can select a stack when a new project is created or by switching the stack if the project is already created or directly from the stacks listing, as explained below. To create a new project from the Stack listing, you should first locate your Stack. You can select from My Stacks, Certified or All. To search for a Stack, enter appropriate search text in the search field. This will typically be the name of the main Stack component(s) you are searching for. This will search the Stack name and description as well as any tags used. Having located a Stack, you can click on the item to get more detailed information. If you want to create a new Project immediately without seeing any further detailed information, click on the icon on the right hand side of the Stack item. If there are multiple versions of this Stack, it will use the latest. Once you select a Stack, you will be taken to the Create Project dialog and your chosen Stack will be pre-selected. The latest version of the stack will always be used. If you want to choose a specific version of the stack, then read the following section.","title":"Using a stack"},{"location":"project/stacks/#stack-versions","text":"By default, Codio will use the latest version of the selected Stack. Codio Stacks also supports versioning. There are a number if ways to use a version but setting to Use the latest version is recommended. Click on the body of a Stack item, which takes you to the information screen for the selected stack. On the top right of the information panel, you can drop down the Use Stack button and select a Stack version. You can also select the Versions link above the main listing and see information about each version. If used in an assignment in a course, go to the Stack button when in Edit mode and you can set the version to use there.","title":"Stack Versions"},{"location":"project/stacks/#stack-listings","text":"Codio Stacks lets you create and manage the combination of a Codio Box and installed system level components (languages, databases, web servers etc.) so that you can instantly create new Projects and Boxes from Stack libraries. Stacks are divided up into the following searchable areas within the Stacks listing My Stacks are Stacks that were created by you or set to be owned by the organisation. Certified are Stacks that are approved by Codio and cover a wide range of common stack configurations. All gives you a searchable repository of all Stacks, whether created by you, others as well as Codio Certified Stacks. If you cannot find a Stack that meets your needs, then you can configure your own Stack and add it to your Stack library as described here .","title":"Stack listings"},{"location":"project/stacks/#excluding-files-folders","text":"When you create a Stack, it will base the Stack on the contents of the /home/codio folder but omit your code workspace. If you want to exclude other files or folders then you should follow these steps Create a file ~/.codio/stack_exclusions in the Project you will be basing the Stack on. add the paths to any file or folder you wish to be excluded from the Stack add the full path to the file (when in the folder, run readlink -f <filename> to get the full path) currently, globbing and wildcards are not supported one path per line","title":"Excluding files &amp; folders"},{"location":"project/ide/boxes/","text":"Each Codio Project gets its own dedicated Ubuntu Server (Box). This chapter contains important information on accessing your box, how to administer it and how to install software dependencies. Details of your project Box can be found by opening the Project > Box Info menu item, where information of your project URL(s) can be viewed. Overview \uf0c1 Waking a Box \uf0c1 When you create a Codio Project, it is automatically assigned an Ubuntu server. You can think of this server as being asleep until you open up your Project in the IDE. As soon as the Project loads in the IDE, the Box is up and running. When is the Server put back to sleep? \uf0c1 Your server is put to sleep within a few minutes of you exiting your Project or after 60mins of inactivity. Can I have my Box 'Always on'? \uf0c1 Paid subscribers can use the Always On Boxes feature. This allows you to mark Projects that you don't want to be put to sleep when you exit your Project. Can I SSH into my Box? \uf0c1 Yes, see SSH into your box documentation. Can I reboot my Box? \uf0c1 Yes. Please refer to the Restart and Reset documentation. Can I let other people administer my Box? \uf0c1 Paid subscribers can use the Admin property of the Permissions feature to allow other Codio users to access their Project and have full access to your Codio Box as well as the code. Do I have sudo access? \uf0c1 Yes, our Boxes provide sudo access. How do I install software dependencies? \uf0c1 You have sudo access, so should use the full power of the apt package management system, and the packages it provides via the Ubuntu community. How do I access my Box from code? \uf0c1 We have full documentation on how to access your Box from code. Firewall issues \uf0c1 Codio Boxes do not run on port 80. Some companies block outbound access to ports other than port 80. Please read this section on how to work around this. Important 'localhost' configuration information \uf0c1 In many config files on your Box you would include a reference to 127.0.0.1 to access localhost. Please be sure to use 0.0.0.0 instead. Terminal window \uf0c1 You can access the Terminal window from the Tools->Terminal menu item or by pressing the terminal icon in the bar at the top of the file tree. This will open up a terminal window in a new IDE panel. You can have multiple terminals open simultaneously. Note that you can create tabs and panels anywhere you like using Codio's Panels and Tabs features. Terminal Settings \uf0c1 You can modify various Terminal settings from the Codio->Preferences menu. The available settings (and their defaults) are listed below. Preferences can be modified at the User level as described here . You can also force settings at the Project level but these will then override for all users looking at this project, so should be used sparingly. [terminal] ;Font size. ; Type: int font_size = 12 ;Terminal theme. ; Type: string theme = dark ;Number of lines available in the scroll history. ; Type: int scrollback = 3000 ;Quick Connect ; Type: hotkey show-connect-dialog = ;Connections Manager ; Type: hotkey show-connections-manager = ;Terminal. SSH connection to the box ; Type: hotkey backend-connection = Shift+Alt+T Accessing boxes and ports \uf0c1 When Codio creates a new project, it will generate a unique subdomain name word1-word2.codio.io where word1 and word2 are randomly generated words resulting in a unique domain name. It is strongly recommended that you reference a Codio box running on a specific port using word1-word2.codio.io If your PC is behind a firewall, access to external ports are often restricted. Using the recommended approach, the request will be made over port 80 and so will not be blocked by the firewall. This approach allows HTTPS access over the full range of ports, 1024 to 9999 . Standard port addressing \uf0c1 You can also reference a Codio box using word1-word2-<port>.codio.io although be aware that this approach is deprecated due to security reasons This approach currently work but be aware: Port ranges are between 1024 and 9999 If the PC you are working on is behind a firewall and it blocks access over non-standard ports, it will fail if it references a box using word1-word2-3000.codio.io You may waste your time and potentially your sysadmin's time trying to diagnose why your browser will not talk to the Codio box. Original Request Header \uf0c1 Should you need it, the X_FORWARDED_PROTO header contains original request schema. Preview Menu \uf0c1 Codio offers a fully customizable Preview menu so you can preview both static files (.html) and server side files (.php files, Ruby and Node apps etc.) with a single click. Preview documentation This feature lets you set up any number of 'aliases' both for static files and Box cli commands. Preinstalled software packages \uf0c1 When you create an empty Box, you get a standard Ubuntu installation. Currently, we also add the following software automatically Git If you want to have more software installed by default then you should use Stacks or select one of the standard stacks from the New Project screen. Please refer to the Installing software packages section below for details on how to install many other languages, database, web servers and other system components. File & software locations \uf0c1 All Codio code workspace and software dependency files are located in the /home/codio folder, also reachable as ~ . Everything below this level can be accessed and is effectively read-only. You should not change anything here as it will not persist. Software that you install from the command line or using Install Software will be installed in the usual location for an Ubuntu server. Code workspace files \uf0c1 The code workspace you see in the project file tree is located at /home/codio/workspace or ~/workspace . Installing software packages \uf0c1 The Tools->Install Software menu option gives you access to a dialog driven means of running scripts that can install, configure or reconfigure software components. This saves you the trouble of doing this manually from the command line. On this page, you can locate the software you want to install and then click the install icon to start the installation. Installing from the command line \uf0c1 Our boxes provide full sudo (root) access, so you can also use the Ubuntu apt package manager, which provides thousands of software packages that are maintained by the Ubuntu community. If you want to provide fully pre-configured boxes then you should use Stacks rather than the Install Software feature described on this page. Adding or requesting new packages \uf0c1 As of May 2016 the list of available packages is somewhat limited. However, we will be adding to these continuously and we also encourage you to request new ones. If you require a new script to be added to the Install Software list then you have two options. Visit the Issues page on our GitHub repository and create a new issue detailing your requirements. You can fork our GitHub repository , add the script yourself and then submit a pull request. Instructions on how to add your own package scripts can be found below. Autostarting \uf0c1 Services that require to be started will auto start on installation. You can manually start, stop and restart services using the following terminal commands or use a startup.sh bash script $ sudo service <package-name> start $ sudo service <package-name> stop $ sudo service <package-name> restart For the bash script to be included in the stack we'd recommend /home/codio/startup.sh , and installing Autostart Support from Tools->Install Software . If your project is using guides, you can use .guides/startup.sh or you can locate this file in the workspace although bear in mind that students may be able to access/edit files visible to them in the workspace. Coding installable packages \uf0c1 Overview \uf0c1 If you cannot find the software you want to install in the list then you can add your own package to the Install Software list by forking our GitHub repository, making the necessary modifications and finally submitting a pull request. The repository can be found at https://github.com/codio/install_software What is a script? \uf0c1 A script is typically, but not necessarily, a bash script that runs a series of commands as you would on the command line to install or configure software on your Codio box. However, it can be any executable code you choose. The scripts written by Codio typically use Ansible, a very friendly deployment management system that greatly reduces complexity. package_list.json \uf0c1 This is the manifest that lists the entire contents of the publicly available scripts. Each script has an entry in this file and you should add a new item. Here's a reminder of the MySQL entry. \"mysql\": { \"name\": \"MySQL\", \"description\": \"MySQL is an open-source relational database management system (RDBMS)\", \"script\": \"mysql/install.sh\", \"version\": \"5.5.49\", \"category\": \"data_stores\" } Whenever a user loads the Install Software dialog, this Install Software manifest is retrieved from our GitHub repo. script \uf0c1 The script is the path, relative to the root of the repo, where the installation script can be found. category \uf0c1 You can specify the category that the component belongs to by updating the category field. You can choose from one of the following. 'data_stores' 'deployment' 'development_tools' 'libraries' 'shells' 'programming_languages' 'utilities' 'web_development' Example : MySQL \uf0c1 The following example shows how to install MySQL from the Install Software menu in a few seconds. Try running the MySQL installation on a new box. The MySQL entry in the package_list.json file looks like this \"mysql\": { \"name\": \"MySQL\", \"description\": \"MySQL is an open-source relational database management system (RDBMS)\", \"script\": \"mysql/install.sh\", \"version\": \"5.5.49\", \"category\": \"data_stores\" } You can see the reference to the mysql/install.sh script. Bash script \uf0c1 This script calls our standard Ansible loader script, which in turn loads the relevant playbook. #!/bin/bash bash -c \"$(curl -fsSL https://raw.github.com/codio/install_software/master/tools/ansible.sh)\" mysql echo \"Mysql password root user password is 'codio'\" Ansible playbook script \uf0c1 As Ansible makes installations and configurations so easy, we use this to make our lives easier. We could have accomplished the same thing within the main bash script using standard Ubuntu commands but it would be less readable and harder to maintain than using Ansible. If you are interested in finding out more about Ansible playbooks, click here . --- - name: Install MySQL hosts: 127.0.0.1 sudo: True vars: MySQL_root_pass: codio tasks: - name: Set MySQL root password before installing debconf: name='mysql-server' question='mysql-server/root_password' value='{{MySQL_root_pass | quote}}' vtype='password' - name: Set MySQL root again password before installing debconf: name='mysql-server' question='mysql-server/root_password_again' value='{{MySQL_root_pass | quote}}' vtype='password' - name: Install MySQL apt: name={{ item }} state=present with_items: - mysql-server - mysql-client - python-mysqldb - copy: src=my.cnf dest=/home/codio/.my.cnf Language server protocol \uf0c1 The Language Server protocol is used to integrate features like auto complete, go to definition, find all references. Java, OCAML and Python are currently available. Python Example: Implementing LSP support \uf0c1 Enable LSP support in your User (or Project ) Preferences, entering [codio-lsp] enable_lsp_support = true If you are authoring content for use in a course/class, we recommend enabling as a project preference as these will be applied over any preferences users may set Installing language server protocols \uf0c1 To install language server protocols, go to the menu Tools->Install Software and locate the relevant component. Press the install button in the relevant row. The installation may take a few minutes and you should then restart your Box before proceeding. Autocomplete \uf0c1 Autocomplete is not automatically triggered as in HTML/CSS/JS files. To invoke autocomplete for language server protocol implemented files, use : Mac: Shift+Space Others: Ctrl+Space If you wish to change the default preference to something else you can. See User Preferences for more on this GUI based output \uf0c1 If you are writing or using programs that have a GUI based output then please read this section. Whether you are using UI libraries like tkinter, qt or simply ubuntu applications that have a non web based UI, this section explains how to setup a virtual desktop. Sample Project \uf0c1 If you created the account for your Codio Trial account then you will find Demo GUI Output in your My Projects list. You will find instructions in the README.md file when you open the project. If it is not there then click here to install it in your projects list . Press the Use Pack button to install. Uses and Limitations \uf0c1 X Server is a virtual desktop that is very effective for Codio's cloud based infrastructure. Any application that relies on a graphical user interface has its graphical output redirected to it and Codio's viewer is then able to display the virtual desktop in a browser. As you will see when trying out the sample applications in the demo project above, some of which have very complex UIs (notably SQLite and StartUML), you can get a very good experience indeed. The limitations start to be felt when using fast motion graphics where the virtual screen content is changing so fast that it cannot be rendered in real time over the internet. If you have better bandwidth you will experience better performance and vice-versa. Installing your own projects \uf0c1 Installing X Server \uf0c1 To install X Server, go to the menu Tools->Install Software and locate X Server. Press the install button in the X Server row. The installation may take a few minutes and you should then restart your Box before proceeding. Running your code \uf0c1 Before you can view any output, your program needs to run, so you should first start your code. When you start the viewer (see below), the UI output will be shown automatically. You also can start the viewer first but it will be empty until a program runs, whereupon it will refresh. The viewer \uf0c1 The viewer is a special window that appears either inside Codio or in a separate browser tab. To open it, you should add \"Viewer\": \"https://{{domain3000}}/\" to the .codio file. { // Configure your Run and Preview buttons here. // Run button configuration \"commands\": { \"Run Python (tkinter)\": \"python3 tkinterpy/demo.py\", \"Run Java (Lunar Phases)\": \"cd swing && java LunarPhases\", \"SQLite Browser App\": \"sqlitebrowser\", \"StarUML\": \"staruml\" }, // Preview button configuration \"preview\": { \"Viewer\": \"https://{{domain3000}}/\" } } You can also access the from any browser using https://pagoda-cigar-3000.codio.io/ where you replace pagoda-cigar with your boxes domain name, which you can find in the menu at Project->Box Info (scroll to the section Web: Static content ). Customization \uf0c1 You can customise the X Server installation by modifying the config files in the normal way using vim or nano. For example you can sudo vim /etc/init/openbox.conf opens the openbox desktop config so you could change the default virtual desktop size sudo vim /etc/init/novnc-3000.conf would enable you to modify the port that the viewer runs on in case it conflicts with other services you may have configured on the default port 3000 Always-on boxes \uf0c1 Always-On Boxes are available for all paid subscribers. You can enable Box(es) to be Always-On. This means that it will remain active whether you are in the IDE or even logged out. If your project is archived due to inactivity (usually 30 days since last opened), this process removes it from the active fileserver and will also mean that it can no longer be 'Always-On'. The number of Always-On Boxes you can have depends on the subscription plan Marking a Project as Always On \uf0c1 You can set a Box to Always-On from the Project->Settings menu if you're in the project. If you're in the Dashboard, select Projects to get the listing, then press the gear icon on the right side of the Project listing. You will be shown the settings screen where you can enable the Always On switch. Keeping terminal processes running \uf0c1 When you exit your project in the IDE and return to the Dashboard, any processes that were started within a terminal window will terminate. You can prevent this in one of two ways. The simple way \uf0c1 One simple way to avoid this issue is to append & to the terminal command that starts your process. You will see output as usual but may need to press the enter key to get a fresh command prompt. Then, you will need to enter the following command before you close the terminal window or exit your project and return to the dashboard. disown -a tmux \uf0c1 As an alternative, you can install tmux. SSH and code access - Codio box SSH keys \uf0c1 Codio generates a key-pair that can be used for services like Github, so you can upload your public key to those systems (read this section for details on how to upload Github and Bitbucket public keys with a single button press). You can find your Codio public key as described here . When you create a new Codio project, your user keys are automatically copied into your project and can be found in the ~/.ssh folder. You will need to open up a Terminal window to access this folder and the keys stored in the id_rsa file. SSH and code access -SSH into your box \uf0c1 Unless your project is utilising Always On Boxes you will need to open your Codio Project in order for the Box to be started and ready to receive incoming SSH connections. Generating Key Pairs \uf0c1 There are several sites that explain generating SSH keys. Windows: https://www.techrepublic.com/blog/10-things/how-to-generate-ssh-keys-in-openssh-for-windows-10/ . Mac : https://help.github.com/articles/generating-ssh-keys#platform-mac Linux: https://help.github.com/articles/generating-ssh-keys#platform-linux Find your local machine's SSH public Key \uf0c1 This is pretty easy to do. On a Mac or Linux box you can get your public key in one of two ways either copy your local machine's public key to the clipboard from your local machine's terminal using pbcopy < ~/.ssh/id_rsa.pub or on your local machine, open the file ~/.ssh/id_rsa.pub and copy it to the clipboard. Be careful with some editors that include control characters that you don't want to be copied across. On a Windows machine you'll probably be using putty, so grab your key from there. Uploading your Public Key to your Codio Box \uf0c1 You need to upload the public key you just found in the above steps. Once you have it copied to the clipboard, open a terminal tab in your Codio project and enter this key into the .ssh/authorized_keys file. The easiest way to do this is to enter nano .ssh/authorized_keys which will open this file in the nano editor and you can paste it in. You can view/check to see all/any Public key(s) you have uploaded into your project by opening the terminal and running cat ~/.ssh/authorized_keys . Enabling and Connecting to your Box from your local machine's Terminal \uf0c1 Go to Project>Settings and to the Forwarding Settings tab and click the 'Enable SSH Forwarding' button The connection string you need to use is shown there You will see connection details like this SSH Forwarding: ssh codio@forwarding.codio.com:29119 You can now connect to your Box from any Terminal window using (in the above example) ssh codio@forwarding.codio.com -p 29119 If you get a message Permission denied (publickey) then you have not uploaded your SSH Public Key correctly. You cannot connect to a Codio Box without using a Public Key. IDE access permissions \uf0c1 By default, other users with read and write permissions are not able to access your Box from the command line. You can grant access to other Codio users by assigning the Admin permission level. This feature requires a paid subscription. For full details, please refer to the Permissions section of the documentation. Auto starting services \uf0c1 Your Box will be put to sleep under the conditions explained here . When you open your project, the Box will start and services will start. Software installed using Tools->Install Software will be automatically configured to autostart. If you have need to autostart other services, you can do so within a startup.sh bash script located in your project, and also installing Autostart Support from Tools->Install Software . For the script to be included in the stack we'd recommend /home/codio/startup.sh . If your project is using guides, you can use .guides/startup.sh or you can locate this file in the workspace although bear in mind that students may be able to access/edit files visible to them in the workspace. Upstart/Systemd \uf0c1 Upstart can be used in Ubuntu 14.04 boxes. If you want to configure services to start when your box starts up, you should configure a .conf file. If you are not familiar with upstart, please Google it for configuration details. Systemd can be used in Ubuntu 18.04 boxes. If you want to configure services to start when your box starts up, you should configure a .service file and run sudo systemctl daemon-reload . If you are not familiar with systemd, please Google it for configuration details. Important - you need to specify the user account under which the service is run using setuid codio . Restart and reset \uf0c1 Codio offers the ability to restart and to reset your project's Box. You can find both options in the Project menu. Restart \uf0c1 This operation reboots the Box, which usually takes a few seconds. Reset \uf0c1 This operation is fairly destructive and should be used with caution. It resets the Box to its fresh state but leaves your code files untouched. any new folders or files that have been created will be deleted all parts of the Box outside of the ~/workspace folder will be reset all code files in the ~/workspace folder are untouched a Box restart After a Reset, you will need to reinstall components (npm modules, ruby gems etc.) and other modifications you may have made. Customizable run menu \uf0c1 A handy feature is the ability to add commonly used commands to the Codio IDE, akin to using the alias command from the command line. When the menu item is selected, a new terminal window will open to run the command in. You can also force the command to run in an existing terminal window as we illustrate below. .codio file \uf0c1 The configuration for the Run (and Preview ) button can be set by editing the .codio file in the root of your project. The following code below shows the .codio file configured to give this Run menu which is driven by the following .codio file { // Configure your Run and Preview buttons here. // Run button configuration \"commands\": { \"Install Learnyounode\" : \"npm install -g learnyounode\", \"Run Lesson\" : \"./ns-executes.sh run {{filename_no_ext}} {{path}}\", \"Verify Lesson\" : \"./ns-executes.sh verify {{filename_no_ext}} {{path}}\", \"Completed Lessons\" : \"learnyounode\", \"Run with Node\" : \"node {{filepath}} 3 4 5\" } } When you select a Run command, it will open a new console window where you will see the output. Pressing the Run button will execute the last selected command. Using the same terminal window \uf0c1 If you want to avoid new terminal windows appearing when you run the command, you can use an id field. { \"commands\": { \"Node version\": { \"id\": \"terminal_1\", \"cmd\": \"node --version\" }, \"ls\": { \"id\": \"terminal_1\", \"cmd\": \"ls\" } }, // Preview button configuration \"preview\": { \"Project Index (static)\": \"http://{{domain}}/{{index}}\", \"Current File (static)\": \"http://{{domain}}/{{filepath}}\", \"Box URL\": \"http://{{domain3000}}/\" } } Commands with the same \"id\" will share the same terminal window. The terminal id should be \"backend-guide\" to execute a command in the terminal window opened by guides. .codio Tokens \uf0c1 You can see from the above .codio sample that it is possible to insert tokens into the shell commands. The following tokens are currently available and operate in the main on the currently selected file tab in the IDE {{filepath}} inserts the path and full file name /path/to/file.ext {{path}} inserts only the path to the selected file /path/to/ {{filename}} inserts the filename with its extension file.ext {{filename_no_ext}} inserts the filename without the extension file {{domain3000}} inserts the public url to your box; word1-word2-3000.codio.io to access over port 80, which is useful if your corporate firewall blocks ports other than 80 and 443 {{domain}} inserts the alternate public url to your box; word1-word2.codio.io , be aware that you will usually need to specify a port to reach a service running on your Box. e.g. word1-word2-<port>.codio.io","title":"Accessing a Box"},{"location":"project/ide/boxes/#overview","text":"","title":"Overview"},{"location":"project/ide/boxes/#waking-a-box","text":"When you create a Codio Project, it is automatically assigned an Ubuntu server. You can think of this server as being asleep until you open up your Project in the IDE. As soon as the Project loads in the IDE, the Box is up and running.","title":"Waking a Box"},{"location":"project/ide/boxes/#when-is-the-server-put-back-to-sleep","text":"Your server is put to sleep within a few minutes of you exiting your Project or after 60mins of inactivity.","title":"When is the Server put back to sleep?"},{"location":"project/ide/boxes/#can-i-have-my-box-always-on","text":"Paid subscribers can use the Always On Boxes feature. This allows you to mark Projects that you don't want to be put to sleep when you exit your Project.","title":"Can I have my Box 'Always on'?"},{"location":"project/ide/boxes/#can-i-ssh-into-my-box","text":"Yes, see SSH into your box documentation.","title":"Can I SSH into my Box?"},{"location":"project/ide/boxes/#can-i-reboot-my-box","text":"Yes. Please refer to the Restart and Reset documentation.","title":"Can I reboot my Box?"},{"location":"project/ide/boxes/#can-i-let-other-people-administer-my-box","text":"Paid subscribers can use the Admin property of the Permissions feature to allow other Codio users to access their Project and have full access to your Codio Box as well as the code.","title":"Can I let other people administer my Box?"},{"location":"project/ide/boxes/#do-i-have-sudo-access","text":"Yes, our Boxes provide sudo access.","title":"Do I have sudo access?"},{"location":"project/ide/boxes/#how-do-i-install-software-dependencies","text":"You have sudo access, so should use the full power of the apt package management system, and the packages it provides via the Ubuntu community.","title":"How do I install software dependencies?"},{"location":"project/ide/boxes/#how-do-i-access-my-box-from-code","text":"We have full documentation on how to access your Box from code.","title":"How do I access my Box from code?"},{"location":"project/ide/boxes/#firewall-issues","text":"Codio Boxes do not run on port 80. Some companies block outbound access to ports other than port 80. Please read this section on how to work around this.","title":"Firewall issues"},{"location":"project/ide/boxes/#important-localhost-configuration-information","text":"In many config files on your Box you would include a reference to 127.0.0.1 to access localhost. Please be sure to use 0.0.0.0 instead.","title":"Important 'localhost' configuration information"},{"location":"project/ide/boxes/#terminal-window","text":"You can access the Terminal window from the Tools->Terminal menu item or by pressing the terminal icon in the bar at the top of the file tree. This will open up a terminal window in a new IDE panel. You can have multiple terminals open simultaneously. Note that you can create tabs and panels anywhere you like using Codio's Panels and Tabs features.","title":"Terminal window"},{"location":"project/ide/boxes/#terminal-settings","text":"You can modify various Terminal settings from the Codio->Preferences menu. The available settings (and their defaults) are listed below. Preferences can be modified at the User level as described here . You can also force settings at the Project level but these will then override for all users looking at this project, so should be used sparingly. [terminal] ;Font size. ; Type: int font_size = 12 ;Terminal theme. ; Type: string theme = dark ;Number of lines available in the scroll history. ; Type: int scrollback = 3000 ;Quick Connect ; Type: hotkey show-connect-dialog = ;Connections Manager ; Type: hotkey show-connections-manager = ;Terminal. SSH connection to the box ; Type: hotkey backend-connection = Shift+Alt+T","title":"Terminal Settings"},{"location":"project/ide/boxes/#accessing-boxes-and-ports","text":"When Codio creates a new project, it will generate a unique subdomain name word1-word2.codio.io where word1 and word2 are randomly generated words resulting in a unique domain name. It is strongly recommended that you reference a Codio box running on a specific port using word1-word2.codio.io If your PC is behind a firewall, access to external ports are often restricted. Using the recommended approach, the request will be made over port 80 and so will not be blocked by the firewall. This approach allows HTTPS access over the full range of ports, 1024 to 9999 .","title":"Accessing boxes and ports"},{"location":"project/ide/boxes/#standard-port-addressing","text":"You can also reference a Codio box using word1-word2-<port>.codio.io although be aware that this approach is deprecated due to security reasons This approach currently work but be aware: Port ranges are between 1024 and 9999 If the PC you are working on is behind a firewall and it blocks access over non-standard ports, it will fail if it references a box using word1-word2-3000.codio.io You may waste your time and potentially your sysadmin's time trying to diagnose why your browser will not talk to the Codio box.","title":"Standard port addressing"},{"location":"project/ide/boxes/#original-request-header","text":"Should you need it, the X_FORWARDED_PROTO header contains original request schema.","title":"Original Request Header"},{"location":"project/ide/boxes/#preview-menu","text":"Codio offers a fully customizable Preview menu so you can preview both static files (.html) and server side files (.php files, Ruby and Node apps etc.) with a single click. Preview documentation This feature lets you set up any number of 'aliases' both for static files and Box cli commands.","title":"Preview Menu"},{"location":"project/ide/boxes/#preinstalled-software-packages","text":"When you create an empty Box, you get a standard Ubuntu installation. Currently, we also add the following software automatically Git If you want to have more software installed by default then you should use Stacks or select one of the standard stacks from the New Project screen. Please refer to the Installing software packages section below for details on how to install many other languages, database, web servers and other system components.","title":"Preinstalled software packages"},{"location":"project/ide/boxes/#file-software-locations","text":"All Codio code workspace and software dependency files are located in the /home/codio folder, also reachable as ~ . Everything below this level can be accessed and is effectively read-only. You should not change anything here as it will not persist. Software that you install from the command line or using Install Software will be installed in the usual location for an Ubuntu server.","title":"File &amp; software locations"},{"location":"project/ide/boxes/#code-workspace-files","text":"The code workspace you see in the project file tree is located at /home/codio/workspace or ~/workspace .","title":"Code workspace files"},{"location":"project/ide/boxes/#installing-software-packages","text":"The Tools->Install Software menu option gives you access to a dialog driven means of running scripts that can install, configure or reconfigure software components. This saves you the trouble of doing this manually from the command line. On this page, you can locate the software you want to install and then click the install icon to start the installation.","title":"Installing software packages"},{"location":"project/ide/boxes/#installing-from-the-command-line","text":"Our boxes provide full sudo (root) access, so you can also use the Ubuntu apt package manager, which provides thousands of software packages that are maintained by the Ubuntu community. If you want to provide fully pre-configured boxes then you should use Stacks rather than the Install Software feature described on this page.","title":"Installing from the command line"},{"location":"project/ide/boxes/#adding-or-requesting-new-packages","text":"As of May 2016 the list of available packages is somewhat limited. However, we will be adding to these continuously and we also encourage you to request new ones. If you require a new script to be added to the Install Software list then you have two options. Visit the Issues page on our GitHub repository and create a new issue detailing your requirements. You can fork our GitHub repository , add the script yourself and then submit a pull request. Instructions on how to add your own package scripts can be found below.","title":"Adding or requesting new packages"},{"location":"project/ide/boxes/#autostarting","text":"Services that require to be started will auto start on installation. You can manually start, stop and restart services using the following terminal commands or use a startup.sh bash script $ sudo service <package-name> start $ sudo service <package-name> stop $ sudo service <package-name> restart For the bash script to be included in the stack we'd recommend /home/codio/startup.sh , and installing Autostart Support from Tools->Install Software . If your project is using guides, you can use .guides/startup.sh or you can locate this file in the workspace although bear in mind that students may be able to access/edit files visible to them in the workspace.","title":"Autostarting"},{"location":"project/ide/boxes/#coding-installable-packages","text":"","title":"Coding installable packages"},{"location":"project/ide/boxes/#overview_1","text":"If you cannot find the software you want to install in the list then you can add your own package to the Install Software list by forking our GitHub repository, making the necessary modifications and finally submitting a pull request. The repository can be found at https://github.com/codio/install_software","title":"Overview"},{"location":"project/ide/boxes/#what-is-a-script","text":"A script is typically, but not necessarily, a bash script that runs a series of commands as you would on the command line to install or configure software on your Codio box. However, it can be any executable code you choose. The scripts written by Codio typically use Ansible, a very friendly deployment management system that greatly reduces complexity.","title":"What is a script?"},{"location":"project/ide/boxes/#package_listjson","text":"This is the manifest that lists the entire contents of the publicly available scripts. Each script has an entry in this file and you should add a new item. Here's a reminder of the MySQL entry. \"mysql\": { \"name\": \"MySQL\", \"description\": \"MySQL is an open-source relational database management system (RDBMS)\", \"script\": \"mysql/install.sh\", \"version\": \"5.5.49\", \"category\": \"data_stores\" } Whenever a user loads the Install Software dialog, this Install Software manifest is retrieved from our GitHub repo.","title":"package_list.json"},{"location":"project/ide/boxes/#script","text":"The script is the path, relative to the root of the repo, where the installation script can be found.","title":"script"},{"location":"project/ide/boxes/#category","text":"You can specify the category that the component belongs to by updating the category field. You can choose from one of the following. 'data_stores' 'deployment' 'development_tools' 'libraries' 'shells' 'programming_languages' 'utilities' 'web_development'","title":"category"},{"location":"project/ide/boxes/#example-mysql","text":"The following example shows how to install MySQL from the Install Software menu in a few seconds. Try running the MySQL installation on a new box. The MySQL entry in the package_list.json file looks like this \"mysql\": { \"name\": \"MySQL\", \"description\": \"MySQL is an open-source relational database management system (RDBMS)\", \"script\": \"mysql/install.sh\", \"version\": \"5.5.49\", \"category\": \"data_stores\" } You can see the reference to the mysql/install.sh script.","title":"Example : MySQL"},{"location":"project/ide/boxes/#bash-script","text":"This script calls our standard Ansible loader script, which in turn loads the relevant playbook. #!/bin/bash bash -c \"$(curl -fsSL https://raw.github.com/codio/install_software/master/tools/ansible.sh)\" mysql echo \"Mysql password root user password is 'codio'\"","title":"Bash script"},{"location":"project/ide/boxes/#ansible-playbook-script","text":"As Ansible makes installations and configurations so easy, we use this to make our lives easier. We could have accomplished the same thing within the main bash script using standard Ubuntu commands but it would be less readable and harder to maintain than using Ansible. If you are interested in finding out more about Ansible playbooks, click here . --- - name: Install MySQL hosts: 127.0.0.1 sudo: True vars: MySQL_root_pass: codio tasks: - name: Set MySQL root password before installing debconf: name='mysql-server' question='mysql-server/root_password' value='{{MySQL_root_pass | quote}}' vtype='password' - name: Set MySQL root again password before installing debconf: name='mysql-server' question='mysql-server/root_password_again' value='{{MySQL_root_pass | quote}}' vtype='password' - name: Install MySQL apt: name={{ item }} state=present with_items: - mysql-server - mysql-client - python-mysqldb - copy: src=my.cnf dest=/home/codio/.my.cnf","title":"Ansible playbook script"},{"location":"project/ide/boxes/#language-server-protocol","text":"The Language Server protocol is used to integrate features like auto complete, go to definition, find all references. Java, OCAML and Python are currently available. Python Example:","title":"Language server protocol"},{"location":"project/ide/boxes/#implementing-lsp-support","text":"Enable LSP support in your User (or Project ) Preferences, entering [codio-lsp] enable_lsp_support = true If you are authoring content for use in a course/class, we recommend enabling as a project preference as these will be applied over any preferences users may set","title":"Implementing LSP support"},{"location":"project/ide/boxes/#installing-language-server-protocols","text":"To install language server protocols, go to the menu Tools->Install Software and locate the relevant component. Press the install button in the relevant row. The installation may take a few minutes and you should then restart your Box before proceeding.","title":"Installing language server protocols"},{"location":"project/ide/boxes/#autocomplete","text":"Autocomplete is not automatically triggered as in HTML/CSS/JS files. To invoke autocomplete for language server protocol implemented files, use : Mac: Shift+Space Others: Ctrl+Space If you wish to change the default preference to something else you can. See User Preferences for more on this","title":"Autocomplete"},{"location":"project/ide/boxes/#gui-based-output","text":"If you are writing or using programs that have a GUI based output then please read this section. Whether you are using UI libraries like tkinter, qt or simply ubuntu applications that have a non web based UI, this section explains how to setup a virtual desktop.","title":"GUI based output"},{"location":"project/ide/boxes/#sample-project","text":"If you created the account for your Codio Trial account then you will find Demo GUI Output in your My Projects list. You will find instructions in the README.md file when you open the project. If it is not there then click here to install it in your projects list . Press the Use Pack button to install.","title":"Sample Project"},{"location":"project/ide/boxes/#uses-and-limitations","text":"X Server is a virtual desktop that is very effective for Codio's cloud based infrastructure. Any application that relies on a graphical user interface has its graphical output redirected to it and Codio's viewer is then able to display the virtual desktop in a browser. As you will see when trying out the sample applications in the demo project above, some of which have very complex UIs (notably SQLite and StartUML), you can get a very good experience indeed. The limitations start to be felt when using fast motion graphics where the virtual screen content is changing so fast that it cannot be rendered in real time over the internet. If you have better bandwidth you will experience better performance and vice-versa.","title":"Uses and Limitations"},{"location":"project/ide/boxes/#installing-your-own-projects","text":"","title":"Installing your own projects"},{"location":"project/ide/boxes/#installing-x-server","text":"To install X Server, go to the menu Tools->Install Software and locate X Server. Press the install button in the X Server row. The installation may take a few minutes and you should then restart your Box before proceeding.","title":"Installing X Server"},{"location":"project/ide/boxes/#running-your-code","text":"Before you can view any output, your program needs to run, so you should first start your code. When you start the viewer (see below), the UI output will be shown automatically. You also can start the viewer first but it will be empty until a program runs, whereupon it will refresh.","title":"Running your code"},{"location":"project/ide/boxes/#the-viewer","text":"The viewer is a special window that appears either inside Codio or in a separate browser tab. To open it, you should add \"Viewer\": \"https://{{domain3000}}/\" to the .codio file. { // Configure your Run and Preview buttons here. // Run button configuration \"commands\": { \"Run Python (tkinter)\": \"python3 tkinterpy/demo.py\", \"Run Java (Lunar Phases)\": \"cd swing && java LunarPhases\", \"SQLite Browser App\": \"sqlitebrowser\", \"StarUML\": \"staruml\" }, // Preview button configuration \"preview\": { \"Viewer\": \"https://{{domain3000}}/\" } } You can also access the from any browser using https://pagoda-cigar-3000.codio.io/ where you replace pagoda-cigar with your boxes domain name, which you can find in the menu at Project->Box Info (scroll to the section Web: Static content ).","title":"The viewer"},{"location":"project/ide/boxes/#customization","text":"You can customise the X Server installation by modifying the config files in the normal way using vim or nano. For example you can sudo vim /etc/init/openbox.conf opens the openbox desktop config so you could change the default virtual desktop size sudo vim /etc/init/novnc-3000.conf would enable you to modify the port that the viewer runs on in case it conflicts with other services you may have configured on the default port 3000","title":"Customization"},{"location":"project/ide/boxes/#always-on-boxes","text":"Always-On Boxes are available for all paid subscribers. You can enable Box(es) to be Always-On. This means that it will remain active whether you are in the IDE or even logged out. If your project is archived due to inactivity (usually 30 days since last opened), this process removes it from the active fileserver and will also mean that it can no longer be 'Always-On'. The number of Always-On Boxes you can have depends on the subscription plan","title":"Always-on boxes"},{"location":"project/ide/boxes/#marking-a-project-as-always-on","text":"You can set a Box to Always-On from the Project->Settings menu if you're in the project. If you're in the Dashboard, select Projects to get the listing, then press the gear icon on the right side of the Project listing. You will be shown the settings screen where you can enable the Always On switch.","title":"Marking a Project as Always On"},{"location":"project/ide/boxes/#keeping-terminal-processes-running","text":"When you exit your project in the IDE and return to the Dashboard, any processes that were started within a terminal window will terminate. You can prevent this in one of two ways.","title":"Keeping terminal processes running"},{"location":"project/ide/boxes/#the-simple-way","text":"One simple way to avoid this issue is to append & to the terminal command that starts your process. You will see output as usual but may need to press the enter key to get a fresh command prompt. Then, you will need to enter the following command before you close the terminal window or exit your project and return to the dashboard. disown -a","title":"The simple way"},{"location":"project/ide/boxes/#tmux","text":"As an alternative, you can install tmux.","title":"tmux"},{"location":"project/ide/boxes/#ssh-and-code-access-codio-box-ssh-keys","text":"Codio generates a key-pair that can be used for services like Github, so you can upload your public key to those systems (read this section for details on how to upload Github and Bitbucket public keys with a single button press). You can find your Codio public key as described here . When you create a new Codio project, your user keys are automatically copied into your project and can be found in the ~/.ssh folder. You will need to open up a Terminal window to access this folder and the keys stored in the id_rsa file.","title":"SSH and code access - Codio box SSH keys"},{"location":"project/ide/boxes/#ssh-and-code-access-ssh-into-your-box","text":"Unless your project is utilising Always On Boxes you will need to open your Codio Project in order for the Box to be started and ready to receive incoming SSH connections.","title":"SSH and code access -SSH into your box"},{"location":"project/ide/boxes/#generating-key-pairs","text":"There are several sites that explain generating SSH keys. Windows: https://www.techrepublic.com/blog/10-things/how-to-generate-ssh-keys-in-openssh-for-windows-10/ . Mac : https://help.github.com/articles/generating-ssh-keys#platform-mac Linux: https://help.github.com/articles/generating-ssh-keys#platform-linux","title":"Generating Key Pairs"},{"location":"project/ide/boxes/#find-your-local-machines-ssh-public-key","text":"This is pretty easy to do. On a Mac or Linux box you can get your public key in one of two ways either copy your local machine's public key to the clipboard from your local machine's terminal using pbcopy < ~/.ssh/id_rsa.pub or on your local machine, open the file ~/.ssh/id_rsa.pub and copy it to the clipboard. Be careful with some editors that include control characters that you don't want to be copied across. On a Windows machine you'll probably be using putty, so grab your key from there.","title":"Find your local machine's SSH public Key"},{"location":"project/ide/boxes/#uploading-your-public-key-to-your-codio-box","text":"You need to upload the public key you just found in the above steps. Once you have it copied to the clipboard, open a terminal tab in your Codio project and enter this key into the .ssh/authorized_keys file. The easiest way to do this is to enter nano .ssh/authorized_keys which will open this file in the nano editor and you can paste it in. You can view/check to see all/any Public key(s) you have uploaded into your project by opening the terminal and running cat ~/.ssh/authorized_keys .","title":"Uploading your Public Key to your Codio Box"},{"location":"project/ide/boxes/#enabling-and-connecting-to-your-box-from-your-local-machines-terminal","text":"Go to Project>Settings and to the Forwarding Settings tab and click the 'Enable SSH Forwarding' button The connection string you need to use is shown there You will see connection details like this SSH Forwarding: ssh codio@forwarding.codio.com:29119 You can now connect to your Box from any Terminal window using (in the above example) ssh codio@forwarding.codio.com -p 29119 If you get a message Permission denied (publickey) then you have not uploaded your SSH Public Key correctly. You cannot connect to a Codio Box without using a Public Key.","title":"Enabling and Connecting to your Box from your local machine's Terminal"},{"location":"project/ide/boxes/#ide-access-permissions","text":"By default, other users with read and write permissions are not able to access your Box from the command line. You can grant access to other Codio users by assigning the Admin permission level. This feature requires a paid subscription. For full details, please refer to the Permissions section of the documentation.","title":"IDE access permissions"},{"location":"project/ide/boxes/#auto-starting-services","text":"Your Box will be put to sleep under the conditions explained here . When you open your project, the Box will start and services will start. Software installed using Tools->Install Software will be automatically configured to autostart. If you have need to autostart other services, you can do so within a startup.sh bash script located in your project, and also installing Autostart Support from Tools->Install Software . For the script to be included in the stack we'd recommend /home/codio/startup.sh . If your project is using guides, you can use .guides/startup.sh or you can locate this file in the workspace although bear in mind that students may be able to access/edit files visible to them in the workspace.","title":"Auto starting services"},{"location":"project/ide/boxes/#upstartsystemd","text":"Upstart can be used in Ubuntu 14.04 boxes. If you want to configure services to start when your box starts up, you should configure a .conf file. If you are not familiar with upstart, please Google it for configuration details. Systemd can be used in Ubuntu 18.04 boxes. If you want to configure services to start when your box starts up, you should configure a .service file and run sudo systemctl daemon-reload . If you are not familiar with systemd, please Google it for configuration details. Important - you need to specify the user account under which the service is run using setuid codio .","title":"Upstart/Systemd"},{"location":"project/ide/boxes/#restart-and-reset","text":"Codio offers the ability to restart and to reset your project's Box. You can find both options in the Project menu.","title":"Restart and reset"},{"location":"project/ide/boxes/#restart","text":"This operation reboots the Box, which usually takes a few seconds.","title":"Restart"},{"location":"project/ide/boxes/#reset","text":"This operation is fairly destructive and should be used with caution. It resets the Box to its fresh state but leaves your code files untouched. any new folders or files that have been created will be deleted all parts of the Box outside of the ~/workspace folder will be reset all code files in the ~/workspace folder are untouched a Box restart After a Reset, you will need to reinstall components (npm modules, ruby gems etc.) and other modifications you may have made.","title":"Reset"},{"location":"project/ide/boxes/#customizable-run-menu","text":"A handy feature is the ability to add commonly used commands to the Codio IDE, akin to using the alias command from the command line. When the menu item is selected, a new terminal window will open to run the command in. You can also force the command to run in an existing terminal window as we illustrate below.","title":"Customizable run menu"},{"location":"project/ide/boxes/#codio-file","text":"The configuration for the Run (and Preview ) button can be set by editing the .codio file in the root of your project. The following code below shows the .codio file configured to give this Run menu which is driven by the following .codio file { // Configure your Run and Preview buttons here. // Run button configuration \"commands\": { \"Install Learnyounode\" : \"npm install -g learnyounode\", \"Run Lesson\" : \"./ns-executes.sh run {{filename_no_ext}} {{path}}\", \"Verify Lesson\" : \"./ns-executes.sh verify {{filename_no_ext}} {{path}}\", \"Completed Lessons\" : \"learnyounode\", \"Run with Node\" : \"node {{filepath}} 3 4 5\" } } When you select a Run command, it will open a new console window where you will see the output. Pressing the Run button will execute the last selected command.","title":".codio file"},{"location":"project/ide/boxes/#using-the-same-terminal-window","text":"If you want to avoid new terminal windows appearing when you run the command, you can use an id field. { \"commands\": { \"Node version\": { \"id\": \"terminal_1\", \"cmd\": \"node --version\" }, \"ls\": { \"id\": \"terminal_1\", \"cmd\": \"ls\" } }, // Preview button configuration \"preview\": { \"Project Index (static)\": \"http://{{domain}}/{{index}}\", \"Current File (static)\": \"http://{{domain}}/{{filepath}}\", \"Box URL\": \"http://{{domain3000}}/\" } } Commands with the same \"id\" will share the same terminal window. The terminal id should be \"backend-guide\" to execute a command in the terminal window opened by guides.","title":"Using the same terminal window"},{"location":"project/ide/boxes/#codio-tokens","text":"You can see from the above .codio sample that it is possible to insert tokens into the shell commands. The following tokens are currently available and operate in the main on the currently selected file tab in the IDE {{filepath}} inserts the path and full file name /path/to/file.ext {{path}} inserts only the path to the selected file /path/to/ {{filename}} inserts the filename with its extension file.ext {{filename_no_ext}} inserts the filename without the extension file {{domain3000}} inserts the public url to your box; word1-word2-3000.codio.io to access over port 80, which is useful if your corporate firewall blocks ports other than 80 and 443 {{domain}} inserts the alternate public url to your box; word1-word2.codio.io , be aware that you will usually need to specify a port to reach a service running on your Box. e.g. word1-word2-<port>.codio.io","title":".codio Tokens"},{"location":"project/ide/editing/","text":"Productivity, Emmet, Zen Coding \uf0c1 We have implemented lots of productivity features into the Codio IDE thanks to Emmet , formerly Zen Coding. These features let you saves considerable time when working with HTML, CSS and Javascript files. Standard Code Editor Keyboard Shortcuts \uf0c1 General keyboard shortcuts can be found in this section . All other productivity shortcuts are found here in this chapter. Emmet Keyboard Shortcuts \uf0c1 A set of powerful productivity shortcuts for HTML5, CSS and Javascript. Abbreviations \uf0c1 Thanks to our Emmet support, you get a large number of HTML and CSS abbreviations that expand to code, a bit like this div>ul>li*3 which expands to <div> <ul> <li></li> <li></li> <li></li> </ul> </div> Be sure to check out the complete reference as there are an awful lot of abbreviations for you to take advantage of. Emmet docs \uf0c1 We would strongly recommend having a good dig around the Emmet documentation for a detailed introduction into the general Emmet syntax. Abbreviations \uf0c1 This is a way of generating HTML using a CSS selector inspired approach. Take a look at the following examples. You simply enter the abbreviation in the Code Editor and then press the Tab key to expand the abbreviation. Basic HTML Example \uf0c1 div>ul>li*3 results in <div> <ul> <li></li> <li></li> <li></li> </ul> </div> Juicier HTML Example \uf0c1 #page>div.logo+ul#navigation>li*5>a{Item $} results in <div id=\"page\"> <div class=\"logo\"></div> <ul id=\"navigation\"> <li><a href=\"\">Item 1</a></li> <li><a href=\"\">Item 2</a></li> <li><a href=\"\">Item 3</a></li> <li><a href=\"\">Item 4</a></li> <li><a href=\"\">Item 5</a></li> </ul> </div> Insertion Stops / Edit Points \uf0c1 Emmet offers some abbreviations that have insertion points. For example, a:link will insert <a href=\"http://|\"></a> Where the | character represents the cursor after insertion. After you have entered the href url you should press ctrl+alt+right arrow (not the Tab key) to jump to the next edit point. More HTML Examples \uf0c1 Be sure to check out HTML Abbreviations . And also take a look at the cheat sheet as there are an awful lot of abbreviations for you to take advantage of. CSS Examples \uf0c1 w100p results in width: 100% m10p30e5x results in margin: 10% 30em 5ex and p100+m10e results in padding: 100px; margin: 10em; and how about this for gradients lg(left, #fc0, 30%, red) results in background-image: -webkit-gradient(linear, 0 0, 100% 0, from(#fc0), color-stop(0.5, 30%), to(red)); background-image: -webkit-linear-gradient(left, #fc0, 30%, red); background-image: -moz-linear-gradient(left, #fc0, 30%, red); background-image: -o-linear-gradient(left, #fc0, 30%, red); background-image: linear-gradient(left, #fc0, 30%, red); Fuzzy Search \uf0c1 If you take a look at cheat sheet , you\u2019ll find that there are too many CSS snippets to remember. Also, some of them might be a bit lengthy for sake of logical separation. To make CSS writing a bit easier, Emmet implements fuzzy search logic for CSS snippets: every time you enter an unknown abbreviation, Emmet will try to find the closest snippet definition. For example, instead of writing ov:h (overflow: hidden;) abbreviation, you can write ov-h , ovh or even oh . You can play around with the fuzzy search in text editor below. Try to find as many variations as possible (use Tab key to expand abbreviations) for bxz:cb , ovx:h and pos:a snippets. More CSS Examples \uf0c1 For more details on CSS abbreviations, please go to the Emmet documentation and be sure to look at the sub-chapters. But also be sure to check out the cheat sheet . Special keyboard actions \uf0c1 Emmet also offers a very nice range of keyboard shortcuts to speed productivity even further. Keyboard actions can be modified in Preferences Match Tag Pair \uf0c1 Mac:Cmd+D (inward) and Shift+Cmd+D (outward) WinLin:Ctrl+D (inward) and Shift+Ctrl+D (outward) A well-known tag balancing: searches for tag or tag's content bounds from current cursor position and selects it. It will expand (outward balancing) or shrink (inward balancing) selection when called multiple times. Not every editor supports both inward and outward balancing due of some implementation issues, most editors have outward balancing only. Click here to see it in the Emmet site. Go To Matching Pair \uf0c1 Mac: Shift+Cmd+T Win: Shift+Ctrl+T In HTML, allows you to quickly traverse between opening and closing tag. Click here to see it in the Emmet site. Wrap with Abbreviation \uf0c1 Mac/Win: Shift+Cmd+A A very powerful feature, it takes an abbreviation, expands it and places currently selected content in the last element of generated snippet. If there\u2019s no selection, action will silently call \u201cMatch Tag Pair\u201d to wrap context element. Click here to see it in the Emmet site. Go to Edit Point \uf0c1 Win: Ctrl+Alt+Right Arrow or Left Arrow This action works for HTML code blocks and allows you to quickly traverse between important code points: between tags empty attributes newlines with indentation Click here to see it in the Emmet site. Select Item \uf0c1 Mac/Win: Shift+Cmd+ Action is similar to \u201cGo to Edit Point\u201d, but selects important code parts. In HTML, these are tag name, full attribute and attribute value. For class attribute it also selects distinct classes. In CSS, it matches selector, full property and property value. For complex values and functions like 1px solid red or url(image.jpg) also selects part of it. Click here to see it in the Emmet site. Toggle Comment \uf0c1 Mac: Cmd+/ Win: Ctrl+/ This action, as name says, toggles comments on and off for the selected line. Works nicely in CSS and HTML files. Click here to see it in the Emmet site. Remove Tag \uf0c1 Mac: Cmd+K Win: Ctrl+K Quickly removes tag, found by \u201cMatch Tag Pair\u201d from current cursor position, and adjusts indentation. Click here to see it in the Emmet site. Merge Lines \uf0c1 Mac: Shift+Cmd+M Win: Shift+Ctrl+M Merges selected lines into a single line. But when there\u2019s no selection, will match context HTML tag. Click here to see it in the Emmet site. Inline Calculator \uf0c1 Mac: Shift+Cmd+Y Win: Shift+Ctrl+Y Evaluates simple math expressions like 2*4 or 10/2 and outputs its result. You can use \\ operator which is equivalent to round(a/b). Very useful in CSS where numeric values should be modified frequently. Click here to see it in the Emmet site. Increment/Decrement Number \uf0c1 Mac/Win : Alt+Up/Down (inc/dec by 0.1) Mac/Win : Ctrl+Up/Down (inc/dec by 1) Mac/Win : Ctrl+Alt+Up/Down (inc/dec by 10) This action, as name says, increments or decrements the number under the cursor with different steps: 0.1, 1 or 10. Click here to see it in the Emmet site. Complete reference \uf0c1 Emmet has a huge number of shortcuts available. Check out the Emmet Cheat Sheet Git, Mercurial & SVN \uf0c1 Git, Mercurial and SVN are all preinstalled, so you can open up a Terminal window to access them from the command line. You can also configure your .codio file so common commands are accessible from the Run menu in the Codio IDE. Refer to the Boxes documentation on how to do this. A few Git helpers \uf0c1 We have added a few Git helpers to the Tools->Git menu. Using Git without remote repos \uf0c1 You can use Git commands within your Codio project without needing to ever set up a remote repo. This gives you not only collaborative capabilities, but also comprehensive version control. However, one of the benefits of a distributed Source Control Management system is that having your code in more than one place means that there is no single point of failure. For this reason, we recommend that you use a third party provider such as GitHub as an external location to back up your data. Viewing GitHub repos \uf0c1 GitHub let's you browse around a repo but it's not the same as using an IDE. Codio gives you a great way of viewing any GitHub (or Git) repo. For web apps, you can even run and preview within Codio. Offering link/button in the repo readme.md file \uf0c1 This is great for anyone wanting to offer a link into a GitHub README page and then, when clicked, it initiates the creation of a project, importing in from the repo for the user in their Codio account. The advantage of this approach is that changes you make to your repo will be automatically shown in Codio as it creates a brand new Codio project whenever clicked on. If a project of that name already exists, users can change the name on the project creation page. You just use the following link format in your GitHub README file (or anywhere else for that matter). https://codio.com/home/projects/new?importType=git&activeTab=3&name=your_codio_project_name&importGitUrl=git@github.com:your_github_name/your_repo_name&stackVersion=stack_version_id In some cases, you may want to specify a specific branch. The common usage for this is if you have a demo or GitHub Pages site that you want to load into Codio. In this case you do the following https://codio.com/home/projects/new?importType=git&activeTab=3&name=your_codio_project_name&importGitUrl=git@github.com:your_github_name/your_repo_name&branch=other_branch&stackVersion=stack_version_id Finding the stack version ID \uf0c1 Go to the Stacks area and find the appropriate stack you wish to be used with your repo. Select Use Stack and from the address bar you will see the stack version ID to add to your link Example showing the Empty Stack stack version ID You are free to use any way of linking to Codio but we would recommend using the following images How to manually import a Git repo into Codio \uf0c1 If you are on the GitHub site and looking at a repo, you will see the Clone URL link (circled above). Click to copy the link to the clipboard; if you clone using SSH, you must have added the Codio SSH public key first as described here Login to Codio Click on New Project and then the Click here for more options Select Import and then from the Source drop-down, select Git Paste in the Git URL (see below) and add any additional details you require Press Create and Codio will load the repo and then display it Resources \uf0c1 If you are new to Git, then here are some resources to get you started. Git is simpler than you think (this is worth reading as it explains HOW Git works rather than teaching you usage) Git reference Introduction to Git by Scott Chacon Here is a list of more Git Tutorials in case you want some choice 10 Git Tutorials for beginners SSH keys \uf0c1 To transfer your public key to Github or other remotes, please refer to this section . There is a section on this page that describes setting up keys with Github. You may also want to refer to SSH Keys in the Boxes section . Very basic Git tutorial \uf0c1 This is not supposed to be a proper Git tutorial in any sense. Its purpose is to show anyone who is new to Git or Codio how to use it to get all the basic things done. For a proper, in-depth overview of Git, refer to the resources page. Please make sure you read this excellent overview if you are new to Git : http://git-scm.com/book/en/Getting-Started-Git-Basics GitHub Keys \uf0c1 If you're using GitHub, it is recommended that you use the SSH remote url rather than HTTPS. In order to do this, however, you should first make sure that your Codio public key is loaded into your GitHub account or repo settings. This whole process is described here . Experimentation \uf0c1 The best way to learn Git is to create a really simple project with a few text files in it and then experiment like crazy. You can play around with all the Git commands and sync with GitHub repos to your heart's content without worrying about doing any coding. Once you have done this for a while, you will feel a lot more comfortable about using Git for your precious code. Your project's starting point \uf0c1 You created a project by importing from a Git repo \uf0c1 If you have code that already exists in a remote repo, say GitHub, then you should create a new project by importing from that repo. That will automatically load the project and set up the correct association with the remote Git repo. Creating a project is fully described here . I do not yet have a remote repo \uf0c1 If you have code within Codio and you want to create a brand new GitHub (or other remote) repo, then follow these steps. Create a new project in Codio or open up an existing one. Open the terminal (Tools > Terminal) and initialize git by typing \"git init\" and pressing enter Create a new, empty repo on GitHub or other provider. Copy the repo url to the clipboard. If you're using GitHub, use the SSH url rather than https and you should make sure that your Codio public key is loaded into your GitHub account or repo settings as described here Within the IDE, go to Tools > Git > Remotes It is recommended you use origin as the name to confirm the normal standards. You do not need to specify a username or password if you are using SSH. Paste the remote url into the URL field. Check the status with 'git status' \uf0c1 Whenever you want to see what the Git status of your project is enter git status . Initially, you will see that there is nothing to report $ git status # On branch master nothing to commit, working directory clean Tracking files \uf0c1 Codio uses Git by default and if you import a project from a Git repo, all the existing files will already be 'tracked' (explained in the next section). Any new files you add will need to be tracked using a Git command. Tracking means that Git knows about them. If you add a new file, Git will not know about it and needs to be explicitly told. Add a new file ( test.txt ) and add a few random characters to it. Open any other existing file (I chose humans.txt) and make a small, harmless change to it. Run git status again and you should see # On branch master ` # Changes not staged for commit:` # (use \"git add ...\" to update what will be committed) # (use \"git checkout -- ...\" to discard changes in working directory) # # modified: humans.txt # # Untracked files: # (use \"git add ...\" to include in what will be committed) # # test.txt no changes added to commit (use \"git add\" and/or \"git commit -a\") This shows you the modified and the new (untracked) files. To tell GitHub to track the file, you can do one of the following git add . which tells Git to track all files in the project that are not yet tracked. This is the quickest and simplest way to track any new files. git add FILENAME explicitly tracks a single file Staged Files \uf0c1 A staged file is one that is tracked and is ready to commit into the repository. Once you run git add you are tracking and staging that file. But if you modify a tracked file, the modifications are not staged. To correctly stage them, you need to rerun git add . Committing your changes \uf0c1 Committing means that you want to add your staged, files into the repository. There are two ways to do this... git commit -m 'commit message' will take all staged files and commit them to the repo. git commit -a -m 'commit message' will do the same but the -a switch tells Git to automatically stage any tracked files before committing them. This means that you don't have to use git add at all (unless you want to add new, untracked files). The commit message is important as it allows you to see what general changes were involved in the commit. This can be useful when you want to look back a few days later and no longer remember what was in the commit. So I entered git commit -a -m \"added test.txt and modified some stuff\" and get [master d3e6bb1] added test.txt and modified some stuff 2 files changed, 2 insertions(+) create mode 100644 test.txt` and if I run a git status afterwards, I will see that everything is clean and up-to-date. # On branch master nothing to commit, working directory clean Reverting \uf0c1 One of the nice things you can do is to revert your code back to an earlier commit. git revert is the command for rolling back like this. There are a number of ways to use this, simple uses are git revert 'commit id' reverts back to the SHA (uid) you can see when you type git log git revert HEAD will revert back to the last commit, throwing away any uncommitted changes git revert HEAD~n for example HEAD~3 will revert to the 4rd last commit. git revert HEAD^^^ (count of ^ is like ~n) will also revert back to the 4th last commit There are more advanced usages which you should read up on such as the -n . Try looking here . Pushing to a remote repository \uf0c1 If you want to send your committed changes to a remote repository, you will use the git push command. First, however, you need to make sure that you have a remote set up. If you created your repository by importing from a Git repo, then the remote will have automatically been created. If you want to create a new remote repository, then you will have already done this as described at the top of this page. So all you need to do is enter git push origin master . Let's dissect this command origin is the name of the remote repo. In most cases, this will be called origin, but is not necessarily so. master is the name of the branch. When you create a new Codio project, a master branch is automatically created and appears in brackets at the top of the file tree next to the project name. Branches are beyond the scope of this topic but they are definitely worth investigating as they are a very powerful feature of Git. If you now go to GitHub and look at the repository, you will see that your changes are pushed. You can also see the commits you made. Pulling from a remote repository \uf0c1 Now let's say that someone else is working remotely on the same code (let's assume they are not using Codio). They will push their code to the GitHub repo, too. By running git pull origin master , we pull in changes from the remote repo and Git will automatically merge them. Resolving Conflicts \uf0c1 When you pull in from the remote, you may get a conflict warning. This will happen if someone else has modified code in a way that Git cannot automatically resolve, usually because you have been editing the same bit of code. When this happens, you will need to resolve the conflict. If you open up the file, you will see something like this <<<<<<< HEAD:index.html <div id=\"footer\">contact : email.support@github.com</div> ======= <div id=\"footer\"> please contact us at support@github.com </div> >>>>>>> iss53:index.html You simply need to remove the code block that you want to dispose of. The top block is your code and the bottom comes from the code being merged. If you want to keep your code, you will want to end up with <div id=\"footer\">contact : email.support@github.com</div> if you want the merged code to remain, it will be <div id=\"footer\"> please contact us at support@github.com </div> To minimize conflicts, you should 1. Commit little and often and 2. Pull from the remote master often. Branches \uf0c1 Branches are important and worth mastering at an early stage. When you create a branch, you are creating a new area to code within. You then merge another branch, usually the master branch, into your new branch. From this point on, you can do whatever you want (add, commit, push etc) without impacting on the master branch on any other branch for that matter. For a full overview on branching, please read this The commands you will need to master are git branch - creates a new branch git checkout - switches to that branch (be careful about doing this without committing the branch you are leaving as any unstaged files will be lost) git merge from-branch - merges code from from-branch into your current branch Good practice is to switch over to your master branch and pull in changes from the remote (if you're using one). Then switch back to your working branch and merge in changes. Doing this ensures that conflicts are kept to a minimum. GitHub and other remotes \uf0c1 Most people will want to push to Github and other remote repos. There are various ways to manage this within Codio. Remotes and Github \uf0c1 To work with Github, you need to set up your SSH keys properly as described here . I have a remote repo \uf0c1 If your starting point is a remote repo, then you should create a new project from the Codio dashboard. Create Project is an option above your project listings. You should select the Git tab and enter in the ssh url. This will then create your Codio project by cloning the remote repo you specify and that remote repo will automatically be logged within that project. I do not yet have a remote repo \uf0c1 If you have code within Codio and you want to configure it to synchronize with a remote repo, then you should to the following Create a new, empty repo on Github or other provider. Copy the repo url to the clipboard. If you're using Github, then use the SSH url rather than https. Within the IDE, go to Tools->Git->Remotes Complete the dialog as shown below. It is recommended you use origin as the name to confirm the normal standards. You do not need to specify a username or password if you are using SSH. If you prefer, you can use the command line interface to achieve the same thing using git remote . Once you have set up your remotes, you can now perform sharing and updating commands (push, pull etc.) from Codio's git command line. Try pushing your code to the remote using git push --set-upstream origin master . From now on you can use simply git push as the set-upstream command ensure origin master is used by default. Simplified Git Steps \uf0c1 We will not attempt any sort of tutorial here, but the following steps cover the absolute basics of Git usage with a remote. If you are new to Git, then you should refer to the resources page . git status gives you the status of your current branch git add . adds all files, tracked or not, to the staged files git commit -a -m stages and commits all files to the snapshot The first time you push, run the following command to track the new remote git push --set-upstream origin master Subsequent pushes can be done with git push , which pushes all committed changes of the master branch to the tracked remote (origin). Active branch \uf0c1 You can see which branch you are on by looking in the file tree. The top level item is the project name and to the right of this in brackets is the current branch. You may switch branches using the command line interface or the Tools > Git > Switch Branch menu item. Keyboard shortcuts \uf0c1 You have full control over the keyboard shortcuts for code editing. You should refer to the Codio Preferences section to read more about this. Codio has its own complete set of defaults, all of which can be overriden. You can use Vim or Emacs key bindings by modifying the keymap preference setting. If you do not use keymap=default , you cannot override keyboard shortcuts. The sections that contain productivity specific actions and shortcuts are [Editor] and [Emmet] . Multiple cursors \uf0c1 You can place multiple cursors anywhere in a file using Cmd+Click (Mac) or Ctrl+Click (PC/Linux). Click to place the cursor at the desired location, then press and hold Cmd/Ctrl and begin clicking at new locations. When you release Cmd/Ctrl, you can start typing and the content will be duplicated at all cursor locations. You can also use Alt-Click to place the cursor everywhere inbetween a start and end position. Search and replace \uf0c1 Codio supports local and global search and replace. You can access these feature by hotkey or from the Find menu. Hotkey shortcuts can be seen in the Find menu. You can override these from Preferences . Local \uf0c1 Search and replace is supported on the currently selected file. The hotkeys are defined in Preferences and the defaults are ;Find. ; Type: hotkey key_find = Cmd+F ;Find next. ; Type: hotkey key_find_next = Cmd+G ;Find previous. ; Type: hotkey key_find_prev = Shift+Cmd+G ;Replace. ; Type: hotkey key_replace = Cmd+Alt+F ;Replace all. ; Type: hotkey key_replace_all = Shift+Cmd+Alt+F Global \uf0c1 Global search and replace are available within the Find menu under Find in project and Replace in project . You can search using regular expressions, ignore case and whole word settings. The buttons on the left of the input fields control these settings. Once the search operation has completed you will see matches listed in a Codio tab. Double click on the highlighted match to open up that file in a new tab. Pattern & Wildcard Matching (Globs) \uf0c1 When you are searching, you can specify a search pattern in the Where field. Lets say you have the following project |-- lib | |-- index.js | |-- hello_world.js |-- index.html |-- 404.html |-- app.js `-- gruntfile.coffee then you can use globs to select files in this way: All files ending in .js : **/*.js . index.js hello_world.js app.js All files ending in .html in the root folder: *.html index.html 404.html All files in lib : lib/*.* index.js hello_world.js All files ending in .html or .coffee : **/*{.html,.coffee} index.html 404.html gruntfile.coffee All files beginning with index : **/index* index.js index.html Basic Rules \uf0c1 Any character that appears in a pattern, other than the special pattern characters described below, matches itself. The NULL character may not occur in a pattern. A backslash escapes the following character; the escaping backslash is discarded when matching. The special pattern characters must be quoted if they are to be matched literally. The special pattern characters have the following meanings: * Matches any string, including the null string. When the globstar shell option is enabled, and * is used in a filename expansion context, two adjacent * s used as a single pattern will match all files and zero or more directories and subdirectories. If followed by a / , two adjacent * s will match only directories and subdirectories. ? Matches any single character. [\u2026] Matches any one of the enclosed characters. A pair of characters separated by a hyphen denotes a range expression; any character that sorts between those two characters, inclusive, using the current locale's collating sequence and character set, is matched. If the first character following the [ is a ! or a ^ then any character not enclosed is matched. A - may be matched by including it as the first or last character in the set. A ] may be matched by including it as the first character in the set. A character class matches any character belonging to that class. The word character class matches letters, digits, and the character _ . Within [ and ] , an equivalence class can be specified using the syntax [=c=] , which matches all characters with the same collation weight (as defined by the current locale) as the character c. Within [ and ] , the syntax [.symbol.] matches the collating symbol symbol. ?(pattern-list) Matches zero or one occurrence of the given patterns. *(pattern-list) Matches zero or more occurrences of the given patterns. +(pattern-list) Matches one or more occurrences of the given patterns. @(pattern-list) Matches one of the given patterns. !(pattern-list) Matches anything except one of the given patterns. Color preview and picker \uf0c1 Regular Colors \uf0c1 If you are in any file, of any type, that contains something that looks like an RGB hex value, rgb(100, 100, 100), hsla(0,100%,50%,0.2) etc., just hover over the code and a popup will appear that shows the color preview. Gradients \uf0c1 This works for gradients as well. Color Picker \uf0c1 If you move your mouse into the color preview area and then click, a color picker dialog will appear that allows you to choose a new color. You can drag things around as well as edit the values directly. Beautify javascript \uf0c1 You can format your Javascript code by pressing the keyboard shortcut as defined in the User Preferences . By default, it is key_format_code = Cmd+Alt+F (for a Mac) key_format_code = Ctrl+Alt+F (for anything else) It will indent your code correctly and manage spaces and other cool things. For example, if you start out with this if ('this_is'==/an_example/){of_beautifer();}else{var a=b?(c%d):e[f];} Then after beautifying, you will end up with this if ('this_is' == /an_example/) { of_beautifer(); } else { var a = b ? (c % d) : e[f]; } Settings \uf0c1 If you look within the [code-beautifier] section of the Codio Preferences, you will see the various beautification settings available. Don't forget, you can force these in Project preferences if you want to have consistently beautified code regardless of who edits your code. Force language highlighting \uf0c1 Codio will automatically select the syntax highlighting rules based on the file extension. If you open a file whose extension is not known then you will not get any highlighting of the code. You can tell Codio which language formatting to use by clicking on the name in the status bar of the code window. You can override the language highlighting by clicking as shown (circled) in the above screenshot.","title":"Code Editing"},{"location":"project/ide/editing/#productivity-emmet-zen-coding","text":"We have implemented lots of productivity features into the Codio IDE thanks to Emmet , formerly Zen Coding. These features let you saves considerable time when working with HTML, CSS and Javascript files.","title":"Productivity, Emmet, Zen Coding"},{"location":"project/ide/editing/#standard-code-editor-keyboard-shortcuts","text":"General keyboard shortcuts can be found in this section . All other productivity shortcuts are found here in this chapter.","title":"Standard Code Editor Keyboard Shortcuts"},{"location":"project/ide/editing/#emmet-keyboard-shortcuts","text":"A set of powerful productivity shortcuts for HTML5, CSS and Javascript.","title":"Emmet Keyboard Shortcuts"},{"location":"project/ide/editing/#abbreviations","text":"Thanks to our Emmet support, you get a large number of HTML and CSS abbreviations that expand to code, a bit like this div>ul>li*3 which expands to <div> <ul> <li></li> <li></li> <li></li> </ul> </div> Be sure to check out the complete reference as there are an awful lot of abbreviations for you to take advantage of.","title":"Abbreviations"},{"location":"project/ide/editing/#emmet-docs","text":"We would strongly recommend having a good dig around the Emmet documentation for a detailed introduction into the general Emmet syntax.","title":"Emmet docs"},{"location":"project/ide/editing/#abbreviations_1","text":"This is a way of generating HTML using a CSS selector inspired approach. Take a look at the following examples. You simply enter the abbreviation in the Code Editor and then press the Tab key to expand the abbreviation.","title":"Abbreviations"},{"location":"project/ide/editing/#basic-html-example","text":"div>ul>li*3 results in <div> <ul> <li></li> <li></li> <li></li> </ul> </div>","title":"Basic HTML Example"},{"location":"project/ide/editing/#juicier-html-example","text":"#page>div.logo+ul#navigation>li*5>a{Item $} results in <div id=\"page\"> <div class=\"logo\"></div> <ul id=\"navigation\"> <li><a href=\"\">Item 1</a></li> <li><a href=\"\">Item 2</a></li> <li><a href=\"\">Item 3</a></li> <li><a href=\"\">Item 4</a></li> <li><a href=\"\">Item 5</a></li> </ul> </div>","title":"Juicier HTML Example"},{"location":"project/ide/editing/#insertion-stops-edit-points","text":"Emmet offers some abbreviations that have insertion points. For example, a:link will insert <a href=\"http://|\"></a> Where the | character represents the cursor after insertion. After you have entered the href url you should press ctrl+alt+right arrow (not the Tab key) to jump to the next edit point.","title":"Insertion Stops / Edit Points"},{"location":"project/ide/editing/#more-html-examples","text":"Be sure to check out HTML Abbreviations . And also take a look at the cheat sheet as there are an awful lot of abbreviations for you to take advantage of.","title":"More HTML Examples"},{"location":"project/ide/editing/#css-examples","text":"w100p results in width: 100% m10p30e5x results in margin: 10% 30em 5ex and p100+m10e results in padding: 100px; margin: 10em; and how about this for gradients lg(left, #fc0, 30%, red) results in background-image: -webkit-gradient(linear, 0 0, 100% 0, from(#fc0), color-stop(0.5, 30%), to(red)); background-image: -webkit-linear-gradient(left, #fc0, 30%, red); background-image: -moz-linear-gradient(left, #fc0, 30%, red); background-image: -o-linear-gradient(left, #fc0, 30%, red); background-image: linear-gradient(left, #fc0, 30%, red);","title":"CSS Examples"},{"location":"project/ide/editing/#fuzzy-search","text":"If you take a look at cheat sheet , you\u2019ll find that there are too many CSS snippets to remember. Also, some of them might be a bit lengthy for sake of logical separation. To make CSS writing a bit easier, Emmet implements fuzzy search logic for CSS snippets: every time you enter an unknown abbreviation, Emmet will try to find the closest snippet definition. For example, instead of writing ov:h (overflow: hidden;) abbreviation, you can write ov-h , ovh or even oh . You can play around with the fuzzy search in text editor below. Try to find as many variations as possible (use Tab key to expand abbreviations) for bxz:cb , ovx:h and pos:a snippets.","title":"Fuzzy Search"},{"location":"project/ide/editing/#more-css-examples","text":"For more details on CSS abbreviations, please go to the Emmet documentation and be sure to look at the sub-chapters. But also be sure to check out the cheat sheet .","title":"More CSS Examples"},{"location":"project/ide/editing/#special-keyboard-actions","text":"Emmet also offers a very nice range of keyboard shortcuts to speed productivity even further. Keyboard actions can be modified in Preferences","title":"Special keyboard actions"},{"location":"project/ide/editing/#match-tag-pair","text":"Mac:Cmd+D (inward) and Shift+Cmd+D (outward) WinLin:Ctrl+D (inward) and Shift+Ctrl+D (outward) A well-known tag balancing: searches for tag or tag's content bounds from current cursor position and selects it. It will expand (outward balancing) or shrink (inward balancing) selection when called multiple times. Not every editor supports both inward and outward balancing due of some implementation issues, most editors have outward balancing only. Click here to see it in the Emmet site.","title":"Match Tag Pair"},{"location":"project/ide/editing/#go-to-matching-pair","text":"Mac: Shift+Cmd+T Win: Shift+Ctrl+T In HTML, allows you to quickly traverse between opening and closing tag. Click here to see it in the Emmet site.","title":"Go To Matching Pair"},{"location":"project/ide/editing/#wrap-with-abbreviation","text":"Mac/Win: Shift+Cmd+A A very powerful feature, it takes an abbreviation, expands it and places currently selected content in the last element of generated snippet. If there\u2019s no selection, action will silently call \u201cMatch Tag Pair\u201d to wrap context element. Click here to see it in the Emmet site.","title":"Wrap with Abbreviation"},{"location":"project/ide/editing/#go-to-edit-point","text":"Win: Ctrl+Alt+Right Arrow or Left Arrow This action works for HTML code blocks and allows you to quickly traverse between important code points: between tags empty attributes newlines with indentation Click here to see it in the Emmet site.","title":"Go to Edit Point"},{"location":"project/ide/editing/#select-item","text":"Mac/Win: Shift+Cmd+ Action is similar to \u201cGo to Edit Point\u201d, but selects important code parts. In HTML, these are tag name, full attribute and attribute value. For class attribute it also selects distinct classes. In CSS, it matches selector, full property and property value. For complex values and functions like 1px solid red or url(image.jpg) also selects part of it. Click here to see it in the Emmet site.","title":"Select Item"},{"location":"project/ide/editing/#toggle-comment","text":"Mac: Cmd+/ Win: Ctrl+/ This action, as name says, toggles comments on and off for the selected line. Works nicely in CSS and HTML files. Click here to see it in the Emmet site.","title":"Toggle Comment"},{"location":"project/ide/editing/#remove-tag","text":"Mac: Cmd+K Win: Ctrl+K Quickly removes tag, found by \u201cMatch Tag Pair\u201d from current cursor position, and adjusts indentation. Click here to see it in the Emmet site.","title":"Remove Tag"},{"location":"project/ide/editing/#merge-lines","text":"Mac: Shift+Cmd+M Win: Shift+Ctrl+M Merges selected lines into a single line. But when there\u2019s no selection, will match context HTML tag. Click here to see it in the Emmet site.","title":"Merge Lines"},{"location":"project/ide/editing/#inline-calculator","text":"Mac: Shift+Cmd+Y Win: Shift+Ctrl+Y Evaluates simple math expressions like 2*4 or 10/2 and outputs its result. You can use \\ operator which is equivalent to round(a/b). Very useful in CSS where numeric values should be modified frequently. Click here to see it in the Emmet site.","title":"Inline Calculator"},{"location":"project/ide/editing/#incrementdecrement-number","text":"Mac/Win : Alt+Up/Down (inc/dec by 0.1) Mac/Win : Ctrl+Up/Down (inc/dec by 1) Mac/Win : Ctrl+Alt+Up/Down (inc/dec by 10) This action, as name says, increments or decrements the number under the cursor with different steps: 0.1, 1 or 10. Click here to see it in the Emmet site.","title":"Increment/Decrement Number"},{"location":"project/ide/editing/#complete-reference","text":"Emmet has a huge number of shortcuts available. Check out the Emmet Cheat Sheet","title":"Complete reference"},{"location":"project/ide/editing/#git-mercurial-svn","text":"Git, Mercurial and SVN are all preinstalled, so you can open up a Terminal window to access them from the command line. You can also configure your .codio file so common commands are accessible from the Run menu in the Codio IDE. Refer to the Boxes documentation on how to do this.","title":"Git, Mercurial &amp; SVN"},{"location":"project/ide/editing/#a-few-git-helpers","text":"We have added a few Git helpers to the Tools->Git menu.","title":"A few Git helpers"},{"location":"project/ide/editing/#using-git-without-remote-repos","text":"You can use Git commands within your Codio project without needing to ever set up a remote repo. This gives you not only collaborative capabilities, but also comprehensive version control. However, one of the benefits of a distributed Source Control Management system is that having your code in more than one place means that there is no single point of failure. For this reason, we recommend that you use a third party provider such as GitHub as an external location to back up your data.","title":"Using Git without remote repos"},{"location":"project/ide/editing/#viewing-github-repos","text":"GitHub let's you browse around a repo but it's not the same as using an IDE. Codio gives you a great way of viewing any GitHub (or Git) repo. For web apps, you can even run and preview within Codio.","title":"Viewing GitHub repos"},{"location":"project/ide/editing/#offering-linkbutton-in-the-repo-readmemd-file","text":"This is great for anyone wanting to offer a link into a GitHub README page and then, when clicked, it initiates the creation of a project, importing in from the repo for the user in their Codio account. The advantage of this approach is that changes you make to your repo will be automatically shown in Codio as it creates a brand new Codio project whenever clicked on. If a project of that name already exists, users can change the name on the project creation page. You just use the following link format in your GitHub README file (or anywhere else for that matter). https://codio.com/home/projects/new?importType=git&activeTab=3&name=your_codio_project_name&importGitUrl=git@github.com:your_github_name/your_repo_name&stackVersion=stack_version_id In some cases, you may want to specify a specific branch. The common usage for this is if you have a demo or GitHub Pages site that you want to load into Codio. In this case you do the following https://codio.com/home/projects/new?importType=git&activeTab=3&name=your_codio_project_name&importGitUrl=git@github.com:your_github_name/your_repo_name&branch=other_branch&stackVersion=stack_version_id","title":"Offering link/button in the repo readme.md file"},{"location":"project/ide/editing/#finding-the-stack-version-id","text":"Go to the Stacks area and find the appropriate stack you wish to be used with your repo. Select Use Stack and from the address bar you will see the stack version ID to add to your link Example showing the Empty Stack stack version ID You are free to use any way of linking to Codio but we would recommend using the following images","title":"Finding the stack version ID"},{"location":"project/ide/editing/#how-to-manually-import-a-git-repo-into-codio","text":"If you are on the GitHub site and looking at a repo, you will see the Clone URL link (circled above). Click to copy the link to the clipboard; if you clone using SSH, you must have added the Codio SSH public key first as described here Login to Codio Click on New Project and then the Click here for more options Select Import and then from the Source drop-down, select Git Paste in the Git URL (see below) and add any additional details you require Press Create and Codio will load the repo and then display it","title":"How to manually import a Git repo into Codio"},{"location":"project/ide/editing/#resources","text":"If you are new to Git, then here are some resources to get you started. Git is simpler than you think (this is worth reading as it explains HOW Git works rather than teaching you usage) Git reference Introduction to Git by Scott Chacon Here is a list of more Git Tutorials in case you want some choice 10 Git Tutorials for beginners","title":"Resources"},{"location":"project/ide/editing/#ssh-keys","text":"To transfer your public key to Github or other remotes, please refer to this section . There is a section on this page that describes setting up keys with Github. You may also want to refer to SSH Keys in the Boxes section .","title":"SSH keys"},{"location":"project/ide/editing/#very-basic-git-tutorial","text":"This is not supposed to be a proper Git tutorial in any sense. Its purpose is to show anyone who is new to Git or Codio how to use it to get all the basic things done. For a proper, in-depth overview of Git, refer to the resources page. Please make sure you read this excellent overview if you are new to Git : http://git-scm.com/book/en/Getting-Started-Git-Basics","title":"Very basic Git tutorial"},{"location":"project/ide/editing/#github-keys","text":"If you're using GitHub, it is recommended that you use the SSH remote url rather than HTTPS. In order to do this, however, you should first make sure that your Codio public key is loaded into your GitHub account or repo settings. This whole process is described here .","title":"GitHub Keys"},{"location":"project/ide/editing/#experimentation","text":"The best way to learn Git is to create a really simple project with a few text files in it and then experiment like crazy. You can play around with all the Git commands and sync with GitHub repos to your heart's content without worrying about doing any coding. Once you have done this for a while, you will feel a lot more comfortable about using Git for your precious code.","title":"Experimentation"},{"location":"project/ide/editing/#your-projects-starting-point","text":"","title":"Your project's starting point"},{"location":"project/ide/editing/#you-created-a-project-by-importing-from-a-git-repo","text":"If you have code that already exists in a remote repo, say GitHub, then you should create a new project by importing from that repo. That will automatically load the project and set up the correct association with the remote Git repo. Creating a project is fully described here .","title":"You created a project by importing from a Git repo"},{"location":"project/ide/editing/#i-do-not-yet-have-a-remote-repo","text":"If you have code within Codio and you want to create a brand new GitHub (or other remote) repo, then follow these steps. Create a new project in Codio or open up an existing one. Open the terminal (Tools > Terminal) and initialize git by typing \"git init\" and pressing enter Create a new, empty repo on GitHub or other provider. Copy the repo url to the clipboard. If you're using GitHub, use the SSH url rather than https and you should make sure that your Codio public key is loaded into your GitHub account or repo settings as described here Within the IDE, go to Tools > Git > Remotes It is recommended you use origin as the name to confirm the normal standards. You do not need to specify a username or password if you are using SSH. Paste the remote url into the URL field.","title":"I do not yet have a remote repo"},{"location":"project/ide/editing/#check-the-status-with-git-status","text":"Whenever you want to see what the Git status of your project is enter git status . Initially, you will see that there is nothing to report $ git status # On branch master nothing to commit, working directory clean","title":"Check the status with 'git status'"},{"location":"project/ide/editing/#tracking-files","text":"Codio uses Git by default and if you import a project from a Git repo, all the existing files will already be 'tracked' (explained in the next section). Any new files you add will need to be tracked using a Git command. Tracking means that Git knows about them. If you add a new file, Git will not know about it and needs to be explicitly told. Add a new file ( test.txt ) and add a few random characters to it. Open any other existing file (I chose humans.txt) and make a small, harmless change to it. Run git status again and you should see # On branch master ` # Changes not staged for commit:` # (use \"git add ...\" to update what will be committed) # (use \"git checkout -- ...\" to discard changes in working directory) # # modified: humans.txt # # Untracked files: # (use \"git add ...\" to include in what will be committed) # # test.txt no changes added to commit (use \"git add\" and/or \"git commit -a\") This shows you the modified and the new (untracked) files. To tell GitHub to track the file, you can do one of the following git add . which tells Git to track all files in the project that are not yet tracked. This is the quickest and simplest way to track any new files. git add FILENAME explicitly tracks a single file","title":"Tracking files"},{"location":"project/ide/editing/#staged-files","text":"A staged file is one that is tracked and is ready to commit into the repository. Once you run git add you are tracking and staging that file. But if you modify a tracked file, the modifications are not staged. To correctly stage them, you need to rerun git add .","title":"Staged Files"},{"location":"project/ide/editing/#committing-your-changes","text":"Committing means that you want to add your staged, files into the repository. There are two ways to do this... git commit -m 'commit message' will take all staged files and commit them to the repo. git commit -a -m 'commit message' will do the same but the -a switch tells Git to automatically stage any tracked files before committing them. This means that you don't have to use git add at all (unless you want to add new, untracked files). The commit message is important as it allows you to see what general changes were involved in the commit. This can be useful when you want to look back a few days later and no longer remember what was in the commit. So I entered git commit -a -m \"added test.txt and modified some stuff\" and get [master d3e6bb1] added test.txt and modified some stuff 2 files changed, 2 insertions(+) create mode 100644 test.txt` and if I run a git status afterwards, I will see that everything is clean and up-to-date. # On branch master nothing to commit, working directory clean","title":"Committing your changes"},{"location":"project/ide/editing/#reverting","text":"One of the nice things you can do is to revert your code back to an earlier commit. git revert is the command for rolling back like this. There are a number of ways to use this, simple uses are git revert 'commit id' reverts back to the SHA (uid) you can see when you type git log git revert HEAD will revert back to the last commit, throwing away any uncommitted changes git revert HEAD~n for example HEAD~3 will revert to the 4rd last commit. git revert HEAD^^^ (count of ^ is like ~n) will also revert back to the 4th last commit There are more advanced usages which you should read up on such as the -n . Try looking here .","title":"Reverting"},{"location":"project/ide/editing/#pushing-to-a-remote-repository","text":"If you want to send your committed changes to a remote repository, you will use the git push command. First, however, you need to make sure that you have a remote set up. If you created your repository by importing from a Git repo, then the remote will have automatically been created. If you want to create a new remote repository, then you will have already done this as described at the top of this page. So all you need to do is enter git push origin master . Let's dissect this command origin is the name of the remote repo. In most cases, this will be called origin, but is not necessarily so. master is the name of the branch. When you create a new Codio project, a master branch is automatically created and appears in brackets at the top of the file tree next to the project name. Branches are beyond the scope of this topic but they are definitely worth investigating as they are a very powerful feature of Git. If you now go to GitHub and look at the repository, you will see that your changes are pushed. You can also see the commits you made.","title":"Pushing to a remote repository"},{"location":"project/ide/editing/#pulling-from-a-remote-repository","text":"Now let's say that someone else is working remotely on the same code (let's assume they are not using Codio). They will push their code to the GitHub repo, too. By running git pull origin master , we pull in changes from the remote repo and Git will automatically merge them.","title":"Pulling from a remote repository"},{"location":"project/ide/editing/#resolving-conflicts","text":"When you pull in from the remote, you may get a conflict warning. This will happen if someone else has modified code in a way that Git cannot automatically resolve, usually because you have been editing the same bit of code. When this happens, you will need to resolve the conflict. If you open up the file, you will see something like this <<<<<<< HEAD:index.html <div id=\"footer\">contact : email.support@github.com</div> ======= <div id=\"footer\"> please contact us at support@github.com </div> >>>>>>> iss53:index.html You simply need to remove the code block that you want to dispose of. The top block is your code and the bottom comes from the code being merged. If you want to keep your code, you will want to end up with <div id=\"footer\">contact : email.support@github.com</div> if you want the merged code to remain, it will be <div id=\"footer\"> please contact us at support@github.com </div> To minimize conflicts, you should 1. Commit little and often and 2. Pull from the remote master often.","title":"Resolving Conflicts"},{"location":"project/ide/editing/#branches","text":"Branches are important and worth mastering at an early stage. When you create a branch, you are creating a new area to code within. You then merge another branch, usually the master branch, into your new branch. From this point on, you can do whatever you want (add, commit, push etc) without impacting on the master branch on any other branch for that matter. For a full overview on branching, please read this The commands you will need to master are git branch - creates a new branch git checkout - switches to that branch (be careful about doing this without committing the branch you are leaving as any unstaged files will be lost) git merge from-branch - merges code from from-branch into your current branch Good practice is to switch over to your master branch and pull in changes from the remote (if you're using one). Then switch back to your working branch and merge in changes. Doing this ensures that conflicts are kept to a minimum.","title":"Branches"},{"location":"project/ide/editing/#github-and-other-remotes","text":"Most people will want to push to Github and other remote repos. There are various ways to manage this within Codio.","title":"GitHub and other remotes"},{"location":"project/ide/editing/#remotes-and-github","text":"To work with Github, you need to set up your SSH keys properly as described here .","title":"Remotes and Github"},{"location":"project/ide/editing/#i-have-a-remote-repo","text":"If your starting point is a remote repo, then you should create a new project from the Codio dashboard. Create Project is an option above your project listings. You should select the Git tab and enter in the ssh url. This will then create your Codio project by cloning the remote repo you specify and that remote repo will automatically be logged within that project.","title":"I have a remote repo"},{"location":"project/ide/editing/#i-do-not-yet-have-a-remote-repo_1","text":"If you have code within Codio and you want to configure it to synchronize with a remote repo, then you should to the following Create a new, empty repo on Github or other provider. Copy the repo url to the clipboard. If you're using Github, then use the SSH url rather than https. Within the IDE, go to Tools->Git->Remotes Complete the dialog as shown below. It is recommended you use origin as the name to confirm the normal standards. You do not need to specify a username or password if you are using SSH. If you prefer, you can use the command line interface to achieve the same thing using git remote . Once you have set up your remotes, you can now perform sharing and updating commands (push, pull etc.) from Codio's git command line. Try pushing your code to the remote using git push --set-upstream origin master . From now on you can use simply git push as the set-upstream command ensure origin master is used by default.","title":"I do not yet have a remote repo"},{"location":"project/ide/editing/#simplified-git-steps","text":"We will not attempt any sort of tutorial here, but the following steps cover the absolute basics of Git usage with a remote. If you are new to Git, then you should refer to the resources page . git status gives you the status of your current branch git add . adds all files, tracked or not, to the staged files git commit -a -m stages and commits all files to the snapshot The first time you push, run the following command to track the new remote git push --set-upstream origin master Subsequent pushes can be done with git push , which pushes all committed changes of the master branch to the tracked remote (origin).","title":"Simplified Git Steps"},{"location":"project/ide/editing/#active-branch","text":"You can see which branch you are on by looking in the file tree. The top level item is the project name and to the right of this in brackets is the current branch. You may switch branches using the command line interface or the Tools > Git > Switch Branch menu item.","title":"Active branch"},{"location":"project/ide/editing/#keyboard-shortcuts","text":"You have full control over the keyboard shortcuts for code editing. You should refer to the Codio Preferences section to read more about this. Codio has its own complete set of defaults, all of which can be overriden. You can use Vim or Emacs key bindings by modifying the keymap preference setting. If you do not use keymap=default , you cannot override keyboard shortcuts. The sections that contain productivity specific actions and shortcuts are [Editor] and [Emmet] .","title":"Keyboard shortcuts"},{"location":"project/ide/editing/#multiple-cursors","text":"You can place multiple cursors anywhere in a file using Cmd+Click (Mac) or Ctrl+Click (PC/Linux). Click to place the cursor at the desired location, then press and hold Cmd/Ctrl and begin clicking at new locations. When you release Cmd/Ctrl, you can start typing and the content will be duplicated at all cursor locations. You can also use Alt-Click to place the cursor everywhere inbetween a start and end position.","title":"Multiple cursors"},{"location":"project/ide/editing/#search-and-replace","text":"Codio supports local and global search and replace. You can access these feature by hotkey or from the Find menu. Hotkey shortcuts can be seen in the Find menu. You can override these from Preferences .","title":"Search and replace"},{"location":"project/ide/editing/#local","text":"Search and replace is supported on the currently selected file. The hotkeys are defined in Preferences and the defaults are ;Find. ; Type: hotkey key_find = Cmd+F ;Find next. ; Type: hotkey key_find_next = Cmd+G ;Find previous. ; Type: hotkey key_find_prev = Shift+Cmd+G ;Replace. ; Type: hotkey key_replace = Cmd+Alt+F ;Replace all. ; Type: hotkey key_replace_all = Shift+Cmd+Alt+F","title":"Local"},{"location":"project/ide/editing/#global","text":"Global search and replace are available within the Find menu under Find in project and Replace in project . You can search using regular expressions, ignore case and whole word settings. The buttons on the left of the input fields control these settings. Once the search operation has completed you will see matches listed in a Codio tab. Double click on the highlighted match to open up that file in a new tab.","title":"Global"},{"location":"project/ide/editing/#pattern-wildcard-matching-globs","text":"When you are searching, you can specify a search pattern in the Where field. Lets say you have the following project |-- lib | |-- index.js | |-- hello_world.js |-- index.html |-- 404.html |-- app.js `-- gruntfile.coffee then you can use globs to select files in this way: All files ending in .js : **/*.js . index.js hello_world.js app.js All files ending in .html in the root folder: *.html index.html 404.html All files in lib : lib/*.* index.js hello_world.js All files ending in .html or .coffee : **/*{.html,.coffee} index.html 404.html gruntfile.coffee All files beginning with index : **/index* index.js index.html","title":"Pattern &amp; Wildcard Matching (Globs)"},{"location":"project/ide/editing/#basic-rules","text":"Any character that appears in a pattern, other than the special pattern characters described below, matches itself. The NULL character may not occur in a pattern. A backslash escapes the following character; the escaping backslash is discarded when matching. The special pattern characters must be quoted if they are to be matched literally. The special pattern characters have the following meanings: * Matches any string, including the null string. When the globstar shell option is enabled, and * is used in a filename expansion context, two adjacent * s used as a single pattern will match all files and zero or more directories and subdirectories. If followed by a / , two adjacent * s will match only directories and subdirectories. ? Matches any single character. [\u2026] Matches any one of the enclosed characters. A pair of characters separated by a hyphen denotes a range expression; any character that sorts between those two characters, inclusive, using the current locale's collating sequence and character set, is matched. If the first character following the [ is a ! or a ^ then any character not enclosed is matched. A - may be matched by including it as the first or last character in the set. A ] may be matched by including it as the first character in the set. A character class matches any character belonging to that class. The word character class matches letters, digits, and the character _ . Within [ and ] , an equivalence class can be specified using the syntax [=c=] , which matches all characters with the same collation weight (as defined by the current locale) as the character c. Within [ and ] , the syntax [.symbol.] matches the collating symbol symbol. ?(pattern-list) Matches zero or one occurrence of the given patterns. *(pattern-list) Matches zero or more occurrences of the given patterns. +(pattern-list) Matches one or more occurrences of the given patterns. @(pattern-list) Matches one of the given patterns. !(pattern-list) Matches anything except one of the given patterns.","title":"Basic Rules"},{"location":"project/ide/editing/#color-preview-and-picker","text":"","title":"Color preview and picker"},{"location":"project/ide/editing/#regular-colors","text":"If you are in any file, of any type, that contains something that looks like an RGB hex value, rgb(100, 100, 100), hsla(0,100%,50%,0.2) etc., just hover over the code and a popup will appear that shows the color preview.","title":"Regular Colors"},{"location":"project/ide/editing/#gradients","text":"This works for gradients as well.","title":"Gradients"},{"location":"project/ide/editing/#color-picker","text":"If you move your mouse into the color preview area and then click, a color picker dialog will appear that allows you to choose a new color. You can drag things around as well as edit the values directly.","title":"Color Picker"},{"location":"project/ide/editing/#beautify-javascript","text":"You can format your Javascript code by pressing the keyboard shortcut as defined in the User Preferences . By default, it is key_format_code = Cmd+Alt+F (for a Mac) key_format_code = Ctrl+Alt+F (for anything else) It will indent your code correctly and manage spaces and other cool things. For example, if you start out with this if ('this_is'==/an_example/){of_beautifer();}else{var a=b?(c%d):e[f];} Then after beautifying, you will end up with this if ('this_is' == /an_example/) { of_beautifer(); } else { var a = b ? (c % d) : e[f]; }","title":"Beautify javascript"},{"location":"project/ide/editing/#settings","text":"If you look within the [code-beautifier] section of the Codio Preferences, you will see the various beautification settings available. Don't forget, you can force these in Project preferences if you want to have consistently beautified code regardless of who edits your code.","title":"Settings"},{"location":"project/ide/editing/#force-language-highlighting","text":"Codio will automatically select the syntax highlighting rules based on the file extension. If you open a file whose extension is not known then you will not get any highlighting of the code. You can tell Codio which language formatting to use by clicking on the name in the status bar of the code window. You can override the language highlighting by clicking as shown (circled) in the above screenshot.","title":"Force language highlighting"},{"location":"project/ide/features/","text":"Our IDE features also include autocomplete, code-folding, key-bindings, line-numbering, multiple cursors, detailed control over visual themes and preferences, key bindings, standard and regex search and replace. Additional advanced features include multiple code panels and syntax highlighting support for all programming languages. Debugging \uf0c1 Codio offers an integrated, language specific debugger. Codio currently supports the following languages. Java Python 2 Python 3 NodeJS C and C++ If you would like support for any languages that do not appear in the list, please contact us and we can look into adding it. Sample project \uf0c1 If you created the account for your Codio Trial account then you will find Demo Codio Debugger in your My Projects list. You will find instructions in the README.md file when you open the project. If you cannot see it then click here to create it now. Press the Use Pack button to install. Video overview \uf0c1 For anyone who has not used a debugger before, here is a useful video tutorial. Prerequisites \uf0c1 If you install Java, C or NodeJS from a stack, then the GBD components that support debugging will be automatically installed. However, if you have installed these languages manually then when you run the debugger, you will get a warning telling you to install the GDB component. A link will be provided to the Install Software feature that allows you to install it with a single click. Creating and managing debug targets \uf0c1 You should first configure a debug target. Having multiple debug targets is useful for the following reasons. It allows you to quickly debug the same application with different command line arguments, allowing you to test different scenarios. You can debug more than one application. You manage debug targets from the following locations the rightmost toolbar menu item, select the Configure... option Tools->Debugger Settings This will bring up the list of any debug targets you may have previously configured. To create a new target, press the Create button. You can then configure your target. You can also edit any existing debug target. The following parameters can be configured. The programming language A friendly name to give the configuration The command to execute to your program along with any command line parameters you may wish to include Any command to execute before debugging starts. This is usually a compile process. You can also reference the active file in use using {{filepath}} token which inserts the path and full file name /path/to/file.ext When creating a new target, you are also shown the debugger port and instruction but these can typically be ignored. Single file confgurations \uf0c1 If you are using C, C++ or Java and debugging a simple single code file project (common in early programmng courses) then you should choose Single C File, Single C++ file or Single Java file Debugger Type. This frees you from having to worry about the detailed compile and run configuration. Language specific compilation commands \uf0c1 If you are not using a single file configuration then you will need to provide the following information Before Launch will typically be a compilation or build command Launch will be the command to launch the program In java you are asked for a port number, which should always be set to 5105 . Starting a debugging session \uf0c1 There are two ways you can launch an application in debug mode. from the rightmost toolbar menu you can select the debug target from the dropdown menu or just press the button to re-run the last executed debug target. from the debug targets list you can press the Debug button. At this point, the debugger will fire up and you will see a screen similar to the one show below. You may need to wait a second or two for the debugger to load. It will automatically stop on the first line of code, regardless of whether there is a breakpoint set or not. Breakpoints \uf0c1 A breakpoint is a line of code where the debugger will pause code execution if in debug mode. To set a breakpoint you click in the gutter next to the line number. You can remove a breakpoint in the same way. When a breakpoint is set, a red dot will appear on the line. Controlling the debugger \uf0c1 Once the debugger stops code execution you can control execution using the buttons at the top of the debug panel. Resume - this tells the debugger to carry on execution without stopping until another breakpoint is encountered. Stop - execution will stop and the debug window will be closed. Step over - the debugger will execute the next line of code and then stop. If the line of code about to be executed is a function, then it will execute the contents of that function but will not stop within it unless the function contains a breakpoint. Step into - the debugger will execute the next line of code and then stop. If the line of code about to be executed is a function, then it will stop on the first line within that function. Step out - the debugger will exit the current function and stop on the next line of the calling function. If the current line is the main entry function of the application then execution will cease but and the debugger will restart automatically. Other features \uf0c1 The debug panel also contains other useful features. Call stack - this shows the parent functions relative to the function that contains the currently executing line of code. Local variables - all local variables of the current function and their current values are automatically displayed. Watches - this allows you to watch a specific variable, and for some languages also expressions, Breakpoints - this lists all the breakpoints currently set in any of your code files. You can disable them by unchecking the boxes. Console - the console has two main functions; it displays status messages from the system in bold and your code can output data there by writing output to the console (for example a print('message') statement in Python). Support for the standard input when debugging \uf0c1 Support for stdin is available for: C/C++ Node.js GDB Node example: function testStdIn() { console.log(\"What is your name?\"); process.stdin.once('data', (chunk) => { let name = chunk.toString(); console.log(\"Hello, \" + name + \"!\"); }); } testStdIn() Launching the debugger from Codio content \uf0c1 It is also possible to launch any debugger configuration from a page. Please click here for details. JUnit testing framework \uf0c1 Codio provides a simple way to execute JUnit tests for Java in your project. To use JUnit, your project requires Java and so should either use the Java 8 stack or you should have manually installed Java in your box or install from Tools>Install Software . See Installing Software Packages for more information Configuration \uf0c1 Open the JUnit dialog Tools->JUnit or use the Shift+Alt+J hotkey. Then configure the Source path is the location of the student source code Test source path is the location of the test cases source folder Library path is the path to any libraries used by the student application Working directory is the path where the compiled student code should execute All paths are relative to the root of the workspace folder. Individual test cases can be added by specifying the paths to a file with JUnit tests in the add test case fields or by dragging and dropping the file into the JUnit tab. Please note that if using multiple cases in an assignment/project, the files for each should all be in separate folders for them to work independently of each other. This applies to student code files as well as the code used for the cases. Timeout settings \uf0c1 The default timeout for JUnit execution is 30 seconds but you can change this as required in user or project preferences. You can also change the default hotkey to access JUnit if required as well To ensure that the same settings apply to students may use the project within a class, we would recommend you change this as a project preference Execution \uf0c1 You can Execute the tests from the JUnits Execution tab. Once completed, the results will be listed below. If you publish your project as a unit to a class, the JUnit configurations you set up will be included in the Unit for students. Autocomplete \uf0c1 Autocomplete is supported within HTML, CSS and Javascript files. Just type away and we will automatically show you matches for what you are typing. If you don't like your auto-complete auto-completing, just set the preference automatic_completions = false . Other languages are supported with language server protocol although in such files, autocomplete is not automatically involved. See language server protocol for more information. HTML Tags \uf0c1 Auto complete is context sensitive, so you will only be shown Tags that are relevant to your location within the HTML file. For example, if you are not within <body></body> , you will see a much reduced set of options in the auto complete popup. However, place your cursor inside the <body></body> tags and you will see the full list of standard HTML tags. HTML Attribtues \uf0c1 If you have entered <a , then invoke auto complete, you are presented with a list of relevant attributes for the <a> tag. Tern & Javascript \uf0c1 We support intelligent autocomplete using TernJS. Tern also support explicit directives in the .tern-project file you can place in the root of your project. This file looks like this { \"libs\": [ \"browser\", \"jquery\" ], \"loadEagerly\": [ \"importantfile.js\" ], \"plugins\": { \"requirejs\": { \"baseURL\": \"./\", \"paths\": {} } } } You should note that Codio currently only supports autocomplete for the currently opened file as well as items specified in the libs section of the .tern-project file. Please refer to the Tern documentation for full details on how to configure this file. CSS \uf0c1 Use ctrl+space within your CSS to invoke auto complete. Command bar \uf0c1 The Command Bar allows you to access almost all of the Codio actions from a searchable list. It is also a great way of looking up keyboard shortcuts without having to explore the menu. You invoke the Command Bar with Tools > Command Bar Cmd+Shift+P (Mac) / Ctrl+Shift+P (PC/Linux) You will then see the following popup dialog. Now just start typing and the list will refine as you type. Copying a project \uf0c1 You can copy any 3rd party public project into your account going to Project>Create Copy . If you are looking at a copied project, then it will look like this. If you are signed into Codio, copying a project will create the copy in your account. If the project owner has allowed box cloning you will also be able to clone the box as well as the project. Code beautification \uf0c1 You can format your code by pressing the keyboard shortcut as defined in the User Preferences . By default, it is key_format_code = Cmd+Shift+B (for a Mac) key_format_code = Ctrl+Shift+B (for anything else) It will indent your code correctly and manage spaces and other cool things. For example, if you start out with this if ('this_is'==/an_example/){of_beautifer();}else{var a=b?(c%d):e[f];} Then after beautifying, you will end up with this if ('this_is' == /an_example/) { of_beautifer(); } else { var a = b ? (c % d) : e[f]; } Settings \uf0c1 If you look within the [code-beautifier] section of the Codio Preferences, you will see the various beautification settings available. Don't forget, you can force these at the Project level preferences if you want to have consistently beautified code regardless of who edits your code. Preview \uf0c1 It is important to understand the difference between Static and Dynamic content when using the Preview menu options. Codio provides a configurable menu item for Dynamic/Server Side content (rightmost Codio menu) as well as Static content. Static content \uf0c1 You can use Preview static options on Static content only (HTML, CSS, JS and text). You can also preview static content on your mobile device easily using Project>QR Code for Preview URL to generate a QR code you can scan with a QR Reader on your device. Dynamic content \uf0c1 To access files or services that are executed on the server (PHP, Ruby, Node etc.), you need to use the right-most menu option. You can access your server side application by: word1-word2-port.codio.io which will access your box over port 80, which is useful if your corporate firewall blocks ports other than 80 and 443. word1-word2 is an automatically generated subdomain name for your Codio Box. You can configure your application to listen on ports defining the port in the URL, but please be aware than Codio supported a restricted range of ports. Please refer to this section for more details. Read on for information on how to configure your Static and Dynamic preview menus. Instructions \uf0c1 The Preview button lets you preview one or more web pages with a simple button press. Codio creates three default entries in the Preview menu automatically. Project Index - this is the default file to run for your project. It can be set by right-clicking a file in the file tree. This option should only be used to preview static content (typically .html files). For PHP, Ruby etc. you should use the Box URL option. Current File - whichever code file currently has focus. This option should only be used to preview static content (typically .html files). For PHP, Ruby etc. you should use the Box URL option. Box URL - use this option for previewing PHP, Ruby or other server side languages over https. Click here for more information on configuring port access for https. If you right-click a file in the file tree or the Tab, you can also select Preview Static . Preview in a Codio tab or new browser tab \uf0c1 In the Preview dropdown menu, you can select one of the following ways to preview Inside Codio : displays the preview in a Codio tab; note that if you are accessing via any port other than Port 80 (the Box URL defaults in the screenshot at the top) then this option will only work if you are using HTTPS as Codio itself runs over HTTPS and the browser will not allow mixed HTTP/HTTPS. See here for more details on using HTTPS. New browser tab : it will open up a new browser tab or window. If you are previewing a private project containing Static content and you have not enabled Allow Private Static Preview option (available only via Project>Settings ) you will be asked to authenticate with your username and password. If you signed up using GitHub/BitBucket/G+ method, a random password is created for your account. Go to Codio>Account and on the Account tab you can set up a password of your own choosing. If though you have enabled this option, then you can preview static content without authentication. A new backend URL will be generated for this purpose that you can then share with anyone else you wish to be able to preview your project. You are also able to regenerate this URL at any time and access using the old URL will no longer function. This only applies to code being previewed over the standard ports 80 and 443. Previewing via any other port will have no authentication, because the code is being served from your application server, which we have no control over but you can add your own authentication. See Apache Password Basic Authentication and HTTP Authentication with PHP for some examples. Modifying the Preview menu \uf0c1 You are free to customize the menu in either of the following ways From the Preview or Run drop down menus (the 2nd and 3rd right most Codio menu items), select Configure... If it exists already, open the .codio file that lives in the root of your project. For details about the various tokens that can be inserted, please refer to Customizing the Run menu . {{domain3000}} is the most important token for the Preview menu . It is replaced by the public url required to access your project over port 80, which is useful if your corporate firewall blocks ports other than 80 and 443. {{domain}} can also be used in the Preview menu. In most cases you will want to add the Port number (default 3000) to your service. e.g \"Box URL\": \"https://{{domain3000}}/\", { // Configure your Run and Preview buttons here. // Run button configuration \"commands\": { \"Node version\": \"node --version\" }, // Preview button configuration \"preview\": { \"Project Index (static)\": \"https://{{domain}}/{{index}}\", \"Current File (static)\": \"https://{{domain}}/{{filepath}}\", \"Box URL\": \"https://{{domain3000}}/\" } } Note that static content is served over Port 80. To access dynamic content you may need to specify the appropriate Port. The full range of Codio {{tokens}} is explained in this section . Insecure Content with In-Tab preview and front-end code (#mixed-content) \uf0c1 Codio runs over a secure connection using HTTPS, and therefore so does the inline preview. If your code references an external resource (script, font, image, etc.). For example: <script src=\"http://code.angularjs.org/1.1.5/angular.js\"> You will get a browser error indicating that there is some form of insecure or mixed content because you are running in a mixed HTTP/HTTPS mode. This is a restriction of the browser, and cannot be modified easily, or in some browsers, it cannot be modified at all. It is intended to protect you from insecure content. There are 2 ways to avoid this: Modify your external references to use HTTPS. Modify your references to use the 'current protocol' by including '//' without http or https, so <script src=\"//code.angularjs.org/1.1.5/angular.js\"> . If none of the above work, then download the external file, and include and reference it within the Codio project itself. Quick open \uf0c1 Quick open (fast open) is a great way of opening files without the need to access the file tree. Invoke Quick Open from File > Open File from the menu Cmd+O (Mac) / Ctrl+O (PC/Linux) ... and the quick open dialog will appear. You now start typing the name of a file and as you type, the list will narrow down. You can then select the file you want using the mouse or use the keyboard, pressing Enter on the required file. Real time code collaboration \uf0c1 If you give other Codio users permissions to access to your project, then Codio allows more than one user to view and edit files simultaneously. Rather like Google Docs, you will be able to see other people editing the file in real time. Because of this collaboration feature, your files are saved in real time and there is no need to press the save button. It just happens automatically. You can change full access to your project from the Project->Permissions menu, but this is risky and we advise strongly against this unless you are sure only one person will be editing the project at a time. The better approach is to use Git. If you are familiar with Git then each person has their own project but they all use Git to synchronize the content with a remote repository hosted on a platform like GitHub or BitBucket. Cursor Presence \uf0c1 When accessing another users project where permissions have been granted by the project owner, all active users in a project will be shown with a color in an icon showing in the menu bar when files are being accessed/edited Clicking on the icon will change focus to show what that user is currently editing highlighted in that color and will show the users cursor. Hovering over the icon will show the filename and line currently being edited. This can be very useful if a colleague needs assistance as you can see what they are doing, real time and if you need to demonstrate something to them, they can see what you are doing Audio/Video Chat Support \uf0c1 When accessing another users project where permissions have been granted by the project owner or for teachers viewing the students assignment, a Call button will show allowing Audio/Video calls and or real time chat. Saving files \uf0c1 There is generally no need to save your files as content is saved automatically. You can still save manually using the Ctrl+S|Cmd+S keyboard shortcut, which most of you should be familiar with, but you don\u2019t need to. If you make mistakes, then use the regular undo ( Ctrl+Z ). Version Control is the best possible way of managing restores and this is comprehensively supported thanks to our Git integration . Sharing and embedding \uf0c1 To share a project or link to a project from a web page, go to the Project > Share menu item. Retaining layout status & automatically starting tutorials \uf0c1 You'll notice the three options at the top of the dialog. When you embed or link to a Codio project you have three ways of the IDE rendering it Project URL : use this URL to display the project with whatever panel and open file configuration happens to be active at the time. This can change all the time depending on what the user happens to have active at any given time. Guide URL : use this URL to display your project with your Guide automatically starting. With Layout : use this URL if you want to always use the precise panel and file configuration that you currently have open. This is the right option if you want to embed it in a blog post or page and a precise configuration should be retained no matter what the project owner is doing with the layout at any given time. You can use either of these basic URLs by copying and pasting. But if you want to use one of our preconfigured button options, read on. Markdown or HTML \uf0c1 You can choose between Markdown or HTML by clicking on the HTML or Markdown label. Markdown is great for your GitHub README.md pages. Once you have made your selection you can copy and paste from one of the button options below. Suggested Buttons \uf0c1 You will notice that there are two suggested buttons available for Project URL and With Layout modes. Demo : the suggested button for any situation where you want to link to a demo project. A great example would be on your GitHub page, where you want to be able to show a demo of your code as well as allowing the user to browse around the code itself. Show me the code : the suggested button for any situation where you want to link a blog, tutorial or some documentation to a real code sample.","title":"Advanced IDE Features"},{"location":"project/ide/features/#debugging","text":"Codio offers an integrated, language specific debugger. Codio currently supports the following languages. Java Python 2 Python 3 NodeJS C and C++ If you would like support for any languages that do not appear in the list, please contact us and we can look into adding it.","title":"Debugging"},{"location":"project/ide/features/#sample-project","text":"If you created the account for your Codio Trial account then you will find Demo Codio Debugger in your My Projects list. You will find instructions in the README.md file when you open the project. If you cannot see it then click here to create it now. Press the Use Pack button to install.","title":"Sample project"},{"location":"project/ide/features/#video-overview","text":"For anyone who has not used a debugger before, here is a useful video tutorial.","title":"Video overview"},{"location":"project/ide/features/#prerequisites","text":"If you install Java, C or NodeJS from a stack, then the GBD components that support debugging will be automatically installed. However, if you have installed these languages manually then when you run the debugger, you will get a warning telling you to install the GDB component. A link will be provided to the Install Software feature that allows you to install it with a single click.","title":"Prerequisites"},{"location":"project/ide/features/#creating-and-managing-debug-targets","text":"You should first configure a debug target. Having multiple debug targets is useful for the following reasons. It allows you to quickly debug the same application with different command line arguments, allowing you to test different scenarios. You can debug more than one application. You manage debug targets from the following locations the rightmost toolbar menu item, select the Configure... option Tools->Debugger Settings This will bring up the list of any debug targets you may have previously configured. To create a new target, press the Create button. You can then configure your target. You can also edit any existing debug target. The following parameters can be configured. The programming language A friendly name to give the configuration The command to execute to your program along with any command line parameters you may wish to include Any command to execute before debugging starts. This is usually a compile process. You can also reference the active file in use using {{filepath}} token which inserts the path and full file name /path/to/file.ext When creating a new target, you are also shown the debugger port and instruction but these can typically be ignored.","title":"Creating and managing debug targets"},{"location":"project/ide/features/#single-file-confgurations","text":"If you are using C, C++ or Java and debugging a simple single code file project (common in early programmng courses) then you should choose Single C File, Single C++ file or Single Java file Debugger Type. This frees you from having to worry about the detailed compile and run configuration.","title":"Single file confgurations"},{"location":"project/ide/features/#language-specific-compilation-commands","text":"If you are not using a single file configuration then you will need to provide the following information Before Launch will typically be a compilation or build command Launch will be the command to launch the program In java you are asked for a port number, which should always be set to 5105 .","title":"Language specific compilation commands"},{"location":"project/ide/features/#starting-a-debugging-session","text":"There are two ways you can launch an application in debug mode. from the rightmost toolbar menu you can select the debug target from the dropdown menu or just press the button to re-run the last executed debug target. from the debug targets list you can press the Debug button. At this point, the debugger will fire up and you will see a screen similar to the one show below. You may need to wait a second or two for the debugger to load. It will automatically stop on the first line of code, regardless of whether there is a breakpoint set or not.","title":"Starting a debugging session"},{"location":"project/ide/features/#breakpoints","text":"A breakpoint is a line of code where the debugger will pause code execution if in debug mode. To set a breakpoint you click in the gutter next to the line number. You can remove a breakpoint in the same way. When a breakpoint is set, a red dot will appear on the line.","title":"Breakpoints"},{"location":"project/ide/features/#controlling-the-debugger","text":"Once the debugger stops code execution you can control execution using the buttons at the top of the debug panel. Resume - this tells the debugger to carry on execution without stopping until another breakpoint is encountered. Stop - execution will stop and the debug window will be closed. Step over - the debugger will execute the next line of code and then stop. If the line of code about to be executed is a function, then it will execute the contents of that function but will not stop within it unless the function contains a breakpoint. Step into - the debugger will execute the next line of code and then stop. If the line of code about to be executed is a function, then it will stop on the first line within that function. Step out - the debugger will exit the current function and stop on the next line of the calling function. If the current line is the main entry function of the application then execution will cease but and the debugger will restart automatically.","title":"Controlling the debugger"},{"location":"project/ide/features/#other-features","text":"The debug panel also contains other useful features. Call stack - this shows the parent functions relative to the function that contains the currently executing line of code. Local variables - all local variables of the current function and their current values are automatically displayed. Watches - this allows you to watch a specific variable, and for some languages also expressions, Breakpoints - this lists all the breakpoints currently set in any of your code files. You can disable them by unchecking the boxes. Console - the console has two main functions; it displays status messages from the system in bold and your code can output data there by writing output to the console (for example a print('message') statement in Python).","title":"Other features"},{"location":"project/ide/features/#support-for-the-standard-input-when-debugging","text":"Support for stdin is available for: C/C++ Node.js GDB Node example: function testStdIn() { console.log(\"What is your name?\"); process.stdin.once('data', (chunk) => { let name = chunk.toString(); console.log(\"Hello, \" + name + \"!\"); }); } testStdIn()","title":"Support for the standard input when debugging"},{"location":"project/ide/features/#launching-the-debugger-from-codio-content","text":"It is also possible to launch any debugger configuration from a page. Please click here for details.","title":"Launching the debugger from Codio content"},{"location":"project/ide/features/#junit-testing-framework","text":"Codio provides a simple way to execute JUnit tests for Java in your project. To use JUnit, your project requires Java and so should either use the Java 8 stack or you should have manually installed Java in your box or install from Tools>Install Software . See Installing Software Packages for more information","title":"JUnit testing framework"},{"location":"project/ide/features/#configuration","text":"Open the JUnit dialog Tools->JUnit or use the Shift+Alt+J hotkey. Then configure the Source path is the location of the student source code Test source path is the location of the test cases source folder Library path is the path to any libraries used by the student application Working directory is the path where the compiled student code should execute All paths are relative to the root of the workspace folder. Individual test cases can be added by specifying the paths to a file with JUnit tests in the add test case fields or by dragging and dropping the file into the JUnit tab. Please note that if using multiple cases in an assignment/project, the files for each should all be in separate folders for them to work independently of each other. This applies to student code files as well as the code used for the cases.","title":"Configuration"},{"location":"project/ide/features/#timeout-settings","text":"The default timeout for JUnit execution is 30 seconds but you can change this as required in user or project preferences. You can also change the default hotkey to access JUnit if required as well To ensure that the same settings apply to students may use the project within a class, we would recommend you change this as a project preference","title":"Timeout settings"},{"location":"project/ide/features/#execution","text":"You can Execute the tests from the JUnits Execution tab. Once completed, the results will be listed below. If you publish your project as a unit to a class, the JUnit configurations you set up will be included in the Unit for students.","title":"Execution"},{"location":"project/ide/features/#autocomplete","text":"Autocomplete is supported within HTML, CSS and Javascript files. Just type away and we will automatically show you matches for what you are typing. If you don't like your auto-complete auto-completing, just set the preference automatic_completions = false . Other languages are supported with language server protocol although in such files, autocomplete is not automatically involved. See language server protocol for more information.","title":"Autocomplete"},{"location":"project/ide/features/#html-tags","text":"Auto complete is context sensitive, so you will only be shown Tags that are relevant to your location within the HTML file. For example, if you are not within <body></body> , you will see a much reduced set of options in the auto complete popup. However, place your cursor inside the <body></body> tags and you will see the full list of standard HTML tags.","title":"HTML Tags"},{"location":"project/ide/features/#html-attribtues","text":"If you have entered <a , then invoke auto complete, you are presented with a list of relevant attributes for the <a> tag.","title":"HTML Attribtues"},{"location":"project/ide/features/#tern-javascript","text":"We support intelligent autocomplete using TernJS. Tern also support explicit directives in the .tern-project file you can place in the root of your project. This file looks like this { \"libs\": [ \"browser\", \"jquery\" ], \"loadEagerly\": [ \"importantfile.js\" ], \"plugins\": { \"requirejs\": { \"baseURL\": \"./\", \"paths\": {} } } } You should note that Codio currently only supports autocomplete for the currently opened file as well as items specified in the libs section of the .tern-project file. Please refer to the Tern documentation for full details on how to configure this file.","title":"Tern &amp; Javascript"},{"location":"project/ide/features/#css","text":"Use ctrl+space within your CSS to invoke auto complete.","title":"CSS"},{"location":"project/ide/features/#command-bar","text":"The Command Bar allows you to access almost all of the Codio actions from a searchable list. It is also a great way of looking up keyboard shortcuts without having to explore the menu. You invoke the Command Bar with Tools > Command Bar Cmd+Shift+P (Mac) / Ctrl+Shift+P (PC/Linux) You will then see the following popup dialog. Now just start typing and the list will refine as you type.","title":"Command bar"},{"location":"project/ide/features/#copying-a-project","text":"You can copy any 3rd party public project into your account going to Project>Create Copy . If you are looking at a copied project, then it will look like this. If you are signed into Codio, copying a project will create the copy in your account. If the project owner has allowed box cloning you will also be able to clone the box as well as the project.","title":"Copying a project"},{"location":"project/ide/features/#code-beautification","text":"You can format your code by pressing the keyboard shortcut as defined in the User Preferences . By default, it is key_format_code = Cmd+Shift+B (for a Mac) key_format_code = Ctrl+Shift+B (for anything else) It will indent your code correctly and manage spaces and other cool things. For example, if you start out with this if ('this_is'==/an_example/){of_beautifer();}else{var a=b?(c%d):e[f];} Then after beautifying, you will end up with this if ('this_is' == /an_example/) { of_beautifer(); } else { var a = b ? (c % d) : e[f]; }","title":"Code beautification"},{"location":"project/ide/features/#settings","text":"If you look within the [code-beautifier] section of the Codio Preferences, you will see the various beautification settings available. Don't forget, you can force these at the Project level preferences if you want to have consistently beautified code regardless of who edits your code.","title":"Settings"},{"location":"project/ide/features/#preview","text":"It is important to understand the difference between Static and Dynamic content when using the Preview menu options. Codio provides a configurable menu item for Dynamic/Server Side content (rightmost Codio menu) as well as Static content.","title":"Preview"},{"location":"project/ide/features/#static-content","text":"You can use Preview static options on Static content only (HTML, CSS, JS and text). You can also preview static content on your mobile device easily using Project>QR Code for Preview URL to generate a QR code you can scan with a QR Reader on your device.","title":"Static content"},{"location":"project/ide/features/#dynamic-content","text":"To access files or services that are executed on the server (PHP, Ruby, Node etc.), you need to use the right-most menu option. You can access your server side application by: word1-word2-port.codio.io which will access your box over port 80, which is useful if your corporate firewall blocks ports other than 80 and 443. word1-word2 is an automatically generated subdomain name for your Codio Box. You can configure your application to listen on ports defining the port in the URL, but please be aware than Codio supported a restricted range of ports. Please refer to this section for more details. Read on for information on how to configure your Static and Dynamic preview menus.","title":"Dynamic content"},{"location":"project/ide/features/#instructions","text":"The Preview button lets you preview one or more web pages with a simple button press. Codio creates three default entries in the Preview menu automatically. Project Index - this is the default file to run for your project. It can be set by right-clicking a file in the file tree. This option should only be used to preview static content (typically .html files). For PHP, Ruby etc. you should use the Box URL option. Current File - whichever code file currently has focus. This option should only be used to preview static content (typically .html files). For PHP, Ruby etc. you should use the Box URL option. Box URL - use this option for previewing PHP, Ruby or other server side languages over https. Click here for more information on configuring port access for https. If you right-click a file in the file tree or the Tab, you can also select Preview Static .","title":"Instructions"},{"location":"project/ide/features/#preview-in-a-codio-tab-or-new-browser-tab","text":"In the Preview dropdown menu, you can select one of the following ways to preview Inside Codio : displays the preview in a Codio tab; note that if you are accessing via any port other than Port 80 (the Box URL defaults in the screenshot at the top) then this option will only work if you are using HTTPS as Codio itself runs over HTTPS and the browser will not allow mixed HTTP/HTTPS. See here for more details on using HTTPS. New browser tab : it will open up a new browser tab or window. If you are previewing a private project containing Static content and you have not enabled Allow Private Static Preview option (available only via Project>Settings ) you will be asked to authenticate with your username and password. If you signed up using GitHub/BitBucket/G+ method, a random password is created for your account. Go to Codio>Account and on the Account tab you can set up a password of your own choosing. If though you have enabled this option, then you can preview static content without authentication. A new backend URL will be generated for this purpose that you can then share with anyone else you wish to be able to preview your project. You are also able to regenerate this URL at any time and access using the old URL will no longer function. This only applies to code being previewed over the standard ports 80 and 443. Previewing via any other port will have no authentication, because the code is being served from your application server, which we have no control over but you can add your own authentication. See Apache Password Basic Authentication and HTTP Authentication with PHP for some examples.","title":"Preview in a Codio tab or new browser tab"},{"location":"project/ide/features/#modifying-the-preview-menu","text":"You are free to customize the menu in either of the following ways From the Preview or Run drop down menus (the 2nd and 3rd right most Codio menu items), select Configure... If it exists already, open the .codio file that lives in the root of your project. For details about the various tokens that can be inserted, please refer to Customizing the Run menu . {{domain3000}} is the most important token for the Preview menu . It is replaced by the public url required to access your project over port 80, which is useful if your corporate firewall blocks ports other than 80 and 443. {{domain}} can also be used in the Preview menu. In most cases you will want to add the Port number (default 3000) to your service. e.g \"Box URL\": \"https://{{domain3000}}/\", { // Configure your Run and Preview buttons here. // Run button configuration \"commands\": { \"Node version\": \"node --version\" }, // Preview button configuration \"preview\": { \"Project Index (static)\": \"https://{{domain}}/{{index}}\", \"Current File (static)\": \"https://{{domain}}/{{filepath}}\", \"Box URL\": \"https://{{domain3000}}/\" } } Note that static content is served over Port 80. To access dynamic content you may need to specify the appropriate Port. The full range of Codio {{tokens}} is explained in this section .","title":"Modifying the Preview menu"},{"location":"project/ide/features/#insecure-content-with-in-tab-preview-and-front-end-code-mixed-content","text":"Codio runs over a secure connection using HTTPS, and therefore so does the inline preview. If your code references an external resource (script, font, image, etc.). For example: <script src=\"http://code.angularjs.org/1.1.5/angular.js\"> You will get a browser error indicating that there is some form of insecure or mixed content because you are running in a mixed HTTP/HTTPS mode. This is a restriction of the browser, and cannot be modified easily, or in some browsers, it cannot be modified at all. It is intended to protect you from insecure content. There are 2 ways to avoid this: Modify your external references to use HTTPS. Modify your references to use the 'current protocol' by including '//' without http or https, so <script src=\"//code.angularjs.org/1.1.5/angular.js\"> . If none of the above work, then download the external file, and include and reference it within the Codio project itself.","title":"Insecure Content with In-Tab preview and front-end code (#mixed-content)"},{"location":"project/ide/features/#quick-open","text":"Quick open (fast open) is a great way of opening files without the need to access the file tree. Invoke Quick Open from File > Open File from the menu Cmd+O (Mac) / Ctrl+O (PC/Linux) ... and the quick open dialog will appear. You now start typing the name of a file and as you type, the list will narrow down. You can then select the file you want using the mouse or use the keyboard, pressing Enter on the required file.","title":"Quick open"},{"location":"project/ide/features/#real-time-code-collaboration","text":"If you give other Codio users permissions to access to your project, then Codio allows more than one user to view and edit files simultaneously. Rather like Google Docs, you will be able to see other people editing the file in real time. Because of this collaboration feature, your files are saved in real time and there is no need to press the save button. It just happens automatically. You can change full access to your project from the Project->Permissions menu, but this is risky and we advise strongly against this unless you are sure only one person will be editing the project at a time. The better approach is to use Git. If you are familiar with Git then each person has their own project but they all use Git to synchronize the content with a remote repository hosted on a platform like GitHub or BitBucket.","title":"Real time code collaboration"},{"location":"project/ide/features/#cursor-presence","text":"When accessing another users project where permissions have been granted by the project owner, all active users in a project will be shown with a color in an icon showing in the menu bar when files are being accessed/edited Clicking on the icon will change focus to show what that user is currently editing highlighted in that color and will show the users cursor. Hovering over the icon will show the filename and line currently being edited. This can be very useful if a colleague needs assistance as you can see what they are doing, real time and if you need to demonstrate something to them, they can see what you are doing","title":"Cursor Presence"},{"location":"project/ide/features/#audiovideo-chat-support","text":"When accessing another users project where permissions have been granted by the project owner or for teachers viewing the students assignment, a Call button will show allowing Audio/Video calls and or real time chat.","title":"Audio/Video Chat Support"},{"location":"project/ide/features/#saving-files","text":"There is generally no need to save your files as content is saved automatically. You can still save manually using the Ctrl+S|Cmd+S keyboard shortcut, which most of you should be familiar with, but you don\u2019t need to. If you make mistakes, then use the regular undo ( Ctrl+Z ). Version Control is the best possible way of managing restores and this is comprehensively supported thanks to our Git integration .","title":"Saving files"},{"location":"project/ide/features/#sharing-and-embedding","text":"To share a project or link to a project from a web page, go to the Project > Share menu item.","title":"Sharing and embedding"},{"location":"project/ide/features/#retaining-layout-status-automatically-starting-tutorials","text":"You'll notice the three options at the top of the dialog. When you embed or link to a Codio project you have three ways of the IDE rendering it Project URL : use this URL to display the project with whatever panel and open file configuration happens to be active at the time. This can change all the time depending on what the user happens to have active at any given time. Guide URL : use this URL to display your project with your Guide automatically starting. With Layout : use this URL if you want to always use the precise panel and file configuration that you currently have open. This is the right option if you want to embed it in a blog post or page and a precise configuration should be retained no matter what the project owner is doing with the layout at any given time. You can use either of these basic URLs by copying and pasting. But if you want to use one of our preconfigured button options, read on.","title":"Retaining layout status &amp; automatically starting tutorials"},{"location":"project/ide/features/#markdown-or-html","text":"You can choose between Markdown or HTML by clicking on the HTML or Markdown label. Markdown is great for your GitHub README.md pages. Once you have made your selection you can copy and paste from one of the button options below.","title":"Markdown or HTML"},{"location":"project/ide/features/#suggested-buttons","text":"You will notice that there are two suggested buttons available for Project URL and With Layout modes. Demo : the suggested button for any situation where you want to link to a demo project. A great example would be on your GitHub page, where you want to be able to show a demo of your code as well as allowing the user to browse around the code itself. Show me the code : the suggested button for any situation where you want to link a blog, tutorial or some documentation to a real code sample.","title":"Suggested Buttons"},{"location":"project/ide/introduction/","text":"The Codio IDE sits on top of a Codio Box. A box is a full Ubuntu server. There are a lot of features in both the boxes and the IDE. The documentation contains a reference for all features. Below is a list of commonly used features with links to the documentation pages. Boxes \uf0c1 Accessing the command line and root privileges Installation of software packages using Codio dialog driven installer SSH into a box Autostart services on your box Access to http and https ports Restarting a box Always on boxes that do not shut down when a project is exited Getting code into and out of Codio Linking your box to GitHub and Bitbucket Granting access to other Codio users Allowing others to copy your box's software configuration as well as the workspace Google Docs type access to files Stack management IDE \uf0c1 Preferences for keyboard shortcuts Configuring custom menus Custom code panels and layouts Configuring general IDE preferences","title":"Introduction"},{"location":"project/ide/introduction/#boxes","text":"Accessing the command line and root privileges Installation of software packages using Codio dialog driven installer SSH into a box Autostart services on your box Access to http and https ports Restarting a box Always on boxes that do not shut down when a project is exited Getting code into and out of Codio Linking your box to GitHub and Bitbucket Granting access to other Codio users Allowing others to copy your box's software configuration as well as the workspace Google Docs type access to files Stack management","title":"Boxes"},{"location":"project/ide/introduction/#ide","text":"Preferences for keyboard shortcuts Configuring custom menus Custom code panels and layouts Configuring general IDE preferences","title":"IDE"},{"location":"project/ide/navigation/","text":"No special knowledge is needed to use Codio\u2019s IDE. It's easy enough for beginners who are learning to code. Because it\u2019s web-based, there\u2019s nothing to download, install or update. Exiting the IDE \uf0c1 You can exit the IDE and return to the Dashboard in one of the following ways Select Project > Close from the menu Click on the Gravatar in the top bar Click on your user name in the top bar Editing a file \uf0c1 You can open an existing file from the tree or create a new one from either the File > New File menu or by right-clicking in the file tree. When you open a file, it will appear in a tab in the currently active Panel . Codio will syntax highlight based on the file type. You can see the detected file type in the status bar. Clicking on that file type will allow you to force the syntax highlighting to another language format. Uploading files \uf0c1 You can upload a file into your project in the following ways Right-click within the file tree, taking into account folders Select the File > Upload menu option, having first selected a folder in the file tree. Having selected on of these options, you can upload files by Pressing the browse for files button and selecting your files Dragging files from your destop or file explorer into the dialog. Dragging of a folder and its contents is only supported in Chrome. Important: if you select both files and folders to upload, only the files within the main folder will get uploaded. You will need to upload one folder at a time. Downloading files \uf0c1 You can download individual files from your project. Right-click the file from the file tree, Select the Download option. Adding files \uf0c1 Adding a file is done in one of two ways. First, make sure you have selected the folder within the file tree where you want the file created. Right-click within the file tree, taking into account your folders Select File > New from the menu You should specify both the file name and the extension. Right-clicking also allows you to Copy/Paste existing files. Creating a folder \uf0c1 Creating a new folder is done in one of two ways: Right-click within the file tree, taking into account the existing folder structure Select the File > New folder item from the menu Right-clicking also allows you to Copy/Paste existing folders along with its contents. Deleting a folder \uf0c1 You can delete an entire folder and its content in two ways Right click the folder and select Delete On Macs, press fn+backspace On anything else, press shift+del Warning - Deleting a folder cannot be undone. Dragging files & folders \uf0c1 You can drag individual or multiple files and folders around the filetree. Excercise caution when doing this as drag actions cannot be undone. Right-clicking also allows you to Copy/Paste existing files/folders. Readme info pages \uf0c1 When you open up a project in the IDE, Codio will try to locate a file called readme.md in the root of the project. If it finds one and you have not opened the project beforehand, it will open and display it in 'markdown' mode. If you select the README.md file from the file tree, it will be opened up for editing using markdown. You can switch between markdown, 'preview' and you can run in SplitView mode as highlighted in the above image. The readme.md file should be written in markdown format. Here is a reference for markdown: Daring Fireball - the author of markdown Exporting an app \uf0c1 You can export an app at any point by right-clicking the app in the file tree (click the top level item) or by selecting the Project>Export as Zip menu item from the Project Settings You can also download individual files from your project. See Download Files for more information.","title":"Basic IDE Features"},{"location":"project/ide/navigation/#exiting-the-ide","text":"You can exit the IDE and return to the Dashboard in one of the following ways Select Project > Close from the menu Click on the Gravatar in the top bar Click on your user name in the top bar","title":"Exiting the IDE"},{"location":"project/ide/navigation/#editing-a-file","text":"You can open an existing file from the tree or create a new one from either the File > New File menu or by right-clicking in the file tree. When you open a file, it will appear in a tab in the currently active Panel . Codio will syntax highlight based on the file type. You can see the detected file type in the status bar. Clicking on that file type will allow you to force the syntax highlighting to another language format.","title":"Editing a file"},{"location":"project/ide/navigation/#uploading-files","text":"You can upload a file into your project in the following ways Right-click within the file tree, taking into account folders Select the File > Upload menu option, having first selected a folder in the file tree. Having selected on of these options, you can upload files by Pressing the browse for files button and selecting your files Dragging files from your destop or file explorer into the dialog. Dragging of a folder and its contents is only supported in Chrome. Important: if you select both files and folders to upload, only the files within the main folder will get uploaded. You will need to upload one folder at a time.","title":"Uploading files"},{"location":"project/ide/navigation/#downloading-files","text":"You can download individual files from your project. Right-click the file from the file tree, Select the Download option.","title":"Downloading files"},{"location":"project/ide/navigation/#adding-files","text":"Adding a file is done in one of two ways. First, make sure you have selected the folder within the file tree where you want the file created. Right-click within the file tree, taking into account your folders Select File > New from the menu You should specify both the file name and the extension. Right-clicking also allows you to Copy/Paste existing files.","title":"Adding files"},{"location":"project/ide/navigation/#creating-a-folder","text":"Creating a new folder is done in one of two ways: Right-click within the file tree, taking into account the existing folder structure Select the File > New folder item from the menu Right-clicking also allows you to Copy/Paste existing folders along with its contents.","title":"Creating a folder"},{"location":"project/ide/navigation/#deleting-a-folder","text":"You can delete an entire folder and its content in two ways Right click the folder and select Delete On Macs, press fn+backspace On anything else, press shift+del Warning - Deleting a folder cannot be undone.","title":"Deleting a folder"},{"location":"project/ide/navigation/#dragging-files-folders","text":"You can drag individual or multiple files and folders around the filetree. Excercise caution when doing this as drag actions cannot be undone. Right-clicking also allows you to Copy/Paste existing files/folders.","title":"Dragging files &amp; folders"},{"location":"project/ide/navigation/#readme-info-pages","text":"When you open up a project in the IDE, Codio will try to locate a file called readme.md in the root of the project. If it finds one and you have not opened the project beforehand, it will open and display it in 'markdown' mode. If you select the README.md file from the file tree, it will be opened up for editing using markdown. You can switch between markdown, 'preview' and you can run in SplitView mode as highlighted in the above image. The readme.md file should be written in markdown format. Here is a reference for markdown: Daring Fireball - the author of markdown","title":"Readme info pages"},{"location":"project/ide/navigation/#exporting-an-app","text":"You can export an app at any point by right-clicking the app in the file tree (click the top level item) or by selecting the Project>Export as Zip menu item from the Project Settings You can also download individual files from your project. See Download Files for more information.","title":"Exporting an app"},{"location":"project/ide/panels/","text":"IDE panels let you create any panel configuration you want for both code editing and also other features (such as Git , Deployment etc.). This gives you complete control over the layout of your project. Whenever you leave you project, its precise pane configuration is saved and reloaded when you come back to it. File Tree \uf0c1 The main file tree itself is a tab within a panel. If you look carefully, you will see that it can receive focus and the Filetree text is in a tab. As a result, you can perform the exact same set of operations on it as with any other tab content. It can be moved around, removed, reinstated etc. Panel Focus \uf0c1 If you have multiple panels, the panel you click within gets the focus and can be seen by a white border. If you want to open a file in a different panel, first click on that panel and then open a file from the file tree. Tabs \uf0c1 You can add any number of tabs into a single panel. You are also free to drag tabs around to change their order. Tabs can also be dragged from one panel to another. Panel Management \uf0c1 Tabs can be created from the View > Panels menu or by using hotkeys. The next section explain the panel actions available. Panel actions \uf0c1 Codio lets you manage panels using either hotkeys or from the View > Panels menu. Reset to Default Layout \uf0c1 If you want to quickly go back to a basic IDE layout, then this is easily done. Mac : Cmd+Alt+R Win : Ctrl+Alt+R Menu : View > Layouts > Default Layout Split Vertical \uf0c1 This splits the selected panel by drawing a vertical line down the middle, so you end up with two panels side by side. Mac : Cmd+Alt+V Win : Ctrl+Alt+V Split Horizontal \uf0c1 This splits the selected panel by drawing a horizontal line across the middle, so you end up with one panel on top of the new panel. Mac : Cmd+Alt+H Win : Ctrl+Alt+H Close Panel \uf0c1 This will close the selected panel and all the tabs within it. Mac : Cmd+Alt+C Win : Ctrl+Alt+C Restore File Tree \uf0c1 If you deliberately or inadvertently close the file tree, you can restore it from the View > Open/Show File Tree menu. Switch Tabs \uf0c1 You can cycle between tabs in a panel using the keyboard. Alt+Shift+. takes you to the previous tab and Alt+Shift+. to the next. If you don't like those key bindings, open up your preferences and change the tab_switch_left and tab_switch_right item. Expand tabs full screen \uf0c1 If you have multiple panels open, you may find that you like the arrangement but some of the panels are too small for code editing. Full screen mode is activated by selecting a tab and then pressing (by default) F11 . You can shrink it back into the tab by pressing F11 again. Some Mac users may find that F11 is blocked. You can easily modify the keyboard shortcut in Codio Preferences .","title":"Panels & Tabs"},{"location":"project/ide/panels/#file-tree","text":"The main file tree itself is a tab within a panel. If you look carefully, you will see that it can receive focus and the Filetree text is in a tab. As a result, you can perform the exact same set of operations on it as with any other tab content. It can be moved around, removed, reinstated etc.","title":"File Tree"},{"location":"project/ide/panels/#panel-focus","text":"If you have multiple panels, the panel you click within gets the focus and can be seen by a white border. If you want to open a file in a different panel, first click on that panel and then open a file from the file tree.","title":"Panel Focus"},{"location":"project/ide/panels/#tabs","text":"You can add any number of tabs into a single panel. You are also free to drag tabs around to change their order. Tabs can also be dragged from one panel to another.","title":"Tabs"},{"location":"project/ide/panels/#panel-management","text":"Tabs can be created from the View > Panels menu or by using hotkeys. The next section explain the panel actions available.","title":"Panel Management"},{"location":"project/ide/panels/#panel-actions","text":"Codio lets you manage panels using either hotkeys or from the View > Panels menu.","title":"Panel actions"},{"location":"project/ide/panels/#reset-to-default-layout","text":"If you want to quickly go back to a basic IDE layout, then this is easily done. Mac : Cmd+Alt+R Win : Ctrl+Alt+R Menu : View > Layouts > Default Layout","title":"Reset to Default Layout"},{"location":"project/ide/panels/#split-vertical","text":"This splits the selected panel by drawing a vertical line down the middle, so you end up with two panels side by side. Mac : Cmd+Alt+V Win : Ctrl+Alt+V","title":"Split Vertical"},{"location":"project/ide/panels/#split-horizontal","text":"This splits the selected panel by drawing a horizontal line across the middle, so you end up with one panel on top of the new panel. Mac : Cmd+Alt+H Win : Ctrl+Alt+H","title":"Split Horizontal"},{"location":"project/ide/panels/#close-panel","text":"This will close the selected panel and all the tabs within it. Mac : Cmd+Alt+C Win : Ctrl+Alt+C","title":"Close Panel"},{"location":"project/ide/panels/#restore-file-tree","text":"If you deliberately or inadvertently close the file tree, you can restore it from the View > Open/Show File Tree menu.","title":"Restore File Tree"},{"location":"project/ide/panels/#switch-tabs","text":"You can cycle between tabs in a panel using the keyboard. Alt+Shift+. takes you to the previous tab and Alt+Shift+. to the next. If you don't like those key bindings, open up your preferences and change the tab_switch_left and tab_switch_right item.","title":"Switch Tabs"},{"location":"project/ide/panels/#expand-tabs-full-screen","text":"If you have multiple panels open, you may find that you like the arrangement but some of the panels are too small for code editing. Full screen mode is activated by selecting a tab and then pressing (by default) F11 . You can shrink it back into the tab by pressing F11 again. Some Mac users may find that F11 is blocked. You can easily modify the keyboard shortcut in Codio Preferences .","title":"Expand tabs full screen"},{"location":"project/ide/settings/","text":"Codio allows various Preferences and Settings to be customized. Quick access to the following commonly used settings are available from the View menu Font Size, Tab Size, Soft Tabs, Wrap, Theme Full settings can be accessed and managed as follows Account settings \uf0c1 You can find your account settings in the Codio > Account dropdown menu and from the Gear icon at the bottom of the Dashboard. Account Settings lets you manage the following User profile Password SSH key Github single signon and Codio public key upload BitBucket single signon and Codio public key upload Account deletion User preferences \uf0c1 You can access the User Preferences using the menu item Codio->Preferences->User when you are in a project. User Preferences are the full collection of settings that apply to you, the logged in user. They cover all aspects of Codio usage from code editor settings (tab stops, indentation, colors, fonts etc.) through to hotkey keyboard shortcut mappings. Codio allows you to fully customize all these preferences and the User level and the Project level . Codio does the following to manage the final preferences for the logged in user... Codio defaults are taken Any user overrides are then applied Any project level preferences are finally applied, if any Default Preferences \uf0c1 When you create your account, you will be assigned the default settings. You can see these on the right hand side. These settings are read-only, so you cannot modify them. You can browse through this file to see the complete set of preferences available. Default settings look something like this ;Brace style. ; Type: list. ; Values: ; collapse : collapse ; expand : expand ; end-expand : end-expand brace_style = collapse You can see the setting name ( brace_style with a default value of collapse ) as well as the data type (list) and the available values (in the case of a list). User Preferences \uf0c1 User preferences can be made from the main menu Codio->Preferences->User . User preference overrides are made in left hand pane. When your account is created, this will be empty. Here is an example of user settings that override the Codio defaults ... [editor] theme=eclipse font_size=13 [code-beautifier] indent_level=4 indent_with_tabs=true Keyboard shortcuts & Hotkeys \uf0c1 Within the default settings (right hand pane) you can see how you can map your own keyboard shortcuts. The defaults will display appropriately for Mac or Linux/PC users. If you override these shortcuts in the left hand pane, then these not Mac/PC/Linux aware. If you are a Mac user and you specify Cmd keys, then you should be aware that these will not be accessible from PC/Linux machines. If you need to have your custom shortcuts working on all machines then avoid using Cmd . Using Autocomplete \uf0c1 Be sure to use the Codio autocomplete feature for both the setting name and possible values. Position the cursor within the left pane and press ctrl+space . If you are on the first line of the file, you will see that you only have Sections available. If you are within a Section, you will see all available settings for that section. Having selected a preference, press = and then ctrl+space to bring up the autocomplete window again. Depending on the preference type (list or boolean), you will see the available options for that preference. Searching for preference settings \uf0c1 If you want to find a preference setting in the default pane, the best thing is to search. This will highlight any matching text. Project preferences \uf0c1 Project preferences get the highest priority and are applied over User Settings. To modify these, you should open your project and then choose one of the following From the menu, select Codio->Preferences->Project From the file tree, locate the .settings file As any project preferences will be applied over your user preferences and everyone else's, you should be careful in what settings you place in here. Preferences list \uf0c1 You can set a lot of preferences in Codio. There are various ways of listing and finding preferences and their corresponding keyboard shortcuts. Command Bar lets you find and execute commands and actions. It only shows actionable commands, so things like Font Size, Theme are not available here. Toggle items are, however. Help->Shortcuts and type and search list that shows all keyboard shortcuts Codio->Preferences-> User where a complete list is shown in the Default Preferences area and you can also modify the preferences. To see how to modify your preferences see Codio Preferences Project settings \uf0c1 These settings are found within the IDE (a loaded project) from the Project->Settings menu item and also accessible from the My Projects listing, by clicking the gear icon in the right side of the listing. Project settings, as distinct from Project preferences, are used to store the following details about the project Project Name Project Description Public/Private Allow Box Cloning (subscription required) Enable your Box as Always-On Allow Private Static Preview. See Preview for more information. NB Only available from Project>Settings Protect Dynamic Ports. Disable to allow preview of the box to anyone who knows the box url. NB Only available from Project>Settings Delete your Project Export the project as a Zip file. Stack Settings - details of the stack used in your project. Forwarding Settings - details of how to SSH into your box. See here for more. Project permissions \uf0c1 You modify permissions by selecting Permissions from the Project dropdown menu. By default: Anyone can see a public project No-one can edit a public project (but they can copy it) No-one can see a private project Changing permissions allows you to give the following access permissions to Users and/or Groups. Read - View the project only Write - Edit the project Admin - Users can access the terminal and the deployment screens. Care should be taken as this entails security risk given that an Admin user has full access to keys and any other private data that might be stored on the Box. Adding/Removing a User \uf0c1 To add a new user, start typing the user name in the text field. When you find the user, click Add and that user will be added to the list of users below. You can remove a user from the list by clicking the 'x' button.","title":"Settings"},{"location":"project/ide/settings/#account-settings","text":"You can find your account settings in the Codio > Account dropdown menu and from the Gear icon at the bottom of the Dashboard. Account Settings lets you manage the following User profile Password SSH key Github single signon and Codio public key upload BitBucket single signon and Codio public key upload Account deletion","title":"Account settings"},{"location":"project/ide/settings/#user-preferences","text":"You can access the User Preferences using the menu item Codio->Preferences->User when you are in a project. User Preferences are the full collection of settings that apply to you, the logged in user. They cover all aspects of Codio usage from code editor settings (tab stops, indentation, colors, fonts etc.) through to hotkey keyboard shortcut mappings. Codio allows you to fully customize all these preferences and the User level and the Project level . Codio does the following to manage the final preferences for the logged in user... Codio defaults are taken Any user overrides are then applied Any project level preferences are finally applied, if any","title":"User preferences"},{"location":"project/ide/settings/#default-preferences","text":"When you create your account, you will be assigned the default settings. You can see these on the right hand side. These settings are read-only, so you cannot modify them. You can browse through this file to see the complete set of preferences available. Default settings look something like this ;Brace style. ; Type: list. ; Values: ; collapse : collapse ; expand : expand ; end-expand : end-expand brace_style = collapse You can see the setting name ( brace_style with a default value of collapse ) as well as the data type (list) and the available values (in the case of a list).","title":"Default Preferences"},{"location":"project/ide/settings/#user-preferences_1","text":"User preferences can be made from the main menu Codio->Preferences->User . User preference overrides are made in left hand pane. When your account is created, this will be empty. Here is an example of user settings that override the Codio defaults ... [editor] theme=eclipse font_size=13 [code-beautifier] indent_level=4 indent_with_tabs=true","title":"User Preferences"},{"location":"project/ide/settings/#keyboard-shortcuts-hotkeys","text":"Within the default settings (right hand pane) you can see how you can map your own keyboard shortcuts. The defaults will display appropriately for Mac or Linux/PC users. If you override these shortcuts in the left hand pane, then these not Mac/PC/Linux aware. If you are a Mac user and you specify Cmd keys, then you should be aware that these will not be accessible from PC/Linux machines. If you need to have your custom shortcuts working on all machines then avoid using Cmd .","title":"Keyboard shortcuts &amp; Hotkeys"},{"location":"project/ide/settings/#using-autocomplete","text":"Be sure to use the Codio autocomplete feature for both the setting name and possible values. Position the cursor within the left pane and press ctrl+space . If you are on the first line of the file, you will see that you only have Sections available. If you are within a Section, you will see all available settings for that section. Having selected a preference, press = and then ctrl+space to bring up the autocomplete window again. Depending on the preference type (list or boolean), you will see the available options for that preference.","title":"Using Autocomplete"},{"location":"project/ide/settings/#searching-for-preference-settings","text":"If you want to find a preference setting in the default pane, the best thing is to search. This will highlight any matching text.","title":"Searching for preference settings"},{"location":"project/ide/settings/#project-preferences","text":"Project preferences get the highest priority and are applied over User Settings. To modify these, you should open your project and then choose one of the following From the menu, select Codio->Preferences->Project From the file tree, locate the .settings file As any project preferences will be applied over your user preferences and everyone else's, you should be careful in what settings you place in here.","title":"Project preferences"},{"location":"project/ide/settings/#preferences-list","text":"You can set a lot of preferences in Codio. There are various ways of listing and finding preferences and their corresponding keyboard shortcuts. Command Bar lets you find and execute commands and actions. It only shows actionable commands, so things like Font Size, Theme are not available here. Toggle items are, however. Help->Shortcuts and type and search list that shows all keyboard shortcuts Codio->Preferences-> User where a complete list is shown in the Default Preferences area and you can also modify the preferences. To see how to modify your preferences see Codio Preferences","title":"Preferences list"},{"location":"project/ide/settings/#project-settings","text":"These settings are found within the IDE (a loaded project) from the Project->Settings menu item and also accessible from the My Projects listing, by clicking the gear icon in the right side of the listing. Project settings, as distinct from Project preferences, are used to store the following details about the project Project Name Project Description Public/Private Allow Box Cloning (subscription required) Enable your Box as Always-On Allow Private Static Preview. See Preview for more information. NB Only available from Project>Settings Protect Dynamic Ports. Disable to allow preview of the box to anyone who knows the box url. NB Only available from Project>Settings Delete your Project Export the project as a Zip file. Stack Settings - details of the stack used in your project. Forwarding Settings - details of how to SSH into your box. See here for more.","title":"Project settings"},{"location":"project/ide/settings/#project-permissions","text":"You modify permissions by selecting Permissions from the Project dropdown menu. By default: Anyone can see a public project No-one can edit a public project (but they can copy it) No-one can see a private project Changing permissions allows you to give the following access permissions to Users and/or Groups. Read - View the project only Write - Edit the project Admin - Users can access the terminal and the deployment screens. Care should be taken as this entails security risk given that an Admin user has full access to keys and any other private data that might be stored on the Box.","title":"Project permissions"},{"location":"project/ide/settings/#addingremoving-a-user","text":"To add a new user, start typing the user name in the text field. When you find the user, click Add and that user will be added to the list of users below. You can remove a user from the list by clicking the 'x' button.","title":"Adding/Removing a User"},{"location":"project/ide/tools/deployment/","text":"You do not to need to deploy when you are developing your project. Front-end code is automatically served up over Port 80. Access to back-end code (PHP, Ruby etc.) is done by accessing your Box . You can deploy from the command line ( Tools->Terminal menu), but Codio has a great Deployment Manager that lets you deploy all or any part of your project, with a single click ,to a custom 'deployment target'. We support deployment to the following platforms. FTP SFTP RSYNC Nodejitsu Generic Git deployment Create/manage a target \uf0c1 The Manage Targets options are accessed via Tools > Deployment > Manage Targets menu. All Deployment dialogs will be displayed in the currently active Panel . If you have not yet created any deployment targets then you will be prompted to create one. In the Deployment Targets dialog, you can: list all defined deployment targets modify existing targets create new targets Destination \uf0c1 The Destination drop down specifies the type of the target you are deploying to. Currently we support the following destinations (click on each one to find out about its associated parameters) FTP RYSNC SFTP Nodejitsu Git Base path field \uf0c1 You will notice that all deployment targets, except Codio, have a Preview Base Path field. It is important to complete this field for all target types involving remote servers so that the Preview option knows how to access your project once deployed. For example, you might deploy to a remote server at a folder location /home/fmay/www . Accessing this application via a browser, however, depends on how you configure your remote web server. So it could be http://123.456.789 or fmay.mydomain.com is the correct location. Please see the Preview section for more information. Public keys for remote servers \uf0c1 When you are setting up a remote server, Codio can automatically install the Codio public key on your remote server, which saves a tedious manual process. You can copy a key from the Codio > Account dialog as described here You can set up an SSH Connection and use the Connection Manger to do the same thing. Terminal access to remotes \uf0c1 If you are working with remote servers, you may find it useful to be able to SSH into your remote server. Codio supports the ability to open an SSH terminal in a Codio tab. Click here for further details. Deploying to a target \uf0c1 There are three ways to deploy projects. Tools->Deployment->Deploy menu \uf0c1 This let's you deploy to any of your deployment targets you created in Manage Targets . You are shown a log if any errors occur. Right Click in the file tree \uf0c1 You can deploy an individual file or folder by right-clicking in the file tree. Command Line \uf0c1 You can use the command line directly but you can also add your custom deployment actions by modifying the Run Menu . Rsync target type \uf0c1 Rsync is a great way of working with remote servers. It behaves much the same as the SFTP deployment type but rather than deploying all files, it deploys only files that have changed. You can use a password and/or a public key for authentication. Base Path \uf0c1 We recommend you set the base path field for remote servers as described here . This will be useful when using the Preview feature. Public Key Authentication \uf0c1 Codio auto-generates a public key that is uniquely associated with your user account. You can find this public key in the User Settings dialog . You should make sure that this public key is added to your remote server. Protocol \uf0c1 There are two options available SSH : (recommended) uses an SSH connection to transfer RSYNC Daemon : this requires you to set up an rsync daemon on the remote server. This is a more complex procedure and so should generally be avoided. Specifying a Port \uf0c1 If you want to override the default SFTP port (22) then you can add the port number to the domain name as shown below mydomain.com:1234 User Name \uf0c1 You will need to supply a valid user name for your remote server regardless of the authentication method. Password Authentication \uf0c1 If you are using a public key then you can leave the password field empty. If you do not want to use a public key, then you will need to use a password for authentication. Simply provide the details in the Codio dialog. Delete Missing Folders \uf0c1 This removes any folders from the remote server that are not present in the Codio project. FTP target type \uf0c1 The FTP target type allows you to deploy to any FTP server. You supply the usual FTP access details. Base Path \uf0c1 We recommend you set the base path field for remote servers as described here . This will be useful when using the Preview feature. Specifying a Port \uf0c1 If you want to override the default FTP port (21) then you can add the port number to the domain name as shown below mydomain.com:1234 Transfer Mode \uf0c1 FTP can operate in 'Active' or 'Passive' mode. Codio will attempt to connect in passive mode by default. If it fails, then it will automatically try active mode. If that fails then you will get an error. However, if you get an error then try changing the setting to Active. This will ensure that Codio will only try to connect in active mode without a risk of confusing the target server. SFTP target type \uf0c1 The SFTP target type allows you to deploy to any SFTP server. You can use a password and/or a public key for authentication. Base Path \uf0c1 We recommend you set the base path field for remote servers as described here . This will be useful when using the Preview feature. Public Key Authentication \uf0c1 Codio auto-generates a public key that is uniquely associated with your user account. You can find this public key in the User Settings dialog . You should make sure that this public key is added to your remote server. Specifying a Port \uf0c1 If you want to override the default SFTP port (22) then you can add the port number to the domain name as shown below mydomain.com:1234 User Name \uf0c1 You will need to supply a valid user name for your remote server regardless of the authentication method. Password Authentication \uf0c1 If you are using a public key then you can leave the password field empty. If you do not want to use a public key, then you will need to use a password for authentication. Simply provide the details in the Codio dialog. You can use both a public key and a password if you like. Empty Destination Path \uf0c1 Be very careful when checking this box. It will brutally remove all content from specified location on the remote server before the deploy starts. Nodejitsu target type \uf0c1 Nodejitsu is a high quality third party Node.js production platform, so we built a dedicated deployment target that makes life as easy as possible. You will need to sign up for a Nodejitsu account before you use it. Select Nodejitsu from the Destination drop down and then make sure you either provide an API Token in the highlighted field or just press the Generate button and we'll create one for you. Base Path \uf0c1 We recommend you set the base path field for remote servers as described here . This will be useful when using the Preview feature. That's all you will need to do. You're now ready to deploy. Git target type \uf0c1 The Git target type allows you to deploy to any remote Git server. You supply the usual Git access details. If you prefer, you can deploy to any remote Git server using the command line. Simply access your Box Terminal . Existing Remote \uf0c1 If you imported your project from a remote Git repo or used git add remote from the command line, you will see existing remotes listed in the Remote dropdown box and you can select it. Adding a Remote \uf0c1 You can add a new remote by selecting Add remote ... from the dropdown. You can then enter your remote details. Committed Files \uf0c1 Codio will only do the equivalent of git push remote-name current-branch and so you need to have staged and committed your files first from the Command Line. Deployment history \uf0c1 Each time you do a deploy, a history entry is created so you have a full record of deploys and who did them. If you have not selected any specific targets, then all deploys across all targets will be shown. If you select the history button for a specific target, then the history for that specific target is shown. Deploying specific files & folders \uf0c1 If you are using a 3rd party hosting provider that does not support RSYNC (the recommended approach), then you can avoid Codio deploying your entire project by only deploying the files or folders that you specify. Select any files and folders from the file tree and then use the right-click menu to deploy them. All defined deployment targets will be listed in the submenu. Click the target you want to deploy to.","title":"Deployment"},{"location":"project/ide/tools/deployment/#createmanage-a-target","text":"The Manage Targets options are accessed via Tools > Deployment > Manage Targets menu. All Deployment dialogs will be displayed in the currently active Panel . If you have not yet created any deployment targets then you will be prompted to create one. In the Deployment Targets dialog, you can: list all defined deployment targets modify existing targets create new targets","title":"Create/manage a target"},{"location":"project/ide/tools/deployment/#destination","text":"The Destination drop down specifies the type of the target you are deploying to. Currently we support the following destinations (click on each one to find out about its associated parameters) FTP RYSNC SFTP Nodejitsu Git","title":"Destination"},{"location":"project/ide/tools/deployment/#base-path-field","text":"You will notice that all deployment targets, except Codio, have a Preview Base Path field. It is important to complete this field for all target types involving remote servers so that the Preview option knows how to access your project once deployed. For example, you might deploy to a remote server at a folder location /home/fmay/www . Accessing this application via a browser, however, depends on how you configure your remote web server. So it could be http://123.456.789 or fmay.mydomain.com is the correct location. Please see the Preview section for more information.","title":"Base path field"},{"location":"project/ide/tools/deployment/#public-keys-for-remote-servers","text":"When you are setting up a remote server, Codio can automatically install the Codio public key on your remote server, which saves a tedious manual process. You can copy a key from the Codio > Account dialog as described here You can set up an SSH Connection and use the Connection Manger to do the same thing.","title":"Public keys for remote servers"},{"location":"project/ide/tools/deployment/#terminal-access-to-remotes","text":"If you are working with remote servers, you may find it useful to be able to SSH into your remote server. Codio supports the ability to open an SSH terminal in a Codio tab. Click here for further details.","title":"Terminal access to remotes"},{"location":"project/ide/tools/deployment/#deploying-to-a-target","text":"There are three ways to deploy projects.","title":"Deploying to a target"},{"location":"project/ide/tools/deployment/#tools-deployment-deploy-menu","text":"This let's you deploy to any of your deployment targets you created in Manage Targets . You are shown a log if any errors occur.","title":"Tools-&gt;Deployment-&gt;Deploy menu"},{"location":"project/ide/tools/deployment/#right-click-in-the-file-tree","text":"You can deploy an individual file or folder by right-clicking in the file tree.","title":"Right Click in the file tree"},{"location":"project/ide/tools/deployment/#command-line","text":"You can use the command line directly but you can also add your custom deployment actions by modifying the Run Menu .","title":"Command Line"},{"location":"project/ide/tools/deployment/#rsync-target-type","text":"Rsync is a great way of working with remote servers. It behaves much the same as the SFTP deployment type but rather than deploying all files, it deploys only files that have changed. You can use a password and/or a public key for authentication.","title":"Rsync target type"},{"location":"project/ide/tools/deployment/#base-path","text":"We recommend you set the base path field for remote servers as described here . This will be useful when using the Preview feature.","title":"Base Path"},{"location":"project/ide/tools/deployment/#public-key-authentication","text":"Codio auto-generates a public key that is uniquely associated with your user account. You can find this public key in the User Settings dialog . You should make sure that this public key is added to your remote server.","title":"Public Key Authentication"},{"location":"project/ide/tools/deployment/#protocol","text":"There are two options available SSH : (recommended) uses an SSH connection to transfer RSYNC Daemon : this requires you to set up an rsync daemon on the remote server. This is a more complex procedure and so should generally be avoided.","title":"Protocol"},{"location":"project/ide/tools/deployment/#specifying-a-port","text":"If you want to override the default SFTP port (22) then you can add the port number to the domain name as shown below mydomain.com:1234","title":"Specifying a Port"},{"location":"project/ide/tools/deployment/#user-name","text":"You will need to supply a valid user name for your remote server regardless of the authentication method.","title":"User Name"},{"location":"project/ide/tools/deployment/#password-authentication","text":"If you are using a public key then you can leave the password field empty. If you do not want to use a public key, then you will need to use a password for authentication. Simply provide the details in the Codio dialog.","title":"Password Authentication"},{"location":"project/ide/tools/deployment/#delete-missing-folders","text":"This removes any folders from the remote server that are not present in the Codio project.","title":"Delete Missing Folders"},{"location":"project/ide/tools/deployment/#ftp-target-type","text":"The FTP target type allows you to deploy to any FTP server. You supply the usual FTP access details.","title":"FTP target type"},{"location":"project/ide/tools/deployment/#base-path_1","text":"We recommend you set the base path field for remote servers as described here . This will be useful when using the Preview feature.","title":"Base Path"},{"location":"project/ide/tools/deployment/#specifying-a-port_1","text":"If you want to override the default FTP port (21) then you can add the port number to the domain name as shown below mydomain.com:1234","title":"Specifying a Port"},{"location":"project/ide/tools/deployment/#transfer-mode","text":"FTP can operate in 'Active' or 'Passive' mode. Codio will attempt to connect in passive mode by default. If it fails, then it will automatically try active mode. If that fails then you will get an error. However, if you get an error then try changing the setting to Active. This will ensure that Codio will only try to connect in active mode without a risk of confusing the target server.","title":"Transfer Mode"},{"location":"project/ide/tools/deployment/#sftp-target-type","text":"The SFTP target type allows you to deploy to any SFTP server. You can use a password and/or a public key for authentication.","title":"SFTP target type"},{"location":"project/ide/tools/deployment/#base-path_2","text":"We recommend you set the base path field for remote servers as described here . This will be useful when using the Preview feature.","title":"Base Path"},{"location":"project/ide/tools/deployment/#public-key-authentication_1","text":"Codio auto-generates a public key that is uniquely associated with your user account. You can find this public key in the User Settings dialog . You should make sure that this public key is added to your remote server.","title":"Public Key Authentication"},{"location":"project/ide/tools/deployment/#specifying-a-port_2","text":"If you want to override the default SFTP port (22) then you can add the port number to the domain name as shown below mydomain.com:1234","title":"Specifying a Port"},{"location":"project/ide/tools/deployment/#user-name_1","text":"You will need to supply a valid user name for your remote server regardless of the authentication method.","title":"User Name"},{"location":"project/ide/tools/deployment/#password-authentication_1","text":"If you are using a public key then you can leave the password field empty. If you do not want to use a public key, then you will need to use a password for authentication. Simply provide the details in the Codio dialog. You can use both a public key and a password if you like.","title":"Password Authentication"},{"location":"project/ide/tools/deployment/#empty-destination-path","text":"Be very careful when checking this box. It will brutally remove all content from specified location on the remote server before the deploy starts.","title":"Empty Destination Path"},{"location":"project/ide/tools/deployment/#nodejitsu-target-type","text":"Nodejitsu is a high quality third party Node.js production platform, so we built a dedicated deployment target that makes life as easy as possible. You will need to sign up for a Nodejitsu account before you use it. Select Nodejitsu from the Destination drop down and then make sure you either provide an API Token in the highlighted field or just press the Generate button and we'll create one for you.","title":"Nodejitsu target type"},{"location":"project/ide/tools/deployment/#base-path_3","text":"We recommend you set the base path field for remote servers as described here . This will be useful when using the Preview feature. That's all you will need to do. You're now ready to deploy.","title":"Base Path"},{"location":"project/ide/tools/deployment/#git-target-type","text":"The Git target type allows you to deploy to any remote Git server. You supply the usual Git access details. If you prefer, you can deploy to any remote Git server using the command line. Simply access your Box Terminal .","title":"Git target type"},{"location":"project/ide/tools/deployment/#existing-remote","text":"If you imported your project from a remote Git repo or used git add remote from the command line, you will see existing remotes listed in the Remote dropdown box and you can select it.","title":"Existing Remote"},{"location":"project/ide/tools/deployment/#adding-a-remote","text":"You can add a new remote by selecting Add remote ... from the dropdown. You can then enter your remote details.","title":"Adding a Remote"},{"location":"project/ide/tools/deployment/#committed-files","text":"Codio will only do the equivalent of git push remote-name current-branch and so you need to have staged and committed your files first from the Command Line.","title":"Committed Files"},{"location":"project/ide/tools/deployment/#deployment-history","text":"Each time you do a deploy, a history entry is created so you have a full record of deploys and who did them. If you have not selected any specific targets, then all deploys across all targets will be shown. If you select the history button for a specific target, then the history for that specific target is shown.","title":"Deployment history"},{"location":"project/ide/tools/deployment/#deploying-specific-files-folders","text":"If you are using a 3rd party hosting provider that does not support RSYNC (the recommended approach), then you can avoid Codio deploying your entire project by only deploying the files or folders that you specify. Select any files and folders from the file tree and then use the right-click menu to deploy them. All defined deployment targets will be listed in the submenu. Click the target you want to deploy to.","title":"Deploying specific files &amp; folders"},{"location":"project/ide/tools/ghapi/","text":"The Git Hub API can be used with Git Hub Actions to automate the publication of assignments. You are able to create your assignments in Codio, connect the box to your GH repo and when merging your branch to master will be able to automatically publish the Codio assignment. Set up GitHub API Integration \uf0c1 Create your API integration in the Organisation->Integrations area. This is only available to users with Admin rights. The name of the integration is added to the version history record. There is no limit to the number you can create so you can use the ID's in your individual GH repo or use in your GH account to apply to all repos API Integration information \uf0c1 Click on the created integration to view the Client and Secret ID's where you can copy to clipboard to add into your GH account The secret ID can be regenerated if required to manage/control access to publishing the codio assignment. Adding ID's to GitHub account \uf0c1 In your repo go to Settings -> Secrets and create Client ID and Secret ID copying in from your Codio integration. To create your secrets for the Codespace (ie applies for all repos in the account and available for all collaborators), click on Actions-> Codespaces or to create just for the individual repo, click on New repository secret and create your secret keys. We recommend you name each key including Client/Secret to identify which key is which and use other names to identify if it is just for this repo or for all repos in the codespace Implementing workflow actions \uf0c1 From your repository on GitHub, create a new file in the .github/workflows directory with the extension .yml and configure for use. See Quickstart for GitHub actions Example .yml file for publishing project based assignments \uf0c1 name: codio-publish # Run this workflow every time a new commit pushed to your repository branch noted below on: push: branches: - master jobs: build: # Set the type of machine to run on - do not change this. Any warnings you may see in workflow actions can be ignored runs-on: ubuntu-latest steps: - name: Log into Codio id: codio-login uses: codio/codio-auth-action@master with: # Use the ID's from the secrets below client-id: ${{ secrets.CODIO_DEMO_CLIENT_ID }} secret-id: ${{ secrets.CODIO_DEMO_SECRET_ID }} # Checks out a copy of your repository on the ubuntu-latest machine - name: Checkout uses: actions/checkout@v1 - name: Cleanup run: rm -rf .github README.md # Recommend you use tar.gz . zip is allowed but it doesn't handle permissions correctly. See example below on how zip can be used - name: Archive run: tar czf ../data.tar.gz . - name: Publish to Codio uses: codio/codio-assignment-publish-action@master with: token: ${{ steps.codio-login.outputs.token }} # The course and assignment id of the codio assignment (see below) course-id: 004d0c98d345bfa262bfecdd9b510a0d assignment-id: dad1b5a4f6a3d5354047e9992ce4c346 zip: ../data.tar.gz changelog: ${{ github.event.head_commit.message }} The course/assignment id's are found from the URL in your browser when opening the assignment when on the Teach tab Example .yml file for publishing book/book based assignments \uf0c1 name: codio-publish # Run this workflow every time a new commit pushed to your repository branch noted below. Any warnings you may see in workflow actions can be ignored on: push: branches: - master jobs: build: # Set the type of machine to run on - do not change this runs-on: ubuntu-latest steps: - name: Log into Codio id: codio-login uses: codio/codio-auth-action@master with: # Use the ID's from the secrets below client-id: ${{ secrets.CODIO_DEMO_CLIENT_ID }} secret-id: ${{ secrets.CODIO_DEMO_SECRET_ID }} # Set the domain you are working on - codio.com or codio.co.uk domain: codio.com # Checks out a copy of your repository on the ubuntu-latest machine - name: Checkout uses: actions/checkout@v1 - name: Cleanup run: rm -rf .github README.md # Showing how zip can be used but we recommend you use tar.gz (see above example) . zip is allowed but it doesn't handle permissions correctly - name: Install Zip uses: montudor/action-zip@v0.1.1 - name: Zip run: zip -qq -r ../data.zip . - name: Publish to Codio uses: codio/codio-book-publish-action@master with: token: ${{ steps.codio-login.outputs.token }} # The id of the codio book book-id: 5777e7e3b2ce90d2325e923d981a0a06 # Set the domain you are workiing on - codio.com or codio.co.uk domain: codio.com # If using tar.gz see example code above zip: ../data.zip changelog: ${{ github.event.head_commit.message }} - name: Update Codio Course uses: codio/codio-course-book-update-action@master with: token: ${{ steps.codio-login.outputs.token }} # The codio course id course-id: 5d2627e6b643887c072eea40 # The id of the codio book - see above book-id: 5777e7e3b2ce90d2325e923d981a0a06 # Set the domain you are working on - codio.com or codio.co.uk domain: codio.com The book id's are found from the URL in your browser when viewing the book properties The course id's are found (see above), from the URL in your browser when opening one of the assignments when on Teach tab Working with GH API \uf0c1 The basic premise is that when updating your Codio assignment, you connect to your GH repo and create a new branch. Make your required changes and push to your repo. When you then merge your branch to the master branch, the GH workflow runs and publishes your Codio assignment. Progress/errors can be reviewed from the Actions area in your repo It is recommended when you merge, that you select the option Squash and Merge as you can combine all your merge request\u2019s commits into one and retain a clean history. Working with GH API in staging \uf0c1 Your .yml file is commonly set up to execute against merges into the master branch but can be changed to execute when other branches merged and the codio assignment to be updated can be managed by reviewing/changing the course/assignment ids","title":"Git Hub API"},{"location":"project/ide/tools/ghapi/#set-up-github-api-integration","text":"Create your API integration in the Organisation->Integrations area. This is only available to users with Admin rights. The name of the integration is added to the version history record. There is no limit to the number you can create so you can use the ID's in your individual GH repo or use in your GH account to apply to all repos","title":"Set up GitHub API Integration"},{"location":"project/ide/tools/ghapi/#api-integration-information","text":"Click on the created integration to view the Client and Secret ID's where you can copy to clipboard to add into your GH account The secret ID can be regenerated if required to manage/control access to publishing the codio assignment.","title":"API Integration information"},{"location":"project/ide/tools/ghapi/#adding-ids-to-github-account","text":"In your repo go to Settings -> Secrets and create Client ID and Secret ID copying in from your Codio integration. To create your secrets for the Codespace (ie applies for all repos in the account and available for all collaborators), click on Actions-> Codespaces or to create just for the individual repo, click on New repository secret and create your secret keys. We recommend you name each key including Client/Secret to identify which key is which and use other names to identify if it is just for this repo or for all repos in the codespace","title":"Adding ID's to GitHub account"},{"location":"project/ide/tools/ghapi/#implementing-workflow-actions","text":"From your repository on GitHub, create a new file in the .github/workflows directory with the extension .yml and configure for use. See Quickstart for GitHub actions","title":"Implementing workflow actions"},{"location":"project/ide/tools/ghapi/#example-yml-file-for-publishing-project-based-assignments","text":"name: codio-publish # Run this workflow every time a new commit pushed to your repository branch noted below on: push: branches: - master jobs: build: # Set the type of machine to run on - do not change this. Any warnings you may see in workflow actions can be ignored runs-on: ubuntu-latest steps: - name: Log into Codio id: codio-login uses: codio/codio-auth-action@master with: # Use the ID's from the secrets below client-id: ${{ secrets.CODIO_DEMO_CLIENT_ID }} secret-id: ${{ secrets.CODIO_DEMO_SECRET_ID }} # Checks out a copy of your repository on the ubuntu-latest machine - name: Checkout uses: actions/checkout@v1 - name: Cleanup run: rm -rf .github README.md # Recommend you use tar.gz . zip is allowed but it doesn't handle permissions correctly. See example below on how zip can be used - name: Archive run: tar czf ../data.tar.gz . - name: Publish to Codio uses: codio/codio-assignment-publish-action@master with: token: ${{ steps.codio-login.outputs.token }} # The course and assignment id of the codio assignment (see below) course-id: 004d0c98d345bfa262bfecdd9b510a0d assignment-id: dad1b5a4f6a3d5354047e9992ce4c346 zip: ../data.tar.gz changelog: ${{ github.event.head_commit.message }} The course/assignment id's are found from the URL in your browser when opening the assignment when on the Teach tab","title":"Example .yml file for publishing project based assignments"},{"location":"project/ide/tools/ghapi/#example-yml-file-for-publishing-bookbook-based-assignments","text":"name: codio-publish # Run this workflow every time a new commit pushed to your repository branch noted below. Any warnings you may see in workflow actions can be ignored on: push: branches: - master jobs: build: # Set the type of machine to run on - do not change this runs-on: ubuntu-latest steps: - name: Log into Codio id: codio-login uses: codio/codio-auth-action@master with: # Use the ID's from the secrets below client-id: ${{ secrets.CODIO_DEMO_CLIENT_ID }} secret-id: ${{ secrets.CODIO_DEMO_SECRET_ID }} # Set the domain you are working on - codio.com or codio.co.uk domain: codio.com # Checks out a copy of your repository on the ubuntu-latest machine - name: Checkout uses: actions/checkout@v1 - name: Cleanup run: rm -rf .github README.md # Showing how zip can be used but we recommend you use tar.gz (see above example) . zip is allowed but it doesn't handle permissions correctly - name: Install Zip uses: montudor/action-zip@v0.1.1 - name: Zip run: zip -qq -r ../data.zip . - name: Publish to Codio uses: codio/codio-book-publish-action@master with: token: ${{ steps.codio-login.outputs.token }} # The id of the codio book book-id: 5777e7e3b2ce90d2325e923d981a0a06 # Set the domain you are workiing on - codio.com or codio.co.uk domain: codio.com # If using tar.gz see example code above zip: ../data.zip changelog: ${{ github.event.head_commit.message }} - name: Update Codio Course uses: codio/codio-course-book-update-action@master with: token: ${{ steps.codio-login.outputs.token }} # The codio course id course-id: 5d2627e6b643887c072eea40 # The id of the codio book - see above book-id: 5777e7e3b2ce90d2325e923d981a0a06 # Set the domain you are working on - codio.com or codio.co.uk domain: codio.com The book id's are found from the URL in your browser when viewing the book properties The course id's are found (see above), from the URL in your browser when opening one of the assignments when on Teach tab","title":"Example .yml file for publishing book/book based assignments"},{"location":"project/ide/tools/ghapi/#working-with-gh-api","text":"The basic premise is that when updating your Codio assignment, you connect to your GH repo and create a new branch. Make your required changes and push to your repo. When you then merge your branch to the master branch, the GH workflow runs and publishes your Codio assignment. Progress/errors can be reviewed from the Actions area in your repo It is recommended when you merge, that you select the option Squash and Merge as you can combine all your merge request\u2019s commits into one and retain a clean history.","title":"Working with GH API"},{"location":"project/ide/tools/ghapi/#working-with-gh-api-in-staging","text":"Your .yml file is commonly set up to execute against merges into the master branch but can be changed to execute when other branches merged and the codio assignment to be updated can be managed by reviewing/changing the course/assignment ids","title":"Working with GH API in staging"},{"location":"project/ide/tools/guides/","text":"Codio Guide is our tutorial authoring tool. Click here for more information.","title":"Guides"},{"location":"project/ide/tools/phonegap/","text":"You access Codio's Phonegap:Build features from the Tools->Phonegap menu. Our Phonegap support provides a comfortable integration with Adobe's Phonegap Build platform. You should first create an account at http://build.phonegap.com . Note: At the time of writing, the PhoneGap:Build free plan supports a maximum project size of 50MB and 1000MB or 1GB for paid plans. Account plan details can be found here . Authentication \uf0c1 To access Phonegap:Build from Codio you should set up an Authentication token. This is available in your Phonegap:Build account. Go to your Phonegap account details and select the Client Application tab. If you do not see an authentication token, click Reset to obtain one. In Codio, select the Change Token button and paste in your key. The config.xml file \uf0c1 To build apps at Phonegap:Build, a config.xml file is required in the root of your project. If one does not yet exist, Codio will ask if you want to create one. This will create a default file for you and associated image resources for Splash Screen and Icon images in pg-images folder. Your config.xml needs to contain specific lines for each platform you want to target. For example, to build for iOS, Android and Windows Phone you need to include <gap:platforms> <gap:platform name=\"ios\" /> <gap:platform name=\"android\" /> <gap:platform name=\"winphone\" /> </gap:platforms> If you only want to build for one platform (for example Android) you would only need to include <gap:platforms> <gap:platform name=\"android\" /> </gap:platforms> Useful resources and references for the config.xml file can be found on the Phonegap site: config.xml Custom preferences Icons and Splash Screens Phonegap:Build plugins Build \uf0c1 When you are ready to build your app, you press the Build button in the Phonegap Build Area section. Make sure you have created and configured your config.xml file . You should have set up your code signing keys in your Phonegap:Build account (more on keys below) and you should select which keys you wish to use for each platform you defined in your <gap:platforms> tag in the config.xml file. Keys are configured from the Account > Edit Setting > Signing Keys tab in your Phonegap:Build account. A bit about Keys \uf0c1 Phonegap has very good documentation on how to generate your keys as well as how to configure your Phonegap:Build account. Android iOS Note If you do not see anything in the Keys area, review your <gap:platforms> content in the config.xml file Android \uf0c1 To build and test, you don't need to do anything. You can leave the field empty . If you want to deploy a codesigned App, (which you will need to deploy via Google Play) then you need to generate a proper Certificate. iOS \uf0c1 Apple requires both a Codesigning Certificate and a Mobile Provisioning Profile. You need different ones for development and for App Store deployment. Windows \uf0c1 Windows does not require any certificates to build. Build Settings \uf0c1 Private Application \uf0c1 Depending on the Phonegap:Build account plan you have, you can build a number of private applications. Check this box if you want to build as a private application. See here for more information on Phonegap:Build plans Enable Debug \uf0c1 Checking this box enables Phonegap Build debugging to allow you to use standard Web Inspector tools available from the PhoneGap Build site to debug PhoneGap apps while they are running on your device. For more information on this see Remote Debugging Tools Enable Hydrates \uf0c1 Checking this box enables Phonegap:Build Hydration. Hydration is a tool that has two main benefits: Compilation times are improved significantly. Updates are pushed directly to the application installed on a device. For more information on this see Hydration Initiate Build \uf0c1 When you have selected keys and any settings, simply press the Build button. Codio now passes all information through to the Phonegap:Build platform, where the build is run in the background. If the status does not complete in a reasonable time, you can do one of the following go to your Phonegap:Build account and click the main Apps tab, where you should see your app and its status check the status of the Phonegap:Build service here Download your App \uf0c1 When the build is completed you can deploy the app to your device in the following ways. download the native file and manually upload to your device scan the QR code to download from Phonegap:Build to your device","title":"Phonegap"},{"location":"project/ide/tools/phonegap/#authentication","text":"To access Phonegap:Build from Codio you should set up an Authentication token. This is available in your Phonegap:Build account. Go to your Phonegap account details and select the Client Application tab. If you do not see an authentication token, click Reset to obtain one. In Codio, select the Change Token button and paste in your key.","title":"Authentication"},{"location":"project/ide/tools/phonegap/#the-configxml-file","text":"To build apps at Phonegap:Build, a config.xml file is required in the root of your project. If one does not yet exist, Codio will ask if you want to create one. This will create a default file for you and associated image resources for Splash Screen and Icon images in pg-images folder. Your config.xml needs to contain specific lines for each platform you want to target. For example, to build for iOS, Android and Windows Phone you need to include <gap:platforms> <gap:platform name=\"ios\" /> <gap:platform name=\"android\" /> <gap:platform name=\"winphone\" /> </gap:platforms> If you only want to build for one platform (for example Android) you would only need to include <gap:platforms> <gap:platform name=\"android\" /> </gap:platforms> Useful resources and references for the config.xml file can be found on the Phonegap site: config.xml Custom preferences Icons and Splash Screens Phonegap:Build plugins","title":"The config.xml file"},{"location":"project/ide/tools/phonegap/#build","text":"When you are ready to build your app, you press the Build button in the Phonegap Build Area section. Make sure you have created and configured your config.xml file . You should have set up your code signing keys in your Phonegap:Build account (more on keys below) and you should select which keys you wish to use for each platform you defined in your <gap:platforms> tag in the config.xml file. Keys are configured from the Account > Edit Setting > Signing Keys tab in your Phonegap:Build account.","title":"Build"},{"location":"project/ide/tools/phonegap/#a-bit-about-keys","text":"Phonegap has very good documentation on how to generate your keys as well as how to configure your Phonegap:Build account. Android iOS Note If you do not see anything in the Keys area, review your <gap:platforms> content in the config.xml file","title":"A bit about Keys"},{"location":"project/ide/tools/phonegap/#android","text":"To build and test, you don't need to do anything. You can leave the field empty . If you want to deploy a codesigned App, (which you will need to deploy via Google Play) then you need to generate a proper Certificate.","title":"Android"},{"location":"project/ide/tools/phonegap/#ios","text":"Apple requires both a Codesigning Certificate and a Mobile Provisioning Profile. You need different ones for development and for App Store deployment.","title":"iOS"},{"location":"project/ide/tools/phonegap/#windows","text":"Windows does not require any certificates to build.","title":"Windows"},{"location":"project/ide/tools/phonegap/#build-settings","text":"","title":"Build Settings"},{"location":"project/ide/tools/phonegap/#private-application","text":"Depending on the Phonegap:Build account plan you have, you can build a number of private applications. Check this box if you want to build as a private application. See here for more information on Phonegap:Build plans","title":"Private Application"},{"location":"project/ide/tools/phonegap/#enable-debug","text":"Checking this box enables Phonegap Build debugging to allow you to use standard Web Inspector tools available from the PhoneGap Build site to debug PhoneGap apps while they are running on your device. For more information on this see Remote Debugging Tools","title":"Enable Debug"},{"location":"project/ide/tools/phonegap/#enable-hydrates","text":"Checking this box enables Phonegap:Build Hydration. Hydration is a tool that has two main benefits: Compilation times are improved significantly. Updates are pushed directly to the application installed on a device. For more information on this see Hydration","title":"Enable Hydrates"},{"location":"project/ide/tools/phonegap/#initiate-build","text":"When you have selected keys and any settings, simply press the Build button. Codio now passes all information through to the Phonegap:Build platform, where the build is run in the background. If the status does not complete in a reasonable time, you can do one of the following go to your Phonegap:Build account and click the main Apps tab, where you should see your app and its status check the status of the Phonegap:Build service here","title":"Initiate Build"},{"location":"project/ide/tools/phonegap/#download-your-app","text":"When the build is completed you can deploy the app to your device in the following ways. download the native file and manually upload to your device scan the QR code to download from Phonegap:Build to your device","title":"Download your App"},{"location":"project/ide/tools/ssh/","text":"Important : if you are looking for information on how to connect to your project 'Box' using the terminal/console window, then please read about Boxes . Codio provides the ability to connect to remote servers via SSH. You can open multiple connections and manage connections through the SSH Connection Manager . A Quick Connect option lets you access remote servers on an ad hoc basis. The SSH Connection Manager lets you store connections for quick access later. You can do the same things you can do in a regular terminal window, including running text editors like Nano etc. Copy & Paste operations \uf0c1 Behavior varies between Macs and other operating systems. Using the right-click menu should work on all systems. Mac \uf0c1 Copy and paste both works as expected with cmd+c and cmd+v . Windows, Linux \uf0c1 Pasting is done as expected with ctrl+v but copying ( ctrl+c ) cannot be done as it conflicts with the kill process command, so you should use the right-click menu. SSH connection manager \uf0c1 You can manage your SSH connections by going to the Tools > SSH > Connection Manager menu item. The Connection Manager lists all previously created connections, which you can then connect to or edit. Creating and Editing Connections \uf0c1 Press the Create New button to create a new connection or the pencil icon to edit an existing connection. You enter the remote server credentials : user name, hostname and optionally port. You can also specify a friendly name that will appear in the connections list. Public Keys \uf0c1 If you want to add your Codio public key to the remote server, press the key icon in the main Connection Manager listing. This saves you from having to upload a public key manually and means you won't need to enter a password to authenticate. If you do want to add your public key manually, please refer to the Codio public key documentation. Making a connection \uf0c1 To make a connection, you click on the leftmost icon, which opens the connection in a new tab. Quick connect \uf0c1 The Quick Connect Option ( Tools > SSH > Quick Connect ) lets you access remote servers on an ad hoc basis. You just enter the remote server credentials : user name, hostname and optionally port. Specify a friendly name if you want to save the connection details. If you do not want to install a public key remotely, then Codio will connect to the remote server, which will prompt you for a password. Connect \uf0c1 When you press Connect, a tab will open up in the current panel and off you go. The connection details will not be saved. Connect & Save \uf0c1 This connects but also saves the connection details to the SSH Connection Manager . Public Keys \uf0c1 If you want to add your Codio public key to the remote server, then you should Connect & Save. Then go to the SSH Connection Manager and press the public key button as described here .","title":"Remote SSH Terminal Access"},{"location":"project/ide/tools/ssh/#copy-paste-operations","text":"Behavior varies between Macs and other operating systems. Using the right-click menu should work on all systems.","title":"Copy &amp; Paste operations"},{"location":"project/ide/tools/ssh/#mac","text":"Copy and paste both works as expected with cmd+c and cmd+v .","title":"Mac"},{"location":"project/ide/tools/ssh/#windows-linux","text":"Pasting is done as expected with ctrl+v but copying ( ctrl+c ) cannot be done as it conflicts with the kill process command, so you should use the right-click menu.","title":"Windows, Linux"},{"location":"project/ide/tools/ssh/#ssh-connection-manager","text":"You can manage your SSH connections by going to the Tools > SSH > Connection Manager menu item. The Connection Manager lists all previously created connections, which you can then connect to or edit.","title":"SSH connection manager"},{"location":"project/ide/tools/ssh/#creating-and-editing-connections","text":"Press the Create New button to create a new connection or the pencil icon to edit an existing connection. You enter the remote server credentials : user name, hostname and optionally port. You can also specify a friendly name that will appear in the connections list.","title":"Creating and Editing Connections"},{"location":"project/ide/tools/ssh/#public-keys","text":"If you want to add your Codio public key to the remote server, press the key icon in the main Connection Manager listing. This saves you from having to upload a public key manually and means you won't need to enter a password to authenticate. If you do want to add your public key manually, please refer to the Codio public key documentation.","title":"Public Keys"},{"location":"project/ide/tools/ssh/#making-a-connection","text":"To make a connection, you click on the leftmost icon, which opens the connection in a new tab.","title":"Making a connection"},{"location":"project/ide/tools/ssh/#quick-connect","text":"The Quick Connect Option ( Tools > SSH > Quick Connect ) lets you access remote servers on an ad hoc basis. You just enter the remote server credentials : user name, hostname and optionally port. Specify a friendly name if you want to save the connection details. If you do not want to install a public key remotely, then Codio will connect to the remote server, which will prompt you for a password.","title":"Quick connect"},{"location":"project/ide/tools/ssh/#connect","text":"When you press Connect, a tab will open up in the current panel and off you go. The connection details will not be saved.","title":"Connect"},{"location":"project/ide/tools/ssh/#connect-save","text":"This connects but also saves the connection details to the SSH Connection Manager .","title":"Connect &amp; Save"},{"location":"project/ide/tools/ssh/#public-keys_1","text":"If you want to add your Codio public key to the remote server, then you should Connect & Save. Then go to the SSH Connection Manager and press the public key button as described here .","title":"Public Keys"},{"location":"resources/Codio-Resources/","text":"Video: Assigning Codio Resources Select Resources from the dashboard. You will see a list of courses recommended by Codio. Select a course, you can then see details of the content in the module. To use this content in your course, you can either: click the Add to my Account button(s) and it will be added to your Codio account. use the course Share Code to create the course in your account. Please note, if working on codio.co.uk, you need to use the Share Code Overview of Codio Resources and Share Code \uf0c1 For more detail, click on the link. Engineering Software as a Service (projects only) Share Code: 42NJ-RXEA-YVN6 Armando Fox and David Patterson's popular courseware seamlessly integrated for students and zero setup for instructors. CS: Introduction in Java Introduction to Computer Science in Java with native Codio content promoting engagement and active learning with fully auto-graded assessments and minimal text. CS: Introduction in Python Share Code: DWG4-9PHU-2X4W Introduction to Computer Science in Python with native Codio content promoting engagement and active learning with fully auto-graded assessments and minimal text. Linux Command Line Interface Share Code: Q9R3-G474-TWC9 A brief introduction to useful linux commands that make a great supplement for a variety of courses. MySQL Share Code: Q4M4-WYP9-P7CL An introduction to databases using SQL with native Codio content containing fully auto-graded assessments. Applied Cryptography Share Code: F9UF-VDDW-K9HC An introduction to symmetric key, and public key cryptography as well as hashing and digital signatures. Introduction to Programming Flode Share Code: 3UDU-EVG6-NT4C Ease into programming concepts from numeric expressions to arrays with Codio's flowcharting tool: Flode . Introduction to Programming JavaScript Share Code: YR43-2Q4C-EVRA Quickly cover programming basics in JavaScript from numeric expressions to error handling with native Codio content containing fully auto-graded assessments. Introduction to Programming Python Share Code: TDND-RR7X-H3VT Quickly cover programming basics in Python from numeric expressions to error handling with native Codio content containing fully auto-graded assessments. Introduction to Programming Java Share Code: FNXL-3Y33-2EC9 Quickly cover programming basics in Java from numeric expressions to error handling with native Codio content containing fully auto-graded assessments. An Introduction to Web Development Share Code: 7TMC-M2TN-VE7F Learn how to bring together HTML, CSS, and JavaScript to create web pages. Computational Thinking - Create a Maze Game - Javascript Share Code: 727V-2DHC-MEQQ A fun JavaScript project covering computational thinking concepts as well as introductory programming topics with fully auto-graded assessments. Computational Thinking - Create a Maze Game = Python Share Code: A2MK-QLKK-LDX9 A fun Python project covering computational thinking concepts as well as introductory programming topics with fully auto-graded assessments. Crunch Share Code: TMUA-YGQY-GDV6 A student-friendly way to teach Assembly (based on Little Man Computer) allowing students to try low-level commands within their browser. For more details on Crunch, click here R for Data Science: Import, Tidy, Transform, Visualize, and Model Data Share Code: WM9N-QV92-7QCW Hadley Wickham and Garrett Grolemund's text paired with RStudio for a seamless learning experience. Think C: How to Think like a Computer Scientist Allen Downey's How to Think Like a Computer Scientist text ported to C by Thomas Scheffler. Think Java: How to Think like a Computer Scientist Share Code: HCGH-67PP-UF9Q Allen Downey and Chris Mayfield's How to Think Like a Computer Scientist text in Java. Think Python: How to Think like a Computer Scientist Share Code: TW2N-TCVZ-64NP Allen Downey's How to Think Like a Computer Scientist text in Python with additional lab content. Think Data Structures: Algorithms and Information Retrieval in Java Share Code: GLEM-39J2-UYRD Allen Downey's Think Data Structures: Algorithms and information retrieval in Java text. CS: Introduction in C++ Share Code: YCLD-L7XW-3ZXK Introduction to Computer Science in C++ with native Codio content promoting engagement and active learning with fully auto-graded assessments and minimal text. CS: Objects in Python Share Code: 4HPN-GDUJ-V6AL Introduction to Objects in Python with native Codio content promoting engagement and active learning with fully auto-graded assessments and minimal text. CS: Objects in C++ Share Code: RGHT-FL7F-PE2E Introduction to Objects in C++ with native Codio content promoting engagement and active learning with fully auto-graded assessments and minimal text.","title":"Codio Resources"},{"location":"resources/Codio-Resources/#overview-of-codio-resources-and-share-code","text":"For more detail, click on the link. Engineering Software as a Service (projects only) Share Code: 42NJ-RXEA-YVN6 Armando Fox and David Patterson's popular courseware seamlessly integrated for students and zero setup for instructors. CS: Introduction in Java Introduction to Computer Science in Java with native Codio content promoting engagement and active learning with fully auto-graded assessments and minimal text. CS: Introduction in Python Share Code: DWG4-9PHU-2X4W Introduction to Computer Science in Python with native Codio content promoting engagement and active learning with fully auto-graded assessments and minimal text. Linux Command Line Interface Share Code: Q9R3-G474-TWC9 A brief introduction to useful linux commands that make a great supplement for a variety of courses. MySQL Share Code: Q4M4-WYP9-P7CL An introduction to databases using SQL with native Codio content containing fully auto-graded assessments. Applied Cryptography Share Code: F9UF-VDDW-K9HC An introduction to symmetric key, and public key cryptography as well as hashing and digital signatures. Introduction to Programming Flode Share Code: 3UDU-EVG6-NT4C Ease into programming concepts from numeric expressions to arrays with Codio's flowcharting tool: Flode . Introduction to Programming JavaScript Share Code: YR43-2Q4C-EVRA Quickly cover programming basics in JavaScript from numeric expressions to error handling with native Codio content containing fully auto-graded assessments. Introduction to Programming Python Share Code: TDND-RR7X-H3VT Quickly cover programming basics in Python from numeric expressions to error handling with native Codio content containing fully auto-graded assessments. Introduction to Programming Java Share Code: FNXL-3Y33-2EC9 Quickly cover programming basics in Java from numeric expressions to error handling with native Codio content containing fully auto-graded assessments. An Introduction to Web Development Share Code: 7TMC-M2TN-VE7F Learn how to bring together HTML, CSS, and JavaScript to create web pages. Computational Thinking - Create a Maze Game - Javascript Share Code: 727V-2DHC-MEQQ A fun JavaScript project covering computational thinking concepts as well as introductory programming topics with fully auto-graded assessments. Computational Thinking - Create a Maze Game = Python Share Code: A2MK-QLKK-LDX9 A fun Python project covering computational thinking concepts as well as introductory programming topics with fully auto-graded assessments. Crunch Share Code: TMUA-YGQY-GDV6 A student-friendly way to teach Assembly (based on Little Man Computer) allowing students to try low-level commands within their browser. For more details on Crunch, click here R for Data Science: Import, Tidy, Transform, Visualize, and Model Data Share Code: WM9N-QV92-7QCW Hadley Wickham and Garrett Grolemund's text paired with RStudio for a seamless learning experience. Think C: How to Think like a Computer Scientist Allen Downey's How to Think Like a Computer Scientist text ported to C by Thomas Scheffler. Think Java: How to Think like a Computer Scientist Share Code: HCGH-67PP-UF9Q Allen Downey and Chris Mayfield's How to Think Like a Computer Scientist text in Java. Think Python: How to Think like a Computer Scientist Share Code: TW2N-TCVZ-64NP Allen Downey's How to Think Like a Computer Scientist text in Python with additional lab content. Think Data Structures: Algorithms and Information Retrieval in Java Share Code: GLEM-39J2-UYRD Allen Downey's Think Data Structures: Algorithms and information retrieval in Java text. CS: Introduction in C++ Share Code: YCLD-L7XW-3ZXK Introduction to Computer Science in C++ with native Codio content promoting engagement and active learning with fully auto-graded assessments and minimal text. CS: Objects in Python Share Code: 4HPN-GDUJ-V6AL Introduction to Objects in Python with native Codio content promoting engagement and active learning with fully auto-graded assessments and minimal text. CS: Objects in C++ Share Code: RGHT-FL7F-PE2E Introduction to Objects in C++ with native Codio content promoting engagement and active learning with fully auto-graded assessments and minimal text.","title":"Overview of Codio Resources and Share Code"},{"location":"resources/changelog/","text":"This page contains a list of recent updates made to the Codio platform. We update Codio regularly, so this page should provide information to help you. We do not report small bug fixes or issues that affect individual users, who we will notify directly. [I] = Update or improvement [F] = New feature May 2021 [I] [18th] : Add extra credit field to csv downloads of students work [F] [13th] : Add support for Pyret [I] [12th] : Remove students ability to grant permissions to other students in assignments [F] [11th] : Add support for realtime Audio/Video/Chat between active users in assignments/projects [I] [ 6th] : Fix problem with top menu hiding when students mark assignments as complete [I] [ 6th] : Improve Close Tabs to allow option to retain terminal session from previous sections [F] [ 5th] : Add support for teachers to enable a writable copy of students work at any time [F] [ 4th] : Add support for Participation Grading April 2021 [F] [30th] : Add support to integrate with Google Classrooms [I] [27th] : Update handling of guides opening in teachers working copies [I] [27th] : Fix problem with Junit test output [F] [21st] : Add support for Pencil Code [I] [21st] : Improve [PDF export](/courses/classes/#pdf allowing all selected assignments to be compiled into separate or one PDF file [I] [21st] : Add SQL query grading support to Standard Code Test [I] [20th] : Add support to allow anonymous LTI connections so students name/email addresses not passed to Codio [I] [14th] : Improve handling of student grading for teachers [F] [14th] : Add support for teachers to allow students to reset assignments in the course [I] [12th] : Improve playing of video files within projects [I] [ 8th] : Fix problem with handling of variables in debugger [I] [ 7th] : Improve Test Autograde Script to allow control of which autograded assessments to test [I] [ 6th] : Fix issue allowing students to access assignments before start date where Visibility on Disabled = Read Only [I] [ 6th] : Add support for custom feedback message handling in Junit advanced code test [I] [ 6th] : Improve publish assignment dialog [F] [ 1st] : Added support for Jeroo March 2021 [F] [29th] : Add support to extend time for individual students when a time limit is enabled for exam proctoring [I] [25th] : Add ability to filter by assessments not used and delete all together [I] [25th] : Fix problem adding complex assessments from assessment library [I] [23rd] : Improve visibility for teachers to preview course assignments [I] [22nd] : Fix formatting in Download CSV [I] [22nd] : Fix problem with Beautify [I] [17th] : Fix problem with handling of LTI Course Copy when user creating parent course is removed from organisation [I] [17th] : Fix problem with Teach & Edit tabs not synching location when changing tabs [F] [15th] : Add ability to send Notification emails to students when either not started, started but not completed and also when grade feedback is available for them to view [I] [12th] : Add feature for teachers to obtain PDF export of guides content for course assignments [I] [11th] : Update Teacher Dashboard view separating 'Assignments' to 'Teach' & 'Edit' tabs [I] [ 5th] : Add filter tag to allow search by name in Assessment Library [I] [ 4th] : Restrict students from signing up by token or invite URL where course is LTI enabled. See Adding students to a course for more information [I] [ 4th] : Increase limit allowed on uploading files [F] [ 2nd] : Add ability for students to earn extra credit on assignments [I] [ 1st] : Add shortcut for publishing assignments in courses [I] [ 1st] : Update handling of Forward Only Navigation function to warn students of un-answered assessments before allowing them to proceed to next page. They will have the option to review their answers or leave un-answered if they wish February 2021 [I] [17th] : Update handling of Autograde Free Text assessment feedback [I] [ 2nd] : Allow teachers to make changes to students completed/read-only assignments [F] [ 2nd] : Allow cloning/sharing of courses to be restricted January 2021 [I] [25th] : Add configuration option for nbgrader/jupyter units to allow ClearSolutions.code_stub to be used [I] [25th] : Fix problem with teacher guidance not showing when previewing assignment in course [I] [22nd] : Add support for ungraded assessments and for survey usage [I] [19th] : Update Desktop App for new student dashboard [I] [18th] : Add Student Path field for python unit tests [I] [18th] : Add prolog syntax highlighting support [F] [18th] : Added Git Hub API that can be used with Git Hub Actions to automate the publication of assignments. [I] [15th] : Add support for HTML to be used in creating student consent form [F] [11th] : New Student Dashboard released with ability for students to switch back to old dashboard if they wish for next month [I] [ 5th] : Fix issue with teachers seeing different standard code test output to students [I] [ 5th] : Improve standard and advanced code tests allowing files to be dragged into command/pre-exec command fields and automatically populate with relevant execution code [I] [ 5th] : Improve handling of Multiple Choice questions to recalculate score for students where initially published with incorrect settings December 2020 [I] [24th] : Add support to show images in Fill in the Blank drop down option, and also in distractor field [I] [23rd] : Add support for partial points in Multiple Choice assessment [I] [22nd] : Update course creation changing to show button consistent with creating new projects/stacks/packs [I] [18th] : Improve handling of adding new teachers to organisation and/or course as Read-Only teachers [I] [18th] : Fix problem with UnitTestGrader type of Parsons Puzzle assessment not showing correctly in student's assignment [I] [18th] : Improve handling for saving of Scratch projects [I] [16th] : Add support for partial points with Fill in the Blanks assessment allowing student to get % of total points based on % of blanks they get correct [I] [ 2nd] : Improve handling of publishing Jupyter Notebook assignments to better update students version if already started November 2020 [F] [27th] : Add ability to Revert to earlier versions [I] [25th] : Improve handling of self-invoicing [I] [24th] : Update handling of Parsons Puzzle assessments to always show check/submit button irrespective of submit button surpressed in guides [I] [23rd] : Add ability to randomise answers to students for Multiple Choice assessment [I] [19th] : Fix problem with final grades in disabled assignments [I] [19th] : Fix problem with time shown in assessments being for when assignment opened, not when assessment run [I] [19th] : Improve handling Master/Child to make pulling into child courses simpler [I] [17th] : Improve handling of export course data for large courses [I] [17th] : Update handling of adjusting deadline for assignments past end time where not previously started [I] [12th] : Fix issue with submission of assessments in completed assignment when in disabled state [I] [11th] : Improve switch to self pay dialogs [I] [10th] : Improve handling of course view remembering module collapsed state on next visit [I] [10th] : Fix issue with org owners not seeing student count in all courses [I] [10th] : Improve handling of partial point grading [I] [ 9th] : Update handling of changes to grading rubrics for students grandes [F] [ 5th] : Add support for code test assessments output box to be expanded [I] [ 2nd] : Fix problem with MCQ answer colours showing incorrectly [I] [ 2nd] : Fix problem in Junit test parsing October 2020 [I] [30th] : Update handling of code blocks in guides [I] [30th] : Fix problem with courses not showing correctly when switching between teacher and student views [F] [30th] : Scratch added [I] [29th] : Fix problem with LTI navigation to large codio courses [I] [23rd] : Fix issue with Mark as Completed button in Guides not updating promptly [I] [22nd] : Fix problem with unittest not correctly parsing test outputs [F] [22nd] : Add configuration option for nbgrader/jupyter units to allow custom grading scripts with jupyter [F] [20th] : Add feature to allow teachers to control receipt of autograde failure notifications in a course [I] [20th] : Update user identification handling in LMS based on LMS userID to allow users to change email address in their LMS and continue to use same Codio account [I] [19th] : Add 'Parent Course' section to Module browser when adding new module into a course [I] [19th] : Add copy to clipboard icon to Code Blocks [I] [14th] : Update handling of filters on assessments listings [I] [ 7th] : Further updates to improve handling of course dashboard loading [I] [ 7th] : Add ability to reorder answers for Multiple choice question assessment [I] [ 5th] : Improve handling of dragging/dropping assignments into modules to place where dropped [I] [ 5th] : Update handling of changing passwords to require existing password [I] [ 2nd] : Update handling of course dashboard loading to improve loading times on slow/intermittent internet connections [I] [ 1st] : Add ability to seach list of assessments in a project by name,point or order in guides. September 2020 [I] [29th] : Fix issue with Desktop App when connecting to assignments in courses [F] [29th] : Add distractors for Fill in the blank assessment when showing possible values [F] [25th] : Add Time Limit option for exam proctoring [I] [25th] : Allow deadlines to be adjusted forward by days/hours and minutes [I] [23rd] : Update handling of visibility on completed to require students to change status of assignment from completed to be able to continue working [I] [18th] : Update handling of visibility on disabled for assignments not started before end date of course [F] [16th] : Add ability to more easily generate items for Standard Code test [I] [16th] : Fix problem with Code Commenting where guides layout protected [I] [15th] : Improvements for Code Commenting to remember toggled state and to show new comments in real time [I] [15th] : Improve handling of .svg files in books [I] [14th] : Fix problem with Fill in the Blank assessment points allocation [I] [14th] : Improve handling of <pre> tags used in Fill in the Blank assessments [I] [14th] : Improve presentation of adjusted deadline details to students and teachers [I] [ 9th] : Further improvements in handling of adjusting deadlines past end date of assignments [I] [ 3rd] : Improve handling of adjusting deadlines past end date of assignments [I] [ 3rd] : Improve course assignment list handling remembering scroll location from previous visit [I] [ 3rd] : Add additional student sorting options at assignment level [I] [ 3rd] : Improve handling for resolving Code comments [I] [ 1st] : Add support for 'pull' in child courses for books August 2020 [I] [27th] : Improve handling of teacher/student switching [I] [26th] : Add support for grading rubric items with Grade Book assessment [I] [26th] : Add support for Anonymous Grading [I] [21st] : Improve information shown to students from teacher grading [I] [19th] : Improve accesssibility in clickable buttons/icons for screen readers [I] [17th] : Improve access to Code Comments within Guides settings [I] [13th] : Fix problem with FITB assessment overflowing callout area [I] [12th] : Fix issue with downloading user access data [I] [12th] : Improve rubric handling allowing word wrapping and multiple lines [I] [12th] : Fix problem with guides edit button [I] [12th] : Improve view of modules when adding existing into courses [I] [11th] : Add Code Commenting support [I] [10th] : Fix problem selecting book based content in assignment [I] [ 5th] : Add support for LTI Roles [I] [ 5th] : Add support for new files to be added to existing assignments July 2020 [I] [31st] : UI/icon changes for guides editor [I] [30th] : Improve handling of autograde scripts where error causes autograde URL not to be called [I] [29th] : Add ability to easily amend assessment points for multiple assessments [I] [28th] : Accessibility improvements [I] [21st] : Add support for partial points in standard code test assessment [F] [21st] : Add cursor presence to show other users activity in project/assignment in real time [I] [16th] : UI updates for Assessment Library [I] [14th] : Fix issue switching Guides to edit mode [I] [14th] : Improve password management advising users if password used has been leaked [I] [14th] : Fix issues opening 'Shared with me' projects [I] [14th] : Hide .codio file in assignments without guides [I] [14th] : Enlarge the grade field on course-assignment screen [I] [14th] : Fix issue with Parsons puzzle [I] [ 8th] : Add support for AST Parser for the Processing Language [I] [ 8th] : Improve handling of script output for free text auto assessment if script passes [I] [ 8th] : Improve handling of incompatible assessments when updating course assignments [I] [ 8th] : Remove http preview option [I] [ 7th] : Allow updating to the latest version of the book for all assignments in a course [I] [ 3rd] : Update guides table of contents, moving buttons to the top [I] [ 3rd] : Fix problem with release grade settings not passing correctly when cloning course [I] [ 3rd] : Add example using collapsible content in guides [I] [ 2nd] : Update default points for assessments from 1 to allow better implementation of partial points [F] [ 2nd] : Add support for Regular Expressions in Fill in the Blank assessments [I] [ 1st] : Fix issue with roles when inviting teachers to organisation [I] [ 1st] : Fix layout of expand/collapse arrows shown in dialogs June 2020 [I] [30th] : Improve handling of multiple incorrect login password attempts [I] [30th] : Update naming of code playback tabs [I] [22nd] : Improve handling of teachers accessing students completed assignments [I] [22nd] : Enhance Autograde scripting functions. See here and here for more information and examples [I] [22nd] : Improve loading of large courses lists [I] [22nd] : Optimise messaging for teachers when accessing students assignments [I] [22nd] : Fix issue with Project settings values of ALLOW PRIVATE STATIC PREVIEW and PROTECT DYNAMIC PORTS params not being correctly applied in student's assignment project [I] [19th] : Update Parsons Puzzle assessment [I] [17th] : Allow users to be teacher and student in same course [F] [15th] : Code Playback allowing teachers to playback students steps [I] [15th] : Improve messages in empty archived courses [I] [12th] : Make jupyter lock cell editing flag value as true by default [I] [11th] : Fix problem with loading course listings [I] [10th] : Update logic handling renewal dates for self invoicing [I] [10th] : Replace fonts.com and typekit.net fonts with Google fonts [I] [ 9th] : Fix problem when deleting last page in guides [I] [ 8th] : Fix problem with guides fonts [I] [ 5th] : Improve naming of preview tabs [I] [ 5th] : Fix problem for teachers opening students jupyter notebook files [I] [ 3rd] : Fix issue with formatting of .md files downloaded from projects/assignments [I] [ 3rd] : Fix problem with jupyter assignment feedback for multiple submissions and/or publishes [I] [ 1st] : Fix problem with deployment functions [I] [ 1st] : Update behaviour of 4 panel guides layout May 2020 [I] [30th] : Update content in $CODIO_AUTOGRADE_ENV variable [I] [29th] : Fix problem running autograde scripts on archived assignments [I] [28th] : Improve messaging when errors in autograde scripts [I] [28th] : Update message shown when users try to access others projects without permission [I] [27th] : Fix issue with incorrect redirection when pressing enter on assessment name creation [I] [27th] : Fix problem with 3 blue dot menu not being accessible on disabled assignments [I] [27th] : Update search in documentation so Enter key no longer clears search field [I] [27th] : Fix problem with assignment of partial points [I] [27th] : Improve messaging for autograde script issues [I] [27th] : Fix problem with visibility on completed [I] [26th] : Fix issue where users can be added twice to project permissions [I] [26th] : Update students assignments on next run if Gigabox settings are changed in the course [I] [26th] : Improve message when users credentials not passed [I] [22nd] : Improve messaging for students creating account from LMS [I] [21st] : Upgrade user password requirements - min length to 8 symbols [I] [21st] : Update messaging if user tries to open url of existing project of another user without permission [I] [21st] : Fix problem with Blockly blocks in assignments [I] [19th] : Fix problem accessing assignments from test student accounts [I] [18th] : Fix problem creating similarly named assignments in different coursers [I] [15th] : Improve Pin function to allow multiple assignments to be pinned [I] [15th] : Recommended stacks updated to use Ubuntu 18.04 [F] [15th] : Codio Feedback released where you can raise new feature requests and vote/comment on ideas raised by others [I] [14th] : Fix problem with lack of context options when mouse right click on file tree root [I] [14th] : Accessibility fixes/improvements [I] [13th] : Fix problem with release grade switch showing incorrect status [F] [09th] : Add Exam Mode Options for course assignments [I] [08th] : Update handling of archived courses showing in LMS's [I] [07th] : Fix problem with searching/finding users/orgs/groups when adding permissions to projects/assignments [F] [07th] : Update project/assignment creation to include configured .codio file and sample files [I] [06th] : Update default Readme.md files created with new projects/assignments [I] [06th] : Improve presentation of Debug menu April 2020 [I] [30th] : Improve error messaging in Parsons Puzzle [I] [24th] : Fix issue deleting tabs saved in course [I] [22nd] : Improve handling of LMS roles passing to Codio [F] [21st] : Add function to allow teachers to preview assignments in courses [F] [20th] : Add function to Add new assignments from Master to Child courses [F] [14th] : Show assignment end date (where set) to students in their recently used cards in their dashboard [I] [14th] : Fix issue with mark as completed button not showing on frame reload [I] [14th] : Update message to students when trying to start assignments in LTI enabled courses [I] [14th] : Add Rubric feedback to students when viewing their grades [I] [14th] : Add functions to allow pull to child courses at course module level [I] [14th] : Improve updating child courses showing pull option for child of child courses [I] [13th] : Added 'Number of started' and 'Number of completed' to student tab order by field [I] [ 9th] : Onboarding Guide updated for new IDE [I] [ 8th] : Fix issue in My Projects - Shared with Me [F] [ 8th] : Add feature to set teachers as Read Only at Organisation and/or Course level [I] [ 8th] : Accessing Codio Resources from IDE now opens in new tab [I] [ 7th] : Improve updating child courses from master to only show pull button when updates available [I] [ 6th] : Fix issue with incorrect format for download csv [I] [ 6th] : Add functionality to allow updates to assignments in a master course to be pulled to cloned courses [I] [ 3rd] : Fix loading of guides content in CS: Introduction in Python [I] [ 3rd] : Rename filter option names for student grading [I] [ 2nd] : Fix problem with LTI course integration parameter [I] [ 1st] : Fix problem when trying to add CS: Introduction in Python resource to account [I] [ 1st] : Fix problem filtering students by 'Not Graded' in a course [F] [ 1st] : Release of new IDE improving Teacher section [F] [ 1st] : Update internal IDE links to new documentation January 2020 [I] [08th] : Remove Firefox performance warning as earlier issues now addressed in latest FF versions December 2019 [I] [17th] : Update Phonegap API [I] [12th] : Review handling of .git in authors units to improve collaboration November 2019 [I] [22nd] : Improve visibility of assessment id to list of assessments [I] [21st] : Fix problem uploading images to stacks/packs/units/books/course/modules [I] [19th] : Fix problem with assessment button not showing [F] [17th] : Add support for LTI 1.3 integration [I] [11th] : Fix problem connecting to BitBucket repo's [I] [06th] : Update messaging when unable to publish jupyter based units [I] [05th] : Update handling of users signing up through LMS October 2019 [F] [16th] : Add function to allow Classes to be sorted by begin date of class [I] [02nd] : Fix problem with AOB allocation for self pay organisations September 2019 [I] [27th] : Improve handling of autograde scripts for large units [I] [24th] : Improve accessibility function in Find panel [I] [19th] : Fix problem opening files in same tab as guides [I] [11th] : Fix problem with SSH connections [I] [09th] : Fix problem with handling of answer/rationale for free text assessment [F] [04th] : Add support for the standard input when debugging C/C++, node.js and GDB programs. August 2019 [I] [29th] : Fix problem with marking units as completed [I] [28th] : Update handling of grade book comments [I] [28th] : Improve stack creation when creating from an older stack [F] [28th] : Add Codio Global Assessment library [I] [27th] : Add hint to student tab in classes for number of students [I] [27th] : Update handling of answer/rationale showing for students [F] [20th] : Add Assessments Library to allow sharing of assessments [I] [15th] : Fix issue with navigation after searching in guides [F] [15th] : Add support for self pay students to purchase through institutions bookstores [I] [09th] : Fix problem accessing projects in 'Shared with Me' area [I] [02nd] : Fix problem deleting modules in course July 2019 [I] [31st] : Update handling ofviewing Git repo's in Codio account [I] [30th] : Add currentPage and totalNumberofPages parameters for custom scripts [I] [30th] : Fix problem with contact URL settings in IDE chat area [I] [29th] : Fix issue with sorting of new classes being added [I] [25th] : Fix issue with guides section list not correctly showing for completed unit [I] [23rd] : Fix problem with focus on guides pages [I] [23rd] : Redesign dialog pages for assessments [I] [19th] : Add user cues when using git remote [I] [11th] : Improve handling of long class names [I] [11th] : Fix problem with color picker [I] [02nd] : Update Class Dashboard pages and other menus for better accessibility June 2019 [I] [19th] : Update Dashboard pages for better accessibility [I] [17th] : Improve handling of publication of large units [I] [11th] : Fix issue with showing/hiding folders in guides May 2019 [I] [17th] : Fix guides navigation problem causing layout to be incorrect [I] [07th] : Fix issue with library path not saving correctly in JUnit settings [I] [07th] : Fix issue with debugger with Node 11 [F] [06th] : Add additional configuration options for nbgrader/jupyter units [I] [03rd] : Improve handling of autograder custom scripts April 2019 [I] [30th] : Add python working directory parameter for Advanced Code Test to support python unit tests running from dot folders [I] [23rd] : Update clike codemirror plugin for better handling of objective c files [I] [23rd] : Fix layout problem for pull/push buttons in desktop app [I] [23rd] : Fix problem with updating Jupyter Notebook units to a class [I] [22nd] : Improve layout of private/public icon in class [I] [18th] : Fix problem with autograde scripts where units are read only [F] [18th] : Add support to extend timeout for nbgrader/jupyter units [I] [17th] : Improve messaging where assessment submissions unable to complete correctly [I] [17th] : Improve handling of code assessment submissions files [I] [16th] : Update handling of test students to show correct class logged into [I] [15th] : Fix problem with handling of grading templates for class units [I] [ 9th] : Fix problem with changing theme in guides [I] [10th] : Remove grading button when unit is opened as teacher [I] [10th] : Fix problem with saving panel layout on submission [F] [10th] : Add support for secure assessment script execution [I] [10th] : Improve handling of copying links/tokens to show confirmation [F] [10th] : Add assessment attempts count into download csvfiles [I] [10th] : Fix problem with partial points for advanced code test not showing correctly in dashboard [F] [10th] : Add custom script to allow third-party systems to track/help students. [I] [ 9th] : Improve standard code feedback field text handling [I] [ 9th] : Fix problem with changing theme in guides [F] [ 9th] : Add sense.network] assessment to offer feedbackdback to students on code submissions [I] [ 7th] : Improve visibility of keyboard focus [I] [ 7th] : Change wording Upgrade to Update for consistency of language [F] [ 6th] : Add ability to exclude files from students units in a class [I] [ 4th] : Update handling of teacher only pages in books March 2019 [F] [31st] : Empty Stack set to use Ubuntu 18.04. [F] [29th] : Add ability to clone class from main class dashboard [I] [27th] : Fix terminal scrolling problem when unit run in iframe [I] [26th] : Update messaging to students marking units as completed [I] [26th] : Minor dashboard text changes [I] [22nd] : Fix problem with handling of read only projects where external services are used (e.g. Jupyter/RStudio) [I] [21st] : Fix problem with storage of guides layout settings in units [I] [20th] : Improve handling of adding teachers to class [I] [19th] : Fix problem with teachers not able to access students projects after deadline passed [I] [15th] : Fix problem for student feedback when unit running in iframe [I] [15th] : Fix issue with students able to start units after deadline is past [I] [15th] : Remove menu item \"Submit Jupyter assessments\" from jupyter units [I] [14th] : Improve handling of test autograde script [F] [11th] : Improve organisation and class contact url for students, allowing multiple contact urls to be defined. [I] [ 7th] : Improve layout for unit penalty screen [F] [ 7th] : Add Education>Validate Jupyter menu item to allow authors to validate and check Jupyter projects before publishing [I] [ 7th] : Update guides page navigation handing to mitigate content synchronisation issues [I] [ 6th] : Improve handling of submit jupyter assessments button [I] [ 6th] : Fix issue with show expected answer in html pages [I] [ 5th] : Improve validation to detect errors better in .codio-menu file [I] [ 4th] : Fix issue with symbols used in guides TOC [I] [ 4th] : Fix problem with Tools>Guides>Remotes menu item [F] [ 4th] : Add support to provide additional feedback to students when test fails in standard code test [I] [ 1st] : Improve messaging when stack used in class unit is deleted where unit was not re published February 2019 [I] [28th] : Fix issue in upgrade course where long names used in module and/or units [I] [28th] : Fix layout issue in standard code test assessment in html type of page [I] [26th] : Improve messaging when connecting project in desktop app [I] [26th] : Fix issue with Book permissions if a user is deleted [I] [26th] : Improve handling of redirection when unit run in LMS when students mark the unit as completed [I] [26th] : Add refresh button to visualisation assessment [I] [26th] : Fix problem for students being unable to view the content of the unit when marked as complete and visibility set to read only [I] [26th] : Update Light reading theme drop down in guides global settings to read only [I] [26th] : Make course/module owner brighter [F] [25th] : Add visualisation assessment support in guides [F] [21st] : Add support for promotion codes in Self Invoicing [I] [20th] : Update handling of soft tabs for python that were not handling backspace and delete buttons actions correctly [I] [20th] : Improve messaging on stack version creation if user has no access [I] [19th] : Improve messaging when publishing unit in a module that the user hasn't previously opened [I] [18th] : Improve handling of course upgradein class where there is a mix of public and private modules [I] [15th] : Enlarge size of confirmation dialogs text for better accessibility [I] [15th] : Remove project settings from desktop app [I] [15th] : Improve messaging display when invalid dates entered for a class [I] [15th] : Update download csv to remove data of students removed from the class [I] [15th] : Improve guides settings to save and close from one click [F] [15th] : Add new guides layout including file tree with guides presented on the left hand side [F] [14th] : Add new assessment type: Parson's puzzle [I] [12th] : Review button colours on Class Admin screen [I] [12th] : Fix problem with returned grade score for book based units [I] [12th] : Fix issue with one attempt only message for assessments showing incorrectly when not enabled [I] [12th] : Fix problem with dark theme in FF65 on MacOS [I] [11th] : Improve handling of invitation of teachers into classes [F] [ 6th] : Fix problem with exporting project as zip [I] [ 5th] : Increase inactive timeout period to 60mins [F] [ 4th] : Add course permissions feature to restrict access to courses for teachers/students January 2019 [I] [30th] : Improve handling of project preview when waiting for services to start [F] [29th] : Add statistical collection for teachers/instructors to export class activity [I] [25th] : Fix issue with changing stack in project [I] [25th] : Improve handling for Brightspace D2L integration where by if you have resource_link_id field an endping URL of https://apollo.codio.com/lti/link_endpoint can be used [I] [24th] : Fix problem with unit ordering in course module when adding new units [I] [23rd] : Fix problem updating students units in class when archived [I] [23rd] : Fix problem with partial points implemented in Advanced Code Test assessment [F] [21st] : Add new guides layout for '3 panels without tree' with guides presented on the left hand side [I] [21st] : Fix problem with book settings not applied to class units [F] [18th] : Add ability to clone content of existing class into a new class [F] [18th] : Add new Custom Button function to all users to restore current files in guides [F] [17th] : Add new guides layout for '2 panels without tree' with guides presented on the left hand side [F] [16th] : Add new global setting in guides to restrict students from opening/closing tabs in unit [I] [16th] : Fix problem with handling of .codiomenu on guides being closed [I] [16th] : Fix problem for self-pay students agreeing to Student Consent [I] [11th] : Fix problem with grade feedback dialogs not opening for students [I] [ 8th] : Improve contrast colour for confirmation code dialogs [I] [ 8th] : Update RStudio stack to be loginless [I] [ 6th] : Improve handling of syncronisation in desktop app December 2018 [I] [28th] : Improve accessibility handling of next/previous buttons in guides [I] [26th] : Improve handling of user authentication when allow private static preview is enabled [I] [24th] : Improve handling of .git folder if it is in .guides/secure folder [I] [17th] : Add setting to manage students access to project based units when completed [I] [14th] : Fix problem with event listener [I] [14th] : Add jupyter preview to student's grade feedback preview [I] [14th] : Improve guides for visually impaired users [I] [14th] : Add additional fields for students answers into the download csv [I] [11th] : Improve handling of gigabox allocation when run from a course [I] [10th] : Fix problem with Advanced Code Test with Custom language type and Allow Partial Points [I] [ 7th] : Add answer and rationale fields to grading feedback for student dashboard [I] [ 6th] : Fix problem with global scripts in guides [I] [ 5th] : Improve grading feedback for student dashboard [I] [ 4th] : Improve messaging when synchronising of files pulled/pushed to desktop app November 2018 [F] [29th] : Add grading feedback for student dashboard [F] [29th] : Pass grading feedback URL to LMS systems [I] [29th] : Improve handling of line delimiters in .codio-menu file [I] [29th] : Improve synchronisation of files pulled/pushed to desktop app [F] [22nd] : Allow files/folders to be excluded from synchronisation with desktop app [I] [22nd] : Fix problem with customizing in books [F] [22nd] : Add support for python3 in unit tests [F] [21st] : Add separate fields for first and last name to download csv [I] [21st] : Fix problem with first time execution of advanced code test assessments [I] [20th] : Fix problem trying to start unit from a course [I] [16th] : Fix problem with delete confirmation dialog showing in error when deleting owned module [I] [15th] : Improve highlighting of differences in standard code text [I] [14th] : Improve sorting when accented characters used [I] [13th] : Fix problem with project permissions not updating when project renamed [I] [12th] : Update handling of autograde scripts in .guides/secure folder [I] [ 9th] : Improve handling of Public/Private Settings [I] [ 9th] : Improve messaging for Allow Box Cloning [I] [ 8th] : Fix problem with scrolling in guides with assessments [I] [ 6th] : Fix problem with handling of spaces in Standard Code Test output [I] [ 6th] : Fix sorting of modules [I] [ 6th] : Update message shown when units already graded by another teacher [F] [ 5th] : Add Autograde Free Text assessment October 2018 [I] [31st] : Update guidelines for privacy settings for Safari 12.0 browser [I] [29th] : Fix problem accessing grading in students units [F] [29th] : Allow use of accented characters [I] [26th] : Fix issue with users able to update project settings when not having admin rights [I] [26th] : Improve handling of guide editor [I] [24th] : Fix focus problem when adding assessments to guides page [I] [24th] : Improve tab handling in pop up dialogs [I] [23rd] : Add function to hide Codio logo icon when customizing top menus for students [I] [19th] : Fix rendering of bold text in guides for Firefox browser [I] [19th] : Fix problem using tabs in Firefox [F] [18th] : Add new user/project preference navigateWithinSoftTabs to simplify navigation when soft tabs are used [I] [18th] : Fix problem with loss of focus when in split view mode editing guides [I] [18th] : Fix problem in guides saving close tab state [I] [18th] : Add text description that is visible on mouse over when the icon gets focus. [I] [18th] : Fix problem rendering output of code tests on Mac OS [I] [15th] : Fix problem unpacking projects [I] [15th] : Fix problem with page focus in guides [I] [15th] : Improve menu handling when customizing top menus for students [F] [10th] : Add function to automatically release grades in new classes. See organisation release grades for more information [F] [ 9th] : Add ability to change all students completed unit to incomplete. See force marked as complete for more information. [I] [ 3rd] : Fix problem when executing commands in Guides that contain brackets [F] [ 3rd] : Add organisation and class contact url for students to be able to raise questions, seek assistance from your preferred area (forums/LMS discussion areas etc) [F] [ 3rd] : Add ability to sort students in classes by first or last names September 2018 [I] [30th] : Fix problem with Multiple Choice assessments not showing students correct answers on submission [I] [26th] : Fix layout of media page in guides settings [F] [26th] : Add feature for IDE top menu to be customized for student view when running guides [I] [24th] : Fix problem with Self Invoicing [I] [24th] : Improve messaging of local file changes when disconnecting project in desktop application [I] [20th] : Fix problem embedding content in Canvas [I] [20th] : Improve download csv content adding students email address [I] [20th] : Remove character limitation for grading comments [I] [15th] : Improve download csv content, adding 2 new fields for Points and Max Points [I] [13th] : Fix problem for book based units when disabling units in class module [F] [13th] : Add ability for 'mark as completed' to be disabled for individual units in classes [I] [12th] : Remove https preview warning to avoid confusion for students [I] [12th] : Improve handling of fullscreen button in frames [I] [12th] : Improve Usability handling in menus [I] [11th] : Fix problem with changing state of 'use submit buttons' setting in guides [I] [11th] : Fix problem when adding projects to module with reserved words [I] [10th] : Update explanatory text for Visibility Summary for Course and Modules [I] [10th] : Fix problem with Guides Table of Contents [I] [10th] : Improve handling of LTI full screen support [I] [10th] : Improve handling of empty points field in Grade book assessment [I] [ 5th] : Add example bash script for autograding on completion [I] [ 5th] : Improve handling of duplicate file warning [I] [ 4th] : Improve colour contrast on Quick Open and Command Bar [I] [ 4th] : Fix problem with handling of cancel button actions in project settings area [I] [ 3rd] : Add support for lis_course_offering_sourcedid as a unique course identifier in LMS systems August 2018 [I] [29th] : Update handling of panel widths when guides is collapsed/reopened when in 3 column layout [I] [29th] : Fix problem with Quick Open handling in screen readers [F] [29th] : Added Self Invoicing for University and School organisation [F] [29th] : Added support for LTI Constant URLs and LTI Class fork [F] [22nd] : Added Codio LTI App to improve ease of integrating Codio with LMS systems [I] [16th] : Fix issue with Custom Buttons incorrectly handling [F] [ 9th] : Add ability to use current file in debugger targets [I] [ 7th] : update handling of Crunch projects [I] [ 7th] : Improve visibility of form elements and handling of Quick Open dialog [I] [ 7th] : Update menu handling for screen readers [F] [ 7th] : Add additional 3 column layout options [I] [ 4th] : Fix problem with terminal opening in guides [I] [ 2nd] : Add support for manual grading for nbgrader July 2018 [I] [26th] : Improve handling of Book deletion [F] [26th] : Add typescript support for desktop application [F] [18th] : Improve handling of enabling/disabling of class units [F] [17th] : Fix issue with cloning Partial Point Rubric in IE browser [F] [13th] : Add support for nbgrader [I] [12th] : Improve handing of copy file actions [I] [11th] : Improve handling of cookie consent [I] [11th] : Fix issue in counter for grading of book based units [F] [10th] : Allow Partial Point Rubric to be cloned from other units [I] [ 3rd] : Update handling of Edge browser integration with LMS systems [I] [ 3rd] : Improve Plagiarism checker adding new filters that can be set [I] [ 2nd] : Fix problem with tab focus being lost in guides [I] [ 2nd] : Fix problem when removing units from module/course in a class June 2018 [I] [29th] : Improve visibility of active buttons in tabs [I] [29th] : Improve export class data to better handle any archived units [I] [29th] : Fix problem with layout for manual grading in IE browser [I] [27th] : Fix problem with adding user project permissions [F] [22nd] : Add STACK file type in Math assessment authoring and YAML validation. [I] [21st] : Improve error message handling of publishing of books with broken .json files [I] [21st] : Improve teacher view of pinned units [F] [20th] : Add Partial Point Rubric for manual grading [I] [19th] : Improve behaviour of free text assessment [I] [19th] : Update unit publishing to ignore assessmentsAnswers.json file [I] [19th] : Update handling of assessment submiit button [F] [15th] : Add collapse on start for guides [I] [15th] : Improve handling of exporting class data [I] [13th] : Improve support for keyboard and screen readers [I] [13th] : Update handling of dynamic port protection [I] [ 5th] : Add overview video for desktop application [I] [ 4th] : Improve handling of mark as completed process for students May 2018 [I] [31st] : Improve handling of autocomplete when searching for users to share projects [I] [28th] : Improve handling of local deleted files and folders in desktop application [I] [28th] : Improve handling of assessment points if changed when updating unit in class [I] [28th] : Fix issue with plagiarism in book based units [I] [24th] : Improve handling of exit terminal commands [I] [21st] : Fix problem with teachers opening own last version of unit in courses [I] [21st] : Fix issue with restarting guides after changing settings [I] [21st] : Improve message handling of errors in debugger [I] [21st] : Fix issue for students opening list of units [I] [18th] : Fix issue with updating stack causing issue publishing new version of course unit [F] [18th] : Add support for timeout period in advanced code tests [I] [18th] : Improve layout for student grading screens [I] [18th] : Update subscription information shown when plan expires [I] [16th] : Teachers in Self-Pay organisations no longer require subscription [F] [14th] : Restrict preview of box url to owners of the box. See Project Settings for more information [I] [14th] : Improve handling of file and directory names in desktop application [F] [ 8th] : Add support for Python and Javascript in advanced code tests [F] [ 4th] : Improve handling of tab focus when returning to a unit [I] [ 4th] : Fix issue with project list last accessed sorting [F] [ 4th] : Add Grade Book assessment April 2018 [F] [27th] : Add support for Java and Ruby in advanced code tests [I] [27th] : Improve handling of downloading files in private projects [I] [27th] : Improve handling for language server protocol [I] [24th] : Improve accessibility to support dialog actions accessible from keyboard [I] [24th] : Fix issue with replace in projects [I] [20th] : Fix grading issue with rubric templates [I] [20th] : Improve messaging for errors when synchronising units in desktop application [I] [19th] : Fix problem with invite teacher process [I] [16th] : Improve handling of unit/project descriptions in desktop application [I] [14th] : New desktop application allowing a local code workspace to synchronize with a Codio box. [I] [13th] : Improve performance of X-server [I] [13th] : Improve handling of double clicking on submission of assessments [I] [ 4th] : Improve visualisation of navigation options in teacher dashboard [I] [ 2nd] : Update IDE shortcut key for accessing menu (to F10) [I] [ 2nd] : Update handling of download csv to better handle characters in grading comments March 2018 [I] [29th] : Update handling of books requiring guides before publishing [I] [27th] : Improve IDE menu items for better keyboard accessibility [I] [27th] : Update structure of exporting class data [I] [27th] : Improve memory handling for language server protocol [I] [23rd] : Improve handling of focus when switching panels using keyboard shortcuts [I] [20th] : Improve messaging when stack/pack owner is changed [F] [20th] : Allow adjustment of unit penalties for individual students [I] [19th] : Fix sorting of units in classes [I] [16th] : Fix problem starting Plagiarism tool [I] [15th] : Fix problem with export class data for old classes [I] [12th] : Fix issue with image handling when editing/creating starter packs [I] [ 7th] : Improve handling of course updates in classes [I] [ 7th] : Fix issue with class dashboard in IE browser [F] [ 6th] : Add support for searching/filtering of classes [I] [ 6th] : Fix problem for teachers opening latest version of books [I] [ 5th] : Improve handling for opening of large project warning [I] [ 5th] : Fix issue with terminal reconnections Febuary 2018 [I] [28th] : Update handling of book unit switching [I] [26th] : Fix issue with unit reloading for students [F] [26th] : Expand Gigabox options to include 1GB, 2GB, 8GB,16GB and GPU (for GPU-accelerated instances) boxes. [I] [26th] : Fix issue with regrade complete [I] [13th] : Fix issue with MCQ]/FITB assessments not showing correct answers [I] [13th] : Fix issue with undo/redo [I] [12th] : Fix issue with file tree not updating correctly when files created via terminal [I] [12th] : Fix issue with unit settings changing when Upgrade Course is run [I] [12th] : Fix issue with icon handling [F] [ 9th] : Exporting LTI settings [I] [ 9th] : Fix problem with txt files not opening correctly [F] [ 8th] : Export class data enabling all class data, including students workspaces to be exported. [I] [ 5th] : Fix issue with book units [I] [ 5th] : Fix issue publishing books after changing stack [I] [ 1st] : Fix issue with content being lost when switching browsers January 2018 [I] [24th] : Fix problem with Test students in Self-Pay organisations [I] [24th] : Update handling of Autocomplete in Language Server Protocol [I] [22nd] : Improve Run Button so that the command name is used for run button command as terminal name [I] [22nd] : Fix issue with [stack exclusions](/project/stacks/exclusions/ [I] [22nd] : Fix issue when the wrong students answer is shown when switching between students projects [I] [19th] : Fix issue with assessments on Reset Unit [I] [19th] : Implement completion and hover support for Language Server Protocol [I] [16th] : Fix problem for teachers not being able to edit course/module units [I] [15th] : Always use tabs regardless of user/project settings when using Makefile [I] [ 4th] : Fix issue with guides table of contents focus on open [I] [ 4th] : Improve handling of books when switching between book units December 2017 [I] [21st] : Fix problem with advanced code test output [I] [20th] : Update guides table of contents so current selection is always visible in large tree [I] [18th] : Executing exit command in terminal or guides content will automatically close the terminal tab [I] [14th] : Improve handling of application of grades for large classes [I] [11th] : Update handling of Free Text Assessment submissions [I] [11th] : Update handling of Upgrade Course for Firefox browser [I] [ 8th] : Fix duplicate messaging issue when deleting units in course modules [I] [ 6th] : Improve handling of Unit Penalties [I] [ 4th] : Update messaging when removing modules from courses [I] [ 1st] : Update helper text for stack version change in units [I] [ 1st] : Update handling of layout change [I] [ 1st] : Fix issue with changes to metadata.json files not saving correctly November 2017 [I] [30th] : Update definition of incorrect points for multiple choice assessments [I] [30th] : Improve messaging highlighting Public/Private Settings when creating Courses/Modules/Books/Projects/Stacks/Starter Packs [I] [28th] : Fix XSS image issue [I] [28th] : Improve handling of teachers joining class as student through LTI [I] [28th] : Simplify creation of book based units [I] [28th] : Update Unit Duration [I] [28th] : Improve student submission options [I] [28th] : Update Guides global settings [F] [27th] : Add functionality to change/review JUnit timeout settings [F] [24th] : Unit Penalties to allow teachers/instructors to specify grading deadlines and associated penalties [I] [24th] : Update Book publishing to allow pages to be selected [I] [15th] : Fix issue when changing stack for ad-hoc projects in a class [I] [15th] : Update guides collapse button handling when layout set to 1 panel [I] [14th] : Fix handling of book based units opening for students [I] [14th] : Block deletion of a course that contains modules [I] [14th] : Improve warnings when deleting units and modules [I] [13th] : Fix issue publishing units in IE browser [I] [13th] : Fix icon for Advanced Code Tests [I] [13th] : Fix handling for teachers opening students project assessments [I] [09th] : Fix TOC scrolling issue in guides for Firefox and IE browsers [I] [07th] : Improve Mark as Completed process to provide warning of assessments in the unit not completed [I] [07th] : Update teacher dashboard for grading, allowing teachers to filter to find students and by status of unit. See Grading project work for more information [I] [03rd] : Fix terminal light theme to show cursor [I] [03rd] : Fix problem where teachers are not always able to view content of 3 blue dot menu in the students listing [I] [03rd] : Update Codemirror components and fix soft tabs [I] [02nd] : Fix problem when Guides TOC opened and closed to cause terminal to resize incorrectly October 2017 [I] [26th] : Update message handling for change stack for units in a course [I] [25th] : Improve stack creation from the IDE [I] [24th] : Update unit action to also update codio files (e.g .codio, .settings) [I] [18th] : Update saving of draft free text assessments [I] [16th] : Fix problem for students answering assessments [I] [16th] : Fix problem with custom assessment grades not being passed correctly [I] [13th] : Improve grading for Free text assessments supporting comment field and easy navigation to other students and other assessments for the currently selected student [I] [12th] : Update handling of symbols in free text assessment previewing [I] [12th] : Improve class navigation for teachers, click units tab to return to main unit listing [F] [11th] : Unify guides/books table of contents [I] [11th] : Fix issue with creating projects importing from zip file [I] [10th] : Fix problem with books upgrade to class [I] [10th] : Improve handling of size of free text assessment field for student [I] [09th] : Show points assigned for free text assessments to students within the unit when grades released [F] [06th] : Add user preference editor setting to show a vertical ruler in files. [ruler]=xx [I] [06th] : Improve handling of unit ordering when adding or updating a course in a class to match the order set in the course [I] [05th] : Improve warnings for unsaved changes when authoring guides [I] [05th] : Ignore .git and .hg files in search and replace actions [I] [04th] : Improve handling of students ability to amend answer submissions during completion of a unit [I] [04th] : Fix problem so students can not create courses,modules and units [I] [04th] : Improve grading free text to show confirmation message when applying [I] [04th] : Improve stack handling when publishing units [I] [04th] : Improve upgrade course process [F] [02nd] : Release of books [I] [02nd] : Allow LMS students to access already started units from Codio dashboard [I] [02nd] : Redirect LMS users back to their LMS when marking unit as complete September 2017 [I] [29th] : Update Recommended Course content to resolve reported issues in assessments [I] [29th] : Update messaging if cookies not allowed. [I] [28th] : Reorganization of documentation structure. [F] [27th] : Changes to terms of use [I] [22nd] : Improve handling for publishing new stack versions [I] [21st] : Improve handling of student output in standard code assessment [I] [21st] : Improve handling of students starting units while new stack version is being updated [I] [21st] : Update the handling of student data when removing modules from classes [F] [19th] : Update documentation to advise on cookie requirements [I] [18th] : Fix students seeing grading stats before grades are released [I] [18th] : Fix Teacher Invitation list in classes showing test students [I] [15th] : Update handling of Upgrade course for IE11 browser [I] [14th] : Improve teacher dashboard view to show date students completed units and answers submitted [I] [14th] : Improve handling for accessing binary files [I] [12th] : Allow teachers to grade draft answers [I] [12th] : Improve create stack from current project process [I] [12th] : Improve the updating of manual grading actions for teachers [I] [11th] : Improve message handling if student working with stack unit they do not have access to. [I] [11th] : Refactor Guides buttons changing Settings to smaller gear icon [I] [08th] : Remove version entry field from stack version and just auto-increment [F] [08th] : Added preview type for free text assessments [I] [07th] : Update teacher dashboard for free text assessment grading [I] [07th] : Add confirmation step when unit is marked as complete by students. [F] [02nd] : Add student IP consent [I] [01st] : Improvement to publishing units allowing for simpler handling of stack changes. [F] [01st] : Upgrade course. If any updates to the course(s) used in your class are detected, you can upgrade the content to the latest version within the class. Update unit option removed from courses in a class. August 2017 [F] [30th] : Support pug for syntax highlighting (mapping to jade). [I] [25th] : Review field ordering for assessments [I] [25th] : Change public/private settings to private by default. [F] [23rd] : Add go to line hotkey (default Alt+G ). [I] [17th] : Invite teachers into a class with email invitation. [I] [16th] : Update guide icons and add new callout blocks. We implemented the changelog page in August, 2017 so this is as far back as we go.","title":"Changelog"},{"location":"resources/Resource-Tools/crunch/","text":"Crunch is a modern, full-featured alternative to Little Man Computer. It is testament to Little Man Computer that it is still being used many years later. We have taken inspiration from it and given it a modern feel and a more complete instruction set that allows you to focus on thinking about your algorithm rather than having to learn the syntax. Crunch Course \uf0c1 We have built a 3 assignment Course that combines teaching materials with over 20 challenges of gradually increasing complexity. This is a great resource for teachers wanting to teach the basics of Assembly Language programming as well as computational thinking. From the Dashboard, go to Resources and then look for Crunch - Little Man Computer on Steroids . Lexikon \uf0c1 We recommend you use Codio's Lexikon feature to get inline help on Crunch usage and commands. You can find the Lexikon in the Tools menu. Once it appears, select the dropdown list on the right side and select Crunch. You can then search for commands. Try entering Overview in the search box for an overview of all the Crunch commands. Crunch Module \uf0c1 We strongly recommend you use the Crunch module to teach Crunch. The Module can be found in the Crunch - Little Man Computer on Steroids Course. From the Dashboard, go to Reources and then look for Crunch - Little Man Computer on Steroids , within that course you will find the Crunch module. If you are teaching a Course, then we suggest you assign the Crunch module to the course. Click here for details. Video Overview \uf0c1 Creating a Crunch file \uf0c1 If you want to create your own Crunch files in a Codio project, create a new file of type Crunch by giving it the .crunch extension. A new file is created from either the File menu or by right-clicking on the project name line in the file tree. Saving changes \uf0c1 All changes are changed automatically, so you don't have to explicitly save. Source Code Editing \uf0c1 Editing source code is done by hovering over a line until the popup button bar appears. If you have not yet added any code, then you should see the button bar already there in the top of the code area. Click on the + to add a new instruction. Instructions \uf0c1 Crunch comes with a good base set of instructions. To see the full set of instructions, along with explanations for each one, add a new line as explained above. You can then scroll through the list of available instructions. There is also a complete Lexicon available. Go to Tools>Lexicon and select the Crunch option to search. The following instructions are not available in Little Man Computer and provide a more complete experience. BGT branch if greater than BGE branch if greater than or equal to BLT branch if less than BLE branch if less than or equal to BEQ branch if equal to BNE branch if not equal to JMP jump to a label PSH push accumulator onto a stack POP pop accumulator off the stack MUL multiply the accumulator by a literal value of a value stored in a memory location INC increment the accumulator by 1 DEC decrement the acculumator by 1 You can access the full instruction list from the dropdown when you add a new instruction or you can simply type the instruction mnemonic (3 letter instruction) and press enter. Adding labels \uf0c1 Instructions such as BEQ , BNE , BLT , BLE , BGT , BGE , JMP require that you jump to a specific label if the condition is met. You can add such a label by pressing the add label button from the floating toolbar. Enter a label name that can be used as a target for the above listed instructions. Comments \uf0c1 If you want to add comments to your code, click the comment button, circled below, and you can add a comment description into the code. Selecting lines of code - deleting or moving \uf0c1 If you want to select one or more lines of code (to delete or move to another location) then you should do the following click on a line you want to select but make sure you click away from a field that requires input to select more multiple lines, then press the shift key and click on another line in order that all lines between the first line and this line are selected. You should then see the multiple lines highlighted. Once you have the one or more lines selected, you can either delete all lines (by pressing delete from the toolbar on the right) or by dragging the selected lines to the required destination. Running your code \uf0c1 Step / debug mode \uf0c1 One very nice way of running your code is to step through it line by line so you can see how it executes at your own pace. To do this, press the Step button on the right hand side. It will immediately start executing. At any time, you can press the Run button to run to completion at full speed. Run mode \uf0c1 This runs your program at full speed. Output window \uf0c1 All output is written to the output window at the bottom of the screen, which is scrollable. Stack contents \uf0c1 If you push the accumulator to the stack using the PSH command, the stack content is displayed in a scrollable window within the display below the code window. As you POP items off the stack, you will see the topmost item being removed. Undo & redo \uf0c1 You can undo and redo changes using the buttons on the right hand side.","title":"Crunch"},{"location":"resources/Resource-Tools/crunch/#crunch-course","text":"We have built a 3 assignment Course that combines teaching materials with over 20 challenges of gradually increasing complexity. This is a great resource for teachers wanting to teach the basics of Assembly Language programming as well as computational thinking. From the Dashboard, go to Resources and then look for Crunch - Little Man Computer on Steroids .","title":"Crunch Course"},{"location":"resources/Resource-Tools/crunch/#lexikon","text":"We recommend you use Codio's Lexikon feature to get inline help on Crunch usage and commands. You can find the Lexikon in the Tools menu. Once it appears, select the dropdown list on the right side and select Crunch. You can then search for commands. Try entering Overview in the search box for an overview of all the Crunch commands.","title":"Lexikon"},{"location":"resources/Resource-Tools/crunch/#crunch-module","text":"We strongly recommend you use the Crunch module to teach Crunch. The Module can be found in the Crunch - Little Man Computer on Steroids Course. From the Dashboard, go to Reources and then look for Crunch - Little Man Computer on Steroids , within that course you will find the Crunch module. If you are teaching a Course, then we suggest you assign the Crunch module to the course. Click here for details.","title":"Crunch Module"},{"location":"resources/Resource-Tools/crunch/#video-overview","text":"","title":"Video Overview"},{"location":"resources/Resource-Tools/crunch/#creating-a-crunch-file","text":"If you want to create your own Crunch files in a Codio project, create a new file of type Crunch by giving it the .crunch extension. A new file is created from either the File menu or by right-clicking on the project name line in the file tree.","title":"Creating a Crunch file"},{"location":"resources/Resource-Tools/crunch/#saving-changes","text":"All changes are changed automatically, so you don't have to explicitly save.","title":"Saving changes"},{"location":"resources/Resource-Tools/crunch/#source-code-editing","text":"Editing source code is done by hovering over a line until the popup button bar appears. If you have not yet added any code, then you should see the button bar already there in the top of the code area. Click on the + to add a new instruction.","title":"Source Code Editing"},{"location":"resources/Resource-Tools/crunch/#instructions","text":"Crunch comes with a good base set of instructions. To see the full set of instructions, along with explanations for each one, add a new line as explained above. You can then scroll through the list of available instructions. There is also a complete Lexicon available. Go to Tools>Lexicon and select the Crunch option to search. The following instructions are not available in Little Man Computer and provide a more complete experience. BGT branch if greater than BGE branch if greater than or equal to BLT branch if less than BLE branch if less than or equal to BEQ branch if equal to BNE branch if not equal to JMP jump to a label PSH push accumulator onto a stack POP pop accumulator off the stack MUL multiply the accumulator by a literal value of a value stored in a memory location INC increment the accumulator by 1 DEC decrement the acculumator by 1 You can access the full instruction list from the dropdown when you add a new instruction or you can simply type the instruction mnemonic (3 letter instruction) and press enter.","title":"Instructions"},{"location":"resources/Resource-Tools/crunch/#adding-labels","text":"Instructions such as BEQ , BNE , BLT , BLE , BGT , BGE , JMP require that you jump to a specific label if the condition is met. You can add such a label by pressing the add label button from the floating toolbar. Enter a label name that can be used as a target for the above listed instructions.","title":"Adding labels"},{"location":"resources/Resource-Tools/crunch/#comments","text":"If you want to add comments to your code, click the comment button, circled below, and you can add a comment description into the code.","title":"Comments"},{"location":"resources/Resource-Tools/crunch/#selecting-lines-of-code-deleting-or-moving","text":"If you want to select one or more lines of code (to delete or move to another location) then you should do the following click on a line you want to select but make sure you click away from a field that requires input to select more multiple lines, then press the shift key and click on another line in order that all lines between the first line and this line are selected. You should then see the multiple lines highlighted. Once you have the one or more lines selected, you can either delete all lines (by pressing delete from the toolbar on the right) or by dragging the selected lines to the required destination.","title":"Selecting lines of code - deleting or moving"},{"location":"resources/Resource-Tools/crunch/#running-your-code","text":"","title":"Running your code"},{"location":"resources/Resource-Tools/crunch/#step-debug-mode","text":"One very nice way of running your code is to step through it line by line so you can see how it executes at your own pace. To do this, press the Step button on the right hand side. It will immediately start executing. At any time, you can press the Run button to run to completion at full speed.","title":"Step / debug mode"},{"location":"resources/Resource-Tools/crunch/#run-mode","text":"This runs your program at full speed.","title":"Run mode"},{"location":"resources/Resource-Tools/crunch/#output-window","text":"All output is written to the output window at the bottom of the screen, which is scrollable.","title":"Output window"},{"location":"resources/Resource-Tools/crunch/#stack-contents","text":"If you push the accumulator to the stack using the PSH command, the stack content is displayed in a scrollable window within the display below the code window. As you POP items off the stack, you will see the topmost item being removed.","title":"Stack contents"},{"location":"resources/Resource-Tools/crunch/#undo-redo","text":"You can undo and redo changes using the buttons on the right hand side.","title":"Undo &amp; redo"},{"location":"resources/Resource-Tools/flode/","text":"Flode is a course that creates executable flow charts. Flode is a great way to teach computational thinking and introduce students to programming. It can: create beautiful, annotated flow charts write proper code expressions, including decisions, in chart elements integrated debugger export your charts as images for project write-ups input and output elements so automated tests can auto-grade charts. Please see the sections below for details on how to access ready made course or how to create your own projects where students can create Flode charts within their own projects. Cheat Sheet \uf0c1 Here is a quick reference for commonly used actions. Dragging in blocks \uf0c1 Drag from the top toolbar into the chart. Connecting blocks with lines \uf0c1 Hover over a block to see the connection points Move the mouse over one of the small connection point circles Click and drag with the mouse to start creating the line Release the mouse to move in another direction then click to change direction again or connect to another connection point Resizing blocks \uf0c1 Click on a block then drag a highlighted point Zooming & centering your chart \uf0c1 Zoom controls are in the toolbar or using the mouse wheel if you have one Multi selection \uf0c1 Press the shift key then drag the mouse to surround blocks to multi-select Select one block then press the shift key then start dragging the mouse Aligning blocks \uf0c1 Multi select the blocks to align Right click and select one of the alignment options Undo & Redo \uf0c1 Undo Ctrl+Z (PC) Cmd+Z (Mac) Redo Shift+Ctrl+Z (PC) Shift+Cmd+Z (Mac) Adding comments \uf0c1 Click on a block then press the speech bubble icon to add a comment. Video overview \uf0c1 Flode teaching content \uf0c1 The content also contains many auto-graded assessments. Results can be seen instantly on the teacher Courses feature. Log into Codio Select Resources from the items on the left of the Dashboard Look for An Introduction to Programming An Introduction to Programming uses Flode extensively and provides an excellent way of introducing students to programming, computational thinking and Algorithms. Creating and editing a new Flode file \uf0c1 If you want to create Flode charts independently of any Codio Course content, create a new project from the Dashboard > My Projects area. Once inside a project, to create a new flow chart, simply create a new file with the extension .flode . A new Flode window will appear and you can start creating and editing your chart. A new file is created from either the File menu or by right-clicking on the project name line in the file tree. To edit an existing .flode file, simply click on the file name to open the Flode editor. Detailed instructions \uf0c1 To get detailed instructions on how to use Flode, Log into Codio Select Resources from the items on the left of the Dashboard Look for An Introduction to Programming Select the first Module, Flode Press Start Assignment from the first Unit in the list Introduction to Flode Credits \uf0c1 Many thanks to the folks at JGraph for their excellent flowcharting and diagramming tools.","title":"Flode"},{"location":"resources/Resource-Tools/flode/#cheat-sheet","text":"Here is a quick reference for commonly used actions.","title":"Cheat Sheet"},{"location":"resources/Resource-Tools/flode/#dragging-in-blocks","text":"Drag from the top toolbar into the chart.","title":"Dragging in blocks"},{"location":"resources/Resource-Tools/flode/#connecting-blocks-with-lines","text":"Hover over a block to see the connection points Move the mouse over one of the small connection point circles Click and drag with the mouse to start creating the line Release the mouse to move in another direction then click to change direction again or connect to another connection point","title":"Connecting blocks with lines"},{"location":"resources/Resource-Tools/flode/#resizing-blocks","text":"Click on a block then drag a highlighted point","title":"Resizing blocks"},{"location":"resources/Resource-Tools/flode/#zooming-centering-your-chart","text":"Zoom controls are in the toolbar or using the mouse wheel if you have one","title":"Zooming &amp; centering your chart"},{"location":"resources/Resource-Tools/flode/#multi-selection","text":"Press the shift key then drag the mouse to surround blocks to multi-select Select one block then press the shift key then start dragging the mouse","title":"Multi selection"},{"location":"resources/Resource-Tools/flode/#aligning-blocks","text":"Multi select the blocks to align Right click and select one of the alignment options","title":"Aligning blocks"},{"location":"resources/Resource-Tools/flode/#undo-redo","text":"Undo Ctrl+Z (PC) Cmd+Z (Mac) Redo Shift+Ctrl+Z (PC) Shift+Cmd+Z (Mac)","title":"Undo &amp; Redo"},{"location":"resources/Resource-Tools/flode/#adding-comments","text":"Click on a block then press the speech bubble icon to add a comment.","title":"Adding comments"},{"location":"resources/Resource-Tools/flode/#video-overview","text":"","title":"Video overview"},{"location":"resources/Resource-Tools/flode/#flode-teaching-content","text":"The content also contains many auto-graded assessments. Results can be seen instantly on the teacher Courses feature. Log into Codio Select Resources from the items on the left of the Dashboard Look for An Introduction to Programming An Introduction to Programming uses Flode extensively and provides an excellent way of introducing students to programming, computational thinking and Algorithms.","title":"Flode teaching content"},{"location":"resources/Resource-Tools/flode/#creating-and-editing-a-new-flode-file","text":"If you want to create Flode charts independently of any Codio Course content, create a new project from the Dashboard > My Projects area. Once inside a project, to create a new flow chart, simply create a new file with the extension .flode . A new Flode window will appear and you can start creating and editing your chart. A new file is created from either the File menu or by right-clicking on the project name line in the file tree. To edit an existing .flode file, simply click on the file name to open the Flode editor.","title":"Creating and editing a new Flode file"},{"location":"resources/Resource-Tools/flode/#detailed-instructions","text":"To get detailed instructions on how to use Flode, Log into Codio Select Resources from the items on the left of the Dashboard Look for An Introduction to Programming Select the first Module, Flode Press Start Assignment from the first Unit in the list Introduction to Flode","title":"Detailed instructions"},{"location":"resources/Resource-Tools/flode/#credits","text":"Many thanks to the folks at JGraph for their excellent flowcharting and diagramming tools.","title":"Credits"},{"location":"resources/Resource-Tools/jeroo/","text":"Jeroo is now available in Codio as a Stack . With Codio guides you can provide instructions for an assignment side-by-side with the Jeroo environment. Start by creating either a new project or assignment in your course, selecting the Jeroo stack When created, select File > New from the Codio menu and create a file with an .jev suffix for a map file or .jsc for a program file. You can set up your Guide to automatically open files you want your students to use. If you don't want the guide to take up screen space, you can set it up to collapse on open or students can simply click on the files in the file tree for them to open in Jeroo Jeroo files are not saved automatically , you must select File > Save to save your work. For more information on Jeroo, click here","title":"Jeroo"},{"location":"resources/Resource-Tools/lexikon/","text":"The Codio Lexikon is an integrated help system that lets users lookup information on a variety of languages and topics quickly and easily. Having access to concise reference information as new topics are learned is extremely useful and saves having to search the web and separate the wheat from the chaff! The Lexikon is organized into Topics. We currently have added: Crunch CSS HTML Javascript Linux CyberSecurity However, we can easily add coverage for any other Topic. If you are interested in additional topics, please email help@codio.com. Using the Lexikon with guide content \uf0c1 To make accessing the Lexikon from your content even easier, we have a Global Option in the Guide settings that lets you specify the default topic to select. If you use this option, an icon will appear in the toolbar that will load the Lexikon window with the selected topic automatically selected. Click the Settings button, then select the Global tab. You can then specify the Topic name in the available field. To see what topics are available, bring up the Lexikon from the Tools menu. The available topics are shown in the dropdown list. Once you have specified a Lexikon topic, the student will see an icon in the Guide toolbar. When they press this, the Lexikon will appear in the same panel as the Guide with the correct topic automatically selected.","title":"Lexikon"},{"location":"resources/Resource-Tools/lexikon/#using-the-lexikon-with-guide-content","text":"To make accessing the Lexikon from your content even easier, we have a Global Option in the Guide settings that lets you specify the default topic to select. If you use this option, an icon will appear in the toolbar that will load the Lexikon window with the selected topic automatically selected. Click the Settings button, then select the Global tab. You can then specify the Topic name in the available field. To see what topics are available, bring up the Lexikon from the Tools menu. The available topics are shown in the dropdown list. Once you have specified a Lexikon topic, the student will see an icon in the Guide toolbar. When they press this, the Lexikon will appear in the same panel as the Guide with the correct topic automatically selected.","title":"Using the Lexikon with guide content"},{"location":"resources/Resource-Tools/pencilcode/","text":"Pencil Code is now available in Codio installing from Tools->Install Software With Codio guides you can provide instructions for an assignment side-by-side with the Pencil Code environment. Start by creating either a new project or assignment in your course, and going to Tools -> Install Software to install the Pencil Code server To create an empty Pencil Code project in Codio, select File > New from the Codio menu and create a file with an .pencilcode suffix. You can set up your Guide to automatically open files you want your students to use. If you don't want the guide to take up screen space, you can set it up to collapse on open or students can simply click on the files in the file tree for them to open in Jeroo For more information on Pencil Code, click here","title":"Pencil Code"},{"location":"resources/Resource-Tools/pyret/","text":"Pyret is now available in Codio With Codio guides you can provide instructions for an assignment side-by-side with the Pencil Code environment. To create an empty Pyret project in Codio, select File > New from the Codio menu and create a file with an .arr suffix. You can set up your Guide to automatically open files you want your students to use. If you don't want the guide to take up screen space, you can set it up to collapse on open or students can simply click on the files in the file tree for them to open in Pyret For more information on Pyret, click here","title":"Pyret"},{"location":"resources/Resource-Tools/scratch/","text":"The desktop version of Scratch in now available in Codio. This version of Scratch has all the features of the online version but because it is the standalone version, students won\u2019t be able to view or comment on Scratch community projects. With Codio guides you can provide instructions for an assignment side-by-side with the Scratch development environment. To create an empty Scratch project in Codio, select File > New from the Codio menu and create a file with an .sb3 suffix. You can set up your Guide to automatically open the Scratch file you want your students to use. If you don't want the guide to take up screen space, you can set it up to collapse on open . To use a project you have already created on the web version of Scratch, open the project in Scratch and select File > Save to your computer then in Codio select File > Upload and open the Scratch file you downloaded. Scratch files are not saved automatically , you must select File > Save to save your work. Get started by clicking on Tutorials in the Scratch menu area. For more information see Scratch Starter Pack \uf0c1 We also have a Hello Codio in Scratch Starter Pack to help you get started You can find this by either searching for 'Scratch' in the starter pack area or - For Codio.com users, click here - For Codio.co.uk users, click here","title":"Scratch"},{"location":"resources/Resource-Tools/scratch/#starter-pack","text":"We also have a Hello Codio in Scratch Starter Pack to help you get started You can find this by either searching for 'Scratch' in the starter pack area or - For Codio.com users, click here - For Codio.co.uk users, click here","title":"Starter Pack"},{"location":"resources/Resource-Tools/tkinter/","text":"Important: Tkinter is used to build User Interfaces for Python development. For those following the OCR GCSE, this is not a requirement. For more advanced students, OCR and Codio recommend that you use HTML, CSS and Javascript for building modern front-end UIs that have far superior workplace relevance than Python+Tkinter. There are a number of teachers who use the Tkinter UI library for Python. Tkinter normally relies on a local PC with a graphics card. Codio, being Cloud based, does not not have graphics cards. Nevertheless, we have implemented a fully functional solution that works within a browser and in the Cloud. This page describes the various ways you can get Tkinter up and running. Starter Pack : Clean - gives you a clean Tkinter project with preconfigured menu buttons for running your Python file and the viewer. Starter Pack : Widgets - gives you a set of demo widgets you can play with. Stack - gives you an empty project with tkinter ready to run. From scratch - describes how to make any existing Codio project ready to run Tkinter that was not initially set up to run Tkinter. Starter Pack : Clean \uf0c1 Perhaps the best place for most users to start is the TKinter Clean Starter Pack. This gives you a clean project with a simple demo Python file to play with. Here is a video that runs you through the entire process. From the main dashboard, select Starter Packs on the left, then the Certified tab at the top of the main page. Search for tkinter in the search field then select the TKinter Clean pack as shown above. You will be taken to the new project screen where you can enter a name for your project. Finally, press the Create button at the bottom of the page and a new project will be created. Once it is loaded, follow these steps to see the demo file working. Open up demo.py in the file tree. In the Codio menu, press the Start Current button (the one with the rocket icon next to it). This will run your Python file. It opens a new terminal window, which you should leave open. The right most Codio menu item should be Viewer . Press this to run the viewer. It will take a few seconds to load. If you change your Python code, you will need to close the terminal window and then press the Start Current button again to reload it. You do not need to reload the Viewer, which will automatically reconnect when you rerun your Python file. Starter Pack - Widgets \uf0c1 This gives you a complete set of demo widgets. From the main dashboard, select Starter Packs on the left, then the Certified tab at the top of the main page. Search for tkinter in the search field then select the TKinter Widgets pack as shown above. You will be taken to the new project screen where you can enter a name for your project. Finally, press the Create button at the bottom of the page and a new project will be created. TKinter Widgets \uf0c1 This Pack contains a set of widget demo files that you can play with. Once your project opens, you can quickly play with this in one of 2 ways using the Rocket menu item. This is the Codio menu item with a rocket next to it. Full Widget Demo \uf0c1 In the Codio menu, select 'Start widget.py\u2019. From the neighbouring menu item, press View widget demo . Individual python file \uf0c1 Open a python file in the file tree. From the neighbouring menu item, press View widget demo . Stack \uf0c1 If you want to create a completely empty Codio project that is Tkinter ready, then go to the Stacks menu item in the main dashboard. Click on the Certified tab at the top then search for tkinter Finally, select the stack after which you will be taken to the new project screen. Enter a project name then press the Create button at the bottom of the page and a new project will be created. This Stack will not give you any preconfigured buttons (see the above Starter Pack: Clean for this). You can now create your Python files and run Tkinter. Here are some tips on how to do this. Running the Python file \uf0c1 To run a Python file you will need to use the Terminal or configure you own Codio button shortcut. To use the terminal, open a new Terminal from the Tools->Terminal menu item. Then make sure you are in the correct folder and type python3 mypythonfile.py . Once this is running, do not close the terminal window or you will terminate the Python process. Go to the right most Codio menu and from the dropdown, select Box URL . This will open up the viewer. For information on how to set up your own Codio menu buttons, click here . From scratch \uf0c1 For those of you who want to add Tkinter support to an existing Codio project, you should follow the steps below. Adding the XServer component will add support for any application that writes to the screen. Open the Install Software screen from the Tools->Install Software menu. Type x server into the search box. Press the Install button to install the XServer component. When the installation has completed (This can take some time, so be patient), Restart the box We would recommend that you configure your .codio file to have an option to start the viewer. This is described here . You should either overwrite the entire contents of this file with the content shown below, or if you already have a .codio file with contents you want to keep, just add the line with the Viewer entry you can see below into the preview section. { // Configure your Run and Preview buttons here. // Run button configuration \"commands\": { \"Start Current\": \"python3 {{filename}}\" }, // Preview button configuration \"preview\": { \"Viewer\": \"https://{{domain}}:9500/\" } }","title":"Tkinter"},{"location":"resources/Resource-Tools/tkinter/#starter-pack-clean","text":"Perhaps the best place for most users to start is the TKinter Clean Starter Pack. This gives you a clean project with a simple demo Python file to play with. Here is a video that runs you through the entire process. From the main dashboard, select Starter Packs on the left, then the Certified tab at the top of the main page. Search for tkinter in the search field then select the TKinter Clean pack as shown above. You will be taken to the new project screen where you can enter a name for your project. Finally, press the Create button at the bottom of the page and a new project will be created. Once it is loaded, follow these steps to see the demo file working. Open up demo.py in the file tree. In the Codio menu, press the Start Current button (the one with the rocket icon next to it). This will run your Python file. It opens a new terminal window, which you should leave open. The right most Codio menu item should be Viewer . Press this to run the viewer. It will take a few seconds to load. If you change your Python code, you will need to close the terminal window and then press the Start Current button again to reload it. You do not need to reload the Viewer, which will automatically reconnect when you rerun your Python file.","title":"Starter Pack : Clean"},{"location":"resources/Resource-Tools/tkinter/#starter-pack-widgets","text":"This gives you a complete set of demo widgets. From the main dashboard, select Starter Packs on the left, then the Certified tab at the top of the main page. Search for tkinter in the search field then select the TKinter Widgets pack as shown above. You will be taken to the new project screen where you can enter a name for your project. Finally, press the Create button at the bottom of the page and a new project will be created.","title":"Starter Pack - Widgets"},{"location":"resources/Resource-Tools/tkinter/#tkinter-widgets","text":"This Pack contains a set of widget demo files that you can play with. Once your project opens, you can quickly play with this in one of 2 ways using the Rocket menu item. This is the Codio menu item with a rocket next to it.","title":"TKinter Widgets"},{"location":"resources/Resource-Tools/tkinter/#full-widget-demo","text":"In the Codio menu, select 'Start widget.py\u2019. From the neighbouring menu item, press View widget demo .","title":"Full Widget Demo"},{"location":"resources/Resource-Tools/tkinter/#individual-python-file","text":"Open a python file in the file tree. From the neighbouring menu item, press View widget demo .","title":"Individual python file"},{"location":"resources/Resource-Tools/tkinter/#stack","text":"If you want to create a completely empty Codio project that is Tkinter ready, then go to the Stacks menu item in the main dashboard. Click on the Certified tab at the top then search for tkinter Finally, select the stack after which you will be taken to the new project screen. Enter a project name then press the Create button at the bottom of the page and a new project will be created. This Stack will not give you any preconfigured buttons (see the above Starter Pack: Clean for this). You can now create your Python files and run Tkinter. Here are some tips on how to do this.","title":"Stack"},{"location":"resources/Resource-Tools/tkinter/#running-the-python-file","text":"To run a Python file you will need to use the Terminal or configure you own Codio button shortcut. To use the terminal, open a new Terminal from the Tools->Terminal menu item. Then make sure you are in the correct folder and type python3 mypythonfile.py . Once this is running, do not close the terminal window or you will terminate the Python process. Go to the right most Codio menu and from the dropdown, select Box URL . This will open up the viewer. For information on how to set up your own Codio menu buttons, click here .","title":"Running the Python file"},{"location":"resources/Resource-Tools/tkinter/#from-scratch","text":"For those of you who want to add Tkinter support to an existing Codio project, you should follow the steps below. Adding the XServer component will add support for any application that writes to the screen. Open the Install Software screen from the Tools->Install Software menu. Type x server into the search box. Press the Install button to install the XServer component. When the installation has completed (This can take some time, so be patient), Restart the box We would recommend that you configure your .codio file to have an option to start the viewer. This is described here . You should either overwrite the entire contents of this file with the content shown below, or if you already have a .codio file with contents you want to keep, just add the line with the Viewer entry you can see below into the preview section. { // Configure your Run and Preview buttons here. // Run button configuration \"commands\": { \"Start Current\": \"python3 {{filename}}\" }, // Preview button configuration \"preview\": { \"Viewer\": \"https://{{domain}}:9500/\" } }","title":"From scratch"}]}